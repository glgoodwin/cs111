<?xml version="1.0" encoding="UTF-8"?><div xmlns="http://www.w3.org/1999/xhtml" xmlns:b="http://www.backbase.com/b" xmlns:bx="http://www.backbase.com/bx" xmlns:s="http://www.backbase.com/s" xmlns:c="http://www.collegenet.com/c" xmlns:r25="http://www.collegenet.com/r25" xmlns:s25="http://www.collegenet.com/s25" style="display:none;">
<s:include b:url="{concat($s25_controlpath,'s25-data/s25-data.xml')}" b:once="true"/>
<div style="display:none;">
<s:behavior b:name="S25RsrvWizEditorPlaceholder">
<s:event b:on="construct">
<s:super/>
<s:if b:test="@c:required = 'true' and exists(@c:crumb_xpath)">
<s:if b:test="string-length(xpath(@c:crumb_xpath)) = 0">
<s:if b:test="not(@c:id = 'description' or @c:id = 'comment' or @c:id = 'notes')">
<s:setatt c:valid="false"/>
</s:if>
</s:if>
</s:if>
<s:if b:test="@c:id = 'headcount'">
<s:if b:test="$tProfile/r25:expected_count/@required = 'T' and string-length($tProfile/r25:expected_count) = 0">
<s:setatt c:valid="false"/>
</s:if>
<s:if b:test="$tProfile/r25:registered_count/@required = 'T' and string-length($tProfile/r25:registered_count) = 0">
<s:setatt c:valid="false"/>
</s:if>
</s:if>
<s:if b:test="@c:id = 'space'">
<s:if b:test="$tProfile/r25:space_pref">
<s:setatt c:valid="true"/>
</s:if>
</s:if>
<s:if b:test="@c:id = 'resource'">
<s:if b:test="$tProfile/r25:resource_pref">
<s:setatt c:valid="true"/>
</s:if>
</s:if>
</s:event>
</s:behavior>
<s:behavior b:name="S25RsrvWizEditor" b:behavior="S25Observer">
<s:initatt c:purpose="S25RsrvWizEditor" c:editor="true" c:init="" c:valid="true" c:crumb="" c:error=""/>
<s:event b:on="construct">
<s:super/>
<s:setatt c:dirty="true"/>
<s:variable b:name="tEvWiz" b:scope="tag" b:select="ancestor::s25:rsrv_wiz[1]"/>
<s:variable b:name="pElm" b:scope="local" b:select="."/>
<s:variable b:name="pHandler" b:scope="local" b:select="'ObserveRsrvWizard'"/>
<s:task b:action="trigger" b:event="RegisterObserver" b:target="$tEvWiz"/>
<s:variable b:name="pEditor" b:scope="local" b:select="."/>
<s:task b:action="trigger" b:event="EditorConstruct" b:target="$tEvWiz"/>
<s:variable b:name="tContainer" b:scope="tag" b:select=""/>
<s:variable b:name="tContent" b:scope="tag" b:select=""/>
<s:render b:destination="." b:mode="replacechildren">
<div class="s25rsrvwiz-editor-container" c:id="container">
<div class="s25rsrvwiz-editor-content" c:id="content"/>
</div>
</s:render>
<s:task b:action="assign" b:target="$tContainer" b:scope="tag" b:select="div[@c:id='container']"/>
<s:task b:action="assign" b:target="$tContent" b:scope="tag" b:select="$tContainer/div[@c:id='content']"/>
<s:task b:action="trigger" b:event="Paint" b:target="."/>
<s:task b:action="trigger" b:event="select" b:target="."/>
</s:event>
<s:event b:on="select">
<s:task b:test="not(@c:init='1')" b:action="trigger" b:event="_Init" b:target="."/>
</s:event>
<s:event b:on="_Init">
<s:task b:action="trigger" b:event="Reset" b:target="."/>
<s:if b:test="@c:required='true'">
<s:with b:target=".//div[@c:id='title']">
<s:setatt class="icon-required"/>
</s:with>
</s:if>
<s:task b:action="trigger" b:event="Validate" b:target="."/>
<s:setatt c:init="1"/>
<s:if b:test="@c:init_focus = 'true'">
<s:task b:action="trigger" b:event="s25-focus" b:target="."/>
</s:if>
</s:event>
<s:event b:on="Reset">
<s:setatt c:valid="true"/>
<s:with b:target=".//*[@c:ref]">
<s:task b:action="trigger" b:event="load" b:target="."/>
</s:with>
</s:event>
<s:event b:on="Save">
<s:task b:action="trigger" b:event="change" b:target=".//*[@c:ref]"/>
<s:task b:action="trigger" b:event="UpdateRequiredStatus" b:target="$tEvWiz"/>
</s:event>
<s:event b:on="Validate">
<s:sequential>
<s:task b:action="trigger" b:event="validate" b:target=".//*[@c:ref]"/>
<s:choose>
<s:when b:test=".//input[@b:valid = 'required'] or .//input[@b:valid = 'false']">
<s:setatt c:valid="false"/>
</s:when>
<s:otherwise>
<s:setatt c:valid="true"/>
</s:otherwise>
</s:choose>
</s:sequential>
</s:event>
<s:event b:on="ValidateAndSave">
<s:sequential>
<s:task b:action="trigger" b:event="Validate" b:target="."/>
<s:task b:action="trigger" b:event="Save" b:target="."/>
</s:sequential>
</s:event>
<s:event b:on="ObserveRsrvWizard">
<s:variable b:name="lEvent" b:scope="local" b:select="$tEvWiz/$tRaisedEvent"/>
</s:event>
</s:behavior>
<s:behavior b:name="S25RsrvWizCard">
<s:event b:on="select">
<s:super/>
<s:task b:action="trigger" b:event="CardSelect" b:target="ancestor::s25:rsrv_wiz[1]"/>
<s:choose>
<s:when b:test="not(@c:init='1')">
<s:setatt c:init="1" c:dirty="true"/>
<s:variable b:name="lCard" b:scope="local" b:select="@c:id"/>
<s:variable b:name="lThread" b:scope="local" b:select="ancestor::s25:rsrv_wiz[1]/@c:thread"/>
<s:choose>
<s:when b:test="string-length($lCard) &gt; 0">
<s:variable b:name="lThreadCard" b:scope="local" b:select="ancestor::s25:rsrv_wiz[1]/$tPrefXml/wizard/threads/thread[@name=$lThread]/card[@name=$lCard]"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$lCard" b:select="@c:pos"/>
<s:variable b:name="lThreadCard" b:scope="local" b:select="ancestor::s25:rsrv_wiz[1]/$tPrefXml/wizard/threads/thread[@name=$lThread]/card[position()=$lCard]"/>
</s:otherwise>
</s:choose>
<s:variable b:name="tCardSupplementaryText" b:scope="tag" b:select="$lThreadCard/info"/>
<s:task b:action="xml2string" b:variable="$tCardSupplementaryText"/>
<s:if b:test="not(string-length($tCardSupplementaryText) = 0)">
<s:script><![CDATA[

var lText = _vars['tCardSupplementaryText'][0];
lText = lText.replace(/&lt;/g, '<');
lText = lText.replace(/&gt;/g, '>');
bpc.render('<div class="contentInstructions">' + lText + '</div>', 'asfirstchild', '.', _current);

]]></s:script>
</s:if>
<s:variable b:name="tEditor" b:scope="tag" b:select="$lThreadCard/editor"/>
<s:variable b:name="lCount" b:scope="local" b:select="count(*[@c:editor])"/>
<s:with b:target="div[@c:editor]">
<s:variable b:name="lEdName" b:scope="local" b:select="string(@c:id)"/>
<s:variable b:name="lEdControl" b:scope="local" b:select="string(@c:control)"/>
<s:variable b:name="lEdDef" b:scope="local" b:select="."/>
<s:script><![CDATA[

var oEdDef = _vars['lEdDef'][0];
var sName = _vars['lEdControl'][0];
var lAttr = oEdDef.attributes
var oAttr = { };
if (lAttr['c:editor']) oAttr['c:editor'] = lAttr['c:editor'].nodeValue;
if (lAttr['c:id']) oAttr['c:id'] = lAttr['c:id'].nodeValue;
if (lAttr['c:control']) oAttr['c:control'] = lAttr['c:control'].nodeValue;
if (lAttr['c:name']) oAttr['c:name'] = lAttr['c:name'].nodeValue;
if (lAttr['c:title']) oAttr['c:title'] = lAttr['c:title'].nodeValue;
if (lAttr['c:crumb_title']) oAttr['c:crumb_title'] = lAttr['c:crumb_title'].nodeValue;
if (lAttr['c:crumb_path']) oAttr['c:crumb_xpath'] = lAttr['c:crumb_xpath'].nodeValue;
if (lAttr['c:init']) oAttr['c:init'] = lAttr['c:init'].nodeValue;
if (lAttr['c:required']) oAttr['c:required'] = lAttr['c:required'].nodeValue;
if (lAttr['c:no_edit']) oAttr['c:no_edit'] = lAttr['c:no_edit'].nodeValue;
if (lAttr['c:message']) oAttr['c:message'] = lAttr['c:message'].nodeValue;
if (lAttr['c:requirement_type']) oAttr['c:requirement_type'] = lAttr['c:requirement_type'].nodeValue;
if (lAttr['c:position'] && lAttr['c:position'].nodeValue == '1') {
oAttr['c:init_focus'] = 'true';
}
var sXml = '<'+sName;
for ( var n in oAttr ) sXml += ' '+n+'="'+oAttr[n]+'"';
sXml += ' />';
bpc.render(sXml,'replace','.',_current);

]]></s:script>
</s:with>
<s:variable b:name="tFocus" b:scope="tag" b:select=""/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="select" b:target="*[@c:editor]"/>
<s:setatt c:dirty="true"/>
</s:otherwise>
</s:choose>
<s:task b:action="trigger" b:target="ancestor::s25:rsrv_wiz[1]" b:event="CloseIconStatus"/>
</s:event>
<s:event b:on="deselect">
<s:variable b:name="lCardID" b:select="string(@c:id)"/>
<s:choose>
<s:when b:test="$bpc_focusCurrentElement/ancestor::div[@b:behavior = 'S25RsrvWizCard' and @c:id = $lCardID]">
<s:task b:action="assign" b:target="$tFocus" b:select="$bpc_focusCurrentElement"/>
</s:when>
<s:when b:test="$bpc_focusLastElement/ancestor::div[@b:behavior = 'S25RsrvWizCard' and @c:id = $lCardID]">
<s:task b:action="assign" b:target="$tFocus" b:select="$bpc_focusLastElement"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$tFocus" b:select=".//*[name() = 'input' or name() = 'select'][1]"/>
</s:otherwise>
</s:choose>
<s:task b:action="trigger" b:target="ancestor::s25:rsrv_wiz[1]" b:event="CloseIconStatus"/>
<s:super/>
</s:event>
<s:event b:on="Reset">
<s:setatt c:dirty="false"/>
<s:with b:target="*[@c:editor]">
<s:setatt c:init=""/>
</s:with>
</s:event>
</s:behavior>
<s:htmlstructure b:name="s25:rsrv_wiz_crumb" b:behavior="S25RsrvWizCrumb">
<div class="s25rsrvwiz-crumb"><s:innercontent/></div>
</s:htmlstructure>
<s:behavior b:name="S25RsrvWizCrumb">
<s:initatt c:id="" c:pos=""/>
<s:event b:on="construct">
<s:variable b:name="tWiz" b:scope="tag" b:select="ancestor::s25:rsrv_wiz[1]"/>
<s:variable b:name="lCardPosition" b:scope="local" b:select="@c:pos"/>
<s:variable b:name="lThreadId" b:scope="local" b:select="$tWiz/@c:thread"/>
<s:variable b:name="lCardDef" b:scope="local" b:select="$tWiz/$tPrefXml/wizard/threads/thread[@name=$lThreadId]/card[position() = $lCardPosition]"/>
<s:variable b:name="tCard" b:scope="tag" b:select="$tWiz/$tDeck/div[@c:pos = $lCardPosition]"/>
<s:task b:action="transform" b:datasource="$lCardDef" b:stylesheet="$XslS25RsrvWizCrumbLabels" b:destination="." b:mode="replacechildren"/>
</s:event>
<s:event b:on="Update">
<s:task b:action="trigger" b:event="Reset" b:target="."/>
</s:event>
<s:event b:on="Reset">
<s:task b:action="trigger" b:event="Reset" b:target="div/div"/>
</s:event>
<s:event b:on="command">
<s:task b:action="scrollto" b:target="//body"/>
<s:variable b:name="lWiz" b:scope="local" b:select="ancestor::s25:rsrv_wiz[1]"/>
<s:variable b:name="lLockError" b:scope="local" b:select="'false'"/>
<s:if b:test="not($lWiz/@c:mode = 'reserve' or $lWiz/@c:mode = 'clone') and $lWiz/@c:locked = 'false'">
<s:variable b:name="lLockResult" b:scope="local" b:select="''"/>
<s:variable b:name="lEventID" b:scope="local" b:select="string(ancestor::s25:rsrv_wiz[1]/$tRespXml//r25:event_id)"/>
<s:task b:action="trigger" b:event="LockEvent" b:target="id('Controller')"/>
<s:if b:test="$lLockResult = 'LockSuccess'">
<s:with b:target="$lWiz">
<s:setatt c:locked="true"/>
</s:with>
</s:if>
<s:if b:test="$lLockResult = 'LockConflict'">
<s:task b:action="assign" b:target="$lLockError" b:select="'true'"/>
</s:if>
</s:if>
<s:if b:test="$lLockError = 'false'">
<s:if b:test="$lWiz/$tCard/@c:modal='true' and not($lWiz/@c:mode = 'post-create')">
<s:task b:action="removeclass" b:target="$lWiz/$tTable" b:value="RsrvWizConfirm"/>
</s:if>
<s:choose>
<s:when b:test="$lWiz/@c:mode = 'post-create'">
<s:task b:action="trigger" b:event="ReEdit" b:target="ancestor::s25:rsrv_wiz[1]"/>
</s:when>
<s:otherwise>
<s:variable b:name="lPosition" b:scope="local" b:select="@c:pos"/>
<s:variable b:name="lNextCard" b:scope="local" b:select="$lWiz/$tDeck/div[@c:pos = $lPosition]"/>
<s:task b:action="trigger" b:event="ValidateCard" b:target="$lWiz"/>
<s:task b:action="set" b:target="$lNextCard/@c:last" b:value="{$lPosition}"/>
<s:task b:action="select" b:target="$lNextCard"/>
</s:otherwise>
</s:choose>
</s:if>
</s:event>
<s:event b:on="select">
<s:setatt c:dirty="true"/>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-active"/>
<s:task b:action="enable" b:target="."/>
</s:event>
<s:event b:on="deselect">
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-active"/>
<s:choose>
<s:when b:test="@c:dirty='true'">
<s:task b:action="trigger" b:event="Update" b:target="div/div"/>
</s:when>
<s:otherwise>
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-visited"/>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="enable">
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-enabled"/>
</s:event>
<s:event b:on="disable">
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-active s25rsrvwiz-crumb-enabled s25rsrvwiz-crumb-visited s25rsrvwiz-crumb-preset"/>
<s:with b:target="div/div">
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-active s25rsrvwiz-crumb-enabled s25rsrvwiz-crumb-visited s25rsrvwiz-crumb-preset"/>
</s:with>
</s:event>
<s:event b:on="Validate">
<s:variable b:name="lCardPosition" b:scope="local" b:select="@c:pos"/>
<s:task b:action="assign" b:target="$tCard" b:scope="tag" b:select="$tWiz/$tDeck/div[@c:pos = $lCardPosition]"/>
<s:task b:action="trigger" b:event="Validate" b:target="div/div"/>
<s:task b:action="trigger" b:event="UpdateRequiredStatus" b:target="ancestor::s25:rsrv_wiz[1]"/>
</s:event>
</s:behavior>
<s:behavior b:name="S25RsrvWizCrumbLabel">
<s:initatt c:name="" c:title="" c:xpath="" class="s25rsrvwiz-crumb-label"/>
<s:event b:on="construct">
<s:variable b:name="tWiz" b:scope="tag" b:select="ancestor::s25:rsrv_wiz[1]"/>
<s:variable b:name="tCrumb" b:scope="tag" b:select="ancestor::s25:rsrv_wiz_crumb[1]"/>
<s:variable b:name="lEditorName" b:scope="local" b:select="@c:name"/>
<s:variable b:name="tEd" b:scope="tag" b:select="$tCrumb/$tCard/*[@c:name=$lEditorName]"/>
</s:event>
<s:event b:on="Reset">
<s:variable b:name="lEditorName" b:scope="local" b:select="@c:name"/>
<s:variable b:name="lCrumb" b:scope="local" b:select="$tCrumb/$tCard/*[@c:name=$lEditorName]/@c:crumb"/>
<s:choose>
<s:when b:test="not($tWiz/$tEvent/@status)">
<s:task b:action="trigger" b:event="ResetToTitle" b:target="."/>
</s:when>
<s:when b:test="$tWiz/$tEvent/@status = 'new' and not($tWiz/@c:mode = 'clone')">
<s:choose>
<s:when b:test="string-length($lCrumb) = 0">
<s:task b:action="trigger" b:event="ResetToTitle" b:target="."/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="ResetToCrumb" b:target="."/>
</s:otherwise>
</s:choose>
</s:when>
<s:otherwise>
<s:choose>
<s:when b:test="string-length(@c:xpath) = 0">
<s:task b:action="trigger" b:event="ResetToTitle" b:target="."/>
</s:when>
<s:when b:test="not(string-length($lCrumb) = 0)">
<s:task b:action="trigger" b:event="ResetToCrumb" b:target="."/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="ResetToXpath" b:target="."/>
</s:otherwise>
</s:choose>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="Update">
<s:task b:action="trigger" b:event="Reset" b:target="."/>
</s:event>
<s:event b:on="Validate">
<s:variable b:name="lEditorName" b:scope="local" b:select="@c:name"/>
<s:variable b:name="lEditor" b:scope="tag" b:select="$tCrumb/$tCard/*[@c:name=$lEditorName]"/>
<s:choose>
<s:when b:test="$lEditor/@c:valid='false'">
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-invalid" b:target="span[@c:id='label']"/>
</s:when>
<s:otherwise>
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-invalid" b:target="span[@c:id='label']"/>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="ResetToTitle">
<s:choose>
<s:when b:test="@c:crumb_title and string-length(@c:crumb_title) gt 0">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren"><s:textnode b:label="{@c:crumb_title}"/></s:render>
</s:when>
<s:otherwise>
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren"><s:textnode b:label="{@c:title}"/></s:render>
</s:otherwise>
</s:choose>
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-visited"/>
</s:event>
<s:event b:on="ResetToXpath">
<s:variable b:name="lTarget" b:scope="local" b:select="xpath(concat('$tWiz/',@c:xpath))"/>
<s:variable b:name="lExpected" b:select="'Expected Head Count'"/>
<s:variable b:name="lRegistered" b:select="'Registered Head Count'"/>
<s:if b:test="@c:name='headcount'">
<s:if b:test="starts-with($lTarget, concat($lExpected,' ; '))">
<s:task b:action="assign" b:target="$lTarget" b:select="substring-after($lTarget, concat($lExpected,' ; '))"/>
</s:if>
<s:if b:test="ends-with($lTarget, concat($lRegistered,' '))">
<s:task b:action="assign" b:target="$lTarget" b:select="substring-before($lTarget, concat($lRegistered,' '))"/>
</s:if>
<s:if b:test="ends-with($lTarget, '; ')">
<s:task b:action="assign" b:target="$lTarget" b:select="substring-before($lTarget, '; ')"/>
</s:if>
</s:if>
<s:if b:test="@c:name = 'ev_custom_attr'">
<s:task b:action="assign" b:target="$lTarget" b:select="replace($lTarget, ':', '')"/>
<s:task b:action="assign" b:target="$lTarget" b:select="replace($lTarget, '\$', '')"/>
</s:if>
<s:if b:test="(@c:name = 'space' or @c:name = 'resource' or @c:name = 'ev_category' or @c:name = 'ev_custom_attr' or @c:name = 'additional_sponsor') and contains($lTarget, '|')">
<s:script><![CDATA[

var valueArray = (_vars['lTarget'][0]).split('|');
valueArray.sort();
for (w=0; w < valueArray.length; w++) { 
if (valueArray[w].charAt(valueArray[w].length - 1) == ' ') {
valueArray[w] = valueArray[w].substring(0, valueArray[w].length - 1);
}
}
bpc.setVariable('lTarget',[valueArray.join('; ')], 'local');

]]></s:script>
</s:if>
<s:if b:test="not(@c:name = 'datetime') and string-length($lTarget) gt $tWiz/$tCrumbMaxLength">
<s:task b:action="assign" b:target="$lTarget" b:select="concat(substring($lTarget,1,$tCrumbMaxLength - 3),'...')"/>
</s:if>
<s:choose>
<s:when b:test="string-length($lTarget) = 0">
<s:task b:action="addclass" b:target="." b:value="s25rsrvwiz-crumb-enabled"/>
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div><s:textnode b:label="{@c:crumb_title}"/></div> 
</s:render>
</s:when>
<s:otherwise>
<s:variable b:name="Left">&lt;</s:variable>
<s:variable b:name="Right">&gt;</s:variable>
<s:variable b:name="DisplayValue" b:select="concat(' ', $lTarget)"/>
<s:if b:test="(@c:name='description' or @c:name='description_html') and (contains($lTarget, $Left) or contains($lTarget, $Right))">
<s:task b:action="assign" b:target="$DisplayValue" b:select="concat(' ', 'Content entered...')"/>
</s:if>
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{$DisplayValue}"/></div>
</s:render>
</s:otherwise>
</s:choose>
<s:if b:test="string($lTarget) ne '' and string($lTarget) ne '...'">
<s:task b:action="addclass" b:target="." b:value="s25rsrvwiz-crumb-visited"/>
<s:task b:action="removeclass" b:target="." b:value="s25rsrvwiz-crumb-preset"/>
</s:if>
</s:event>
<s:event b:on="ResetToCrumb">
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-active"/>
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-preset"/>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-visited"/>
<s:variable b:name="lEditorName" b:scope="local" b:select="@c:name"/>
<s:variable b:name="lTxt" b:scope="local" b:select="$tCrumb/$tCard/*[@c:name=$lEditorName]/@c:crumb"/>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-visited"/>
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-preset"/>
<s:choose>
<s:when b:test="string-length($lTxt) = 0">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<span><s:textnode b:label="{@c:crumb_title}"/></span> 
</s:render>
</s:when>
<s:otherwise>
<s:if b:test="@c:name = 'ev_custom_attr'">
<s:task b:action="assign" b:target="$lTxt" b:select="replace($lTxt, ':', '')"/>
<s:task b:action="assign" b:target="$lTxt" b:select="replace($lTxt, '\$', '')"/>
</s:if>
<s:if b:test="not(@c:name = 'datetime' or @c:name = 'resource' or @c:name='space')">
<s:task b:test="string-length($lTxt) gt $tWiz/$tCrumbMaxLength" b:action="assign" b:target="$lTxt" b:select="concat(substring($lTxt,1,$tWiz/$tCrumbMaxLength - 3),'...')"/>
</s:if>
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{concat(' ', replace($lTxt, ';;', ';'))}"/></div>
</s:render>
</s:otherwise>
</s:choose>
</s:event>
</s:behavior>
<s:behavior b:name="ObjectOption">
<s:initatt class="RsrvWiz_ObjectSelectItem"/>
<s:state b:on="deselect" b:hover="RsrvWiz_ObjectSelectItem_Hover" b:disabled="RsrvWiz_ObjectSelectItem_Disabled"/>
<s:state b:on="select" b:normal="RsrvWiz_ObjectSelectItem_Selected"/>
<s:event b:on="mousedeeper">
<s:task b:action="trigger" b:event="mouseenter"/>
<s:super/>
</s:event>
<s:event b:on="click">
<s:super/>
<s:task b:action="deselect" b:target="../div"/>
<s:task b:action="select"/>
</s:event>
</s:behavior>
<s:behavior b:name="AddFav">
<s:event b:on="click">
<s:variable b:name="lEditor" b:scope="local" b:select="ancestor::*[@c:editor='true'][1]"/>
<s:variable b:name="lFavObjId" b:scope="local" b:select="string($lEditor/$tCurrentObject/@c:obj_id)"/>
<s:variable b:name="lFavObjTypeId" b:scope="local" b:select="string($lEditor/@c:obj_type_id)"/>
<s:variable b:name="lWSUrl" b:scope="local" b:select="string($lEditor/$tEvWiz/@c:r25ws_prefix)"/>
<s:variable b:name="lUrl" b:scope="local" b:select="concat($lWSUrl,'favorites.xml', '?object_id=', $lFavObjId,  '&amp;object_type=', $lFavObjTypeId)"/>
<s:variable b:name="lMethod" b:scope="local" b:select="'PUT'"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:url="{$lUrl}" b:method="{$lMethod}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="hide" b:target="."/>
<s:task b:action="show" b:target="../img[@c:purpose='Favorite']"/>
<s:with b:target="$lEditor">
<s:if b:test="$tIndices/div[@c:id='options']/div[@b:state='selected']/@c:index_id='fav'">
<s:task b:action="assign" b:target="$tLastIndex" b:scope="tag" b:select="''"/>
<s:task b:action="trigger" b:event="select" b:target="$tIndices/div[@c:id='options']/div[@b:state='selected' and @c:index_id='fav']"/>
</s:if>
</s:with>
</s:event>
</s:behavior>
<s:behavior b:name="RemoveFav">
<s:event b:on="click">
<s:variable b:name="lEditor" b:scope="local" b:select="ancestor::*[@c:editor='true'][1]"/>
<s:variable b:name="lFavObjId" b:scope="local" b:select="string($lEditor/$tCurrentObject/@c:obj_id)"/>
<s:variable b:name="lFavObjTypeId" b:scope="local" b:select="string($lEditor/@c:obj_type_id)"/>
<s:variable b:name="lWSUrl" b:scope="local" b:select="string($lEditor/$tEvWiz/@c:r25ws_prefix)"/>
<s:variable b:name="lUrl" b:scope="local" b:select="concat($lWSUrl,'favorites.xml', '?object_id=', $lFavObjId,  '&amp;object_type=', $lFavObjTypeId)"/>
<s:variable b:name="lMethod" b:scope="local" b:select="'DELETE'"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:url="{$lUrl}" b:method="{$lMethod}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="hide" b:target="."/>
<s:task b:action="show" b:target="../img[@c:purpose='NotFavorite']"/>
<s:with b:target="$lEditor">
<s:if b:test="$tIndices/div[@c:id='options']/div[@b:state='selected']/@c:index_id='fav'">
<s:task b:action="assign" b:target="$tLastIndex" b:scope="tag" b:select="''"/>
<s:task b:action="trigger" b:event="select" b:target="$tIndices/div[@c:id='options']/div[@b:state='selected' and @c:index_id='fav']"/>
</s:if>
</s:with>
</s:event>
</s:behavior>
<s:behavior b:name="S25ConflictObject" b:behavior="S25Object">
<s:event b:on="command">
<s:variable b:name="lObjType" b:select="string(@c:obj_type)"/>
<s:variable b:name="lObjConflictDate" b:select="string(@c:conflictdate)"/>
<s:script><![CDATA[

var s = _vars['lObjConflictDate'][0];
s = s.replace("T", " ");
s = s.replace(/\-\d\d:\d\d/, "");
s = s.replace(/\-/g, "/");
var t = new Date(s);
bpc.setVariable('lObjConflictDate', [t.getTime()], 'local')

]]></s:script>
<s:with b:target="id('LayoutMgr')/$tTabbar/s25:tabitem[@c:group = $lObjType]">
<s:setatt c:start_dt="{$lObjConflictDate}" c:end_dt="{$lObjConflictDate}" c:dirty="true"/>
</s:with>
<s:super/>
</s:event>
</s:behavior>
<s:htmlstructure b:name="s25:rsrv_wiz_cancel" b:behavior="S25RsrvWizEditor::Cancel">
<div><s:innercontent/></div>
</s:htmlstructure>
<s:behavior b:name="S25RsrvWizEditor::Cancel" b:behavior="S25RsrvWizEditor">
<s:initatt c:purpose="cancel"/>
<s:event b:on="construct">
<s:setatt c:init="1" c:dirty="true" c:valid="true"/>
<s:variable b:scope="local" b:name="lMode" b:select="'new'"/>
<s:task b:test="contains(ancestor::s25:rsrv_wiz/@c:mode, 'edit')" b:action="assign" b:target="$lMode" b:select="'edit'"/> 
<s:render b:destination="." b:mode="replacechildren">
<div class="s25rsrvwiz-buffer-container" c:id="container" style="text-align:center">
<div c:id="content" class="contentOptions" style="text-align:center">
<div class="confirmMessage">
Do you want to save the changes you made to this event? 
</div>
<div>
<b:button c:id="btnConfirmClose" class="confirmButton" b:action="trigger" b:event="OnClickSave" b:target="ancestor::s25:rsrv_wiz[1]">
SAVE this event before closing	
</b:button>
<b:button c:id="btnConfirmClose" class="confirmButton" b:action="trigger" b:event="Cancel" b:target="ancestor::s25:rsrv_wiz[1]">
CLOSE without saving	
</b:button>
<b:button c:id="btnAbortClose" class="confirmButton" b:action="trigger" b:event="SelectLast" b:target="ancestor::s25:rsrv_wiz[1]">
CANCEL and return to the event	
</b:button>
</div>
</div>
</div>
</s:render>
<s:task b:action="select" b:target="."/>
</s:event>
<s:event b:on="select">
<s:super/>
<s:task b:action="focus" b:target=".//b:button[@c:id='btnConfirmClose']"/>
</s:event>
</s:behavior>
<s:htmlstructure b:name="s25:rsrv_wiz_close" b:behavior="S25RsrvWizEditor::Close">
<div><s:innercontent/></div>
</s:htmlstructure>
<s:behavior b:name="S25RsrvWizEditor::Close" b:behavior="S25RsrvWizEditor">
<s:initatt c:purpose="close"/>
<s:event b:on="construct">
<s:setatt c:init="1" c:dirty="true" c:valid="true"/>
<s:render b:destination="." b:mode="replacechildren">
<div class="s25rsrvwiz-buffer-container" c:id="container">
<div c:id="content" class="contentInstructions">
<div class="confirmMessage">Finished editing this event?</div>
<div>
<b:button class="confirmButton" b:action="trigger" b:event="Cancel" b:target="ancestor::s25:rsrv_wiz[1]">YES, I&apos;m finished</b:button>
<b:button class="confirmButton" b:action="trigger" b:event="SelectLast" b:target="ancestor::s25:rsrv_wiz[1]">NO, I&apos;m not done</b:button>
</div>
</div>
</div>
</s:render>
</s:event>
</s:behavior>
<s:behavior b:name="RsrvWizInput">
<s:whenactive>
<s:keys b:keys="ctrl+190">
<s:task b:action="trigger" b:event="OnClickNext" b:target="ancestor::s25:rsrv_wiz[1]"/>
</s:keys>
<s:keys b:keys="ctrl+188">
<s:task b:action="trigger" b:event="OnClickPrevious" b:target="ancestor::s25:rsrv_wiz[1]"/>
</s:keys>
<s:keys b:keys="esc">
<s:task b:action="trigger" b:event="OnClickCancel" b:target="ancestor::s25:rsrv_wiz[1]"/>
</s:keys>
<s:keys b:keys="ctrl+13">
<s:task b:action="trigger" b:event="OnClickSave" b:target="ancestor::s25:rsrv_wiz[1]"/>
</s:keys>
</s:whenactive>
</s:behavior>
<s:behavior b:name="RsrvWizSelect" b:behavior="RsrvWizInput">
<s:event b:on="construct">
<s:super/>
<s:variable b:name="tLastValue" b:scope="tag" b:select="string(option[@b:state='selected']/@value)"/>
</s:event>
<s:event b:on="Update">
</s:event>
<s:event b:on="click">
<s:task b:test="not($bpc_browser = 'safari')" b:action="trigger" b:event="Update"/>
</s:event>
<s:event b:on="change">
<s:task b:test="$bpc_browser = 'safari'" b:action="trigger" b:event="Update"/>
</s:event>
<s:whenactive>
<s:keys b:keys="enter">
<s:task b:action="trigger" b:event="click"/> 
</s:keys>
<s:keys b:keys="up down left right">
</s:keys>
</s:whenactive>
</s:behavior>
<s:behavior b:name="TriggerAvailabilityCheck">
<s:event b:on="click">
<s:task b:action="trigger" b:event="InitiateAvailabilityCheck" b:target="ancestor::*[@c:editor='true'][1]/$tEvWiz/$tAvailabilityControl"/>
</s:event>
</s:behavior>
<s:behavior b:name="HideIconTips">
<s:event b:on="click">
<s:task b:action="hide" b:target="//div[@c:id='rsrvwiz_icon_tip']"/>
<s:variable b:name="lPrefHiddenTutorialsXml" b:scope="tag" b:select="string(id('Pref_25L_hidden_tutorials'))"/>
<s:task b:action="string2xml" b:variable="$lPrefHiddenTutorialsXml"/>
<s:if b:test="not($lPrefHiddenTutorialsXml/tutorials)">
<s:task b:action="assign" b:target="$lPrefHiddenTutorialsXml" b:scope="tag" b:select="'&lt;tutorials&gt;&lt;/tutorials&gt;'"/>
<s:task b:action="string2xml" b:variable="$lPrefHiddenTutorialsXml"/>
</s:if>
<s:if b:test="not($lPrefHiddenTutorialsXml//tutorial = 'RsrvWizIconTip')">
<s:variable b:name="lRsrvWizIconTipTutorial">	
<tutorial>RsrvWizIconTip</tutorial>
</s:variable>
<s:task b:action="string2xml" b:variable="$lRsrvWizIconTipTutorial"/>
<s:task b:action="copy" b:source="$lRsrvWizIconTipTutorial/tutorial" b:destination="$lPrefHiddenTutorialsXml/tutorials" b:mode="aslastchild"/>
<s:task b:action="xml2string" b:variable="$lPrefHiddenTutorialsXml"/>
<s:task b:action="assign" b:target="$lPrefHiddenTutorialsXml" b:select="replace($lPrefHiddenTutorialsXml, ' xmlns=&#34;http://www.w3.org/1999/xhtml&#34;', '')"/>
<s:task b:action="settext" b:target="id('Pref_25L_hidden_tutorials')" b:value="{$lPrefHiddenTutorialsXml}"/>
<s:task b:action="trigger" b:event="Save" b:target="id('Pref_25L_hidden_tutorials')"/>
</s:if>
</s:event>
</s:behavior>
</div>
<div style="display:none;">
<s:stylesheet b:name="XslS25RsrvWizCards">
<s:template b:match="/">
<s:apply-templates b:select="card"/>
</s:template>
<s:template b:match="card">
<s:if b:test="count(.//editor) &gt; 0">
<div b:behavior="S25RsrvWizCard">
<s:attribute b:name="c:pos" b:select="position()"/>
<s:attribute b:name="c:id" b:select="@name"/>
<s:if b:test="@modal = 'true'">
<s:attribute b:name="c:modal" b:select="'true'"/>
</s:if>
<s:if b:test="not(string-length(text)=0)">
<div><s:value-of b:select="text"/></div>
</s:if>
<s:apply-templates b:select="editor"/>
</div>
</s:if>
</s:template>
<s:template b:match="editor">
<s:variable b:name="lName" b:scope="local" b:select="@name"/>
<div class="s25rsrvwiz-editor-placeholder" c:editor="true" b:behavior="S25RsrvWizEditorPlaceholder">
<s:attribute b:name="c:id" b:select="@name"/>
<s:attribute b:name="c:control" b:select="ancestor::wizard[1]/editors/editor[@name = $lName]/@control"/>
<s:attribute b:name="c:name" b:select="@name"/>
<s:choose>
<s:when b:test="string-length(@title) = 0">
<s:attribute b:name="c:title" b:select="@name"/>
</s:when>
<s:otherwise>
<s:attribute b:name="c:title" b:select="@title"/>
</s:otherwise>
</s:choose>
<s:choose>
<s:when b:test="string-length(@crumb_title) = 0">
<s:attribute b:name="c:crumb_title" b:select="@title"/>
</s:when>
<s:otherwise>
<s:attribute b:name="c:crumb_title" b:select="@crumb_title"/>
</s:otherwise>
</s:choose>
<s:attribute b:name="c:crumb_xpath" b:select="$tCrumbXpaths//crumb_xpath[@name=$lName]/@xpath"/>
<s:if b:test="string($lName)='requirement'">
<s:attribute b:name="c:requirement_type" b:select="@requirement_type"/>		
</s:if>
<s:if b:test="@required = 'true'">
<s:attribute b:name="c:required" b:select="'true'"/>
</s:if>
<s:if b:test="@no_edit = 'true'">
<s:attribute b:name="c:no_edit" b:select="'true'"/>
</s:if>
<s:if b:test="@message = 'true'">
<s:attribute b:name="c:message" b:select="'true'"/>
</s:if>		
<s:choose>
<s:when b:test="preceding-sibling::info">
<s:attribute b:name="c:position" b:select="position() - 1"/>
</s:when>
<s:otherwise>
<s:attribute b:name="c:position" b:select="position()"/>
</s:otherwise>
</s:choose>
<img src="https://25live-b.collegenet.com/hybridssl/v21.0/gfx/loading_anim.gif"/> <span><s:execute><s:render><s:textnode b:label="{concat('Loading', ' ', ancestor::div[@c:editor]/@c:crumb_title, ' ...')}"/></s:render></s:execute></span>
</div>
</s:template>
</s:stylesheet>
<s:stylesheet b:name="XslS25RsrvWizCrumbs">
<s:template b:match="/">
<div style="display:none;" class="RsrvWiz_CrumbsContainer">
<s:attribute b:name="c:thread" b:select="@name"/>
<div class="RsrvWiz_CrumbsHeader">Edit Event Details...</div>
<s:apply-templates b:select="card[not(@modal='true')]"/>
</div>
</s:template>
<s:template b:match="card">
<s:variable b:name="lName" b:scope="local" b:select="@name"/>
<s25:rsrv_wiz_crumb>
<s:attribute b:name="b:disabled" b:select="'true'"/>
<s:attribute b:name="c:id" b:select="@name"/>
<s:attribute b:name="c:pos" b:select="position()"/>
<s:attribute b:name="c:depends_save" b:select="@depends_save"/>
</s25:rsrv_wiz_crumb>
</s:template>
</s:stylesheet>
<s:stylesheet b:name="XslS25RsrvWizCrumbLabels">
<s:template b:match="/">
<div class="s25rsrvwiz-crumb-label-container">
<s:apply-templates b:select="editor"/>
<div class="s25rsrvwiz-crumb-floor"/>
</div>
</s:template>
<s:template b:match="editor">
<s:variable b:name="lName" b:select="string(@name)"/>
<div b:behavior="S25RsrvWizCrumbLabel">
<s:attribute b:name="c:name" b:select="@name"/>
<s:choose>
<s:when b:test="string-length(@title) = 0">
<s:attribute b:name="c:title" b:select="@name"/>
</s:when>
<s:otherwise>
<s:attribute b:name="c:title" b:select="@title"/>
</s:otherwise>
</s:choose>
<s:choose>
<s:when b:test="string-length(@crumb_title) = 0">
<s:attribute b:name="c:crumb_title" b:select="@title"/>
</s:when>
<s:otherwise>
<s:attribute b:name="c:crumb_title" b:select="@crumb_title"/>
</s:otherwise>
</s:choose>
<s:attribute b:name="c:required" b:select="@required"/>
<s:attribute b:name="c:xpath" b:select="$tCrumbXpaths//crumb_xpath[@name=$lName]/@xpath"/>
<div c:id="flag" class="s25rsrvwiz-crumb-flag">
<s:if b:test="@required='true'">
<s:attribute b:name="class" b:select="'s25rsrvwiz-crumb-flag-required'"/>
</s:if>
</div>
<span c:id="label">
<s:choose>
<s:when b:test="@crumb_title and string-length(@crumb_title) gt 0">
<s:value-of b:select="@crumb_title"/>
</s:when>
<s:otherwise>
<s:value-of b:select="@title"/>
</s:otherwise>
</s:choose>
</span>
</div>
</s:template>
</s:stylesheet>
</div>
<div style="display:none;">
<s:behavior b:name="CheckAvailability">
<s:event b:on="construct">
<s:variable b:name="tEvWiz" b:scope="tag" b:select="ancestor::s25:rsrv_wiz[1]"/>
<s:variable b:name="tCreatePendingRsrvs" b:scope="tag" b:select="'T'"/>
<s:if b:test="$tEvWiz/@c:mode = 'edit'">
<s:task b:action="assign" b:target="$tCreatePendingRsrvs" b:scope="tag" b:select="'F'"/>
<s:task b:action="hide" b:target="div[@c:id = 'checking']"/>
<s:task b:action="show" b:target="div[@c:id = 'no_conflicts']"/>
</s:if>
<s:variable b:name="tDateTimeEditor" b:scope="tag" b:select=""/>
<s:variable b:name="tSpaceEditor" b:scope="tag" b:select=""/>
<s:variable b:name="tResourceEditor" b:scope="tag" b:select=""/>
<s:variable b:name="tStartDate" b:scope="tag" b:select="''"/>
<s:variable b:name="tStartHour" b:scope="tag" b:select="''"/>
<s:variable b:name="tStartTime" b:scope="tag" b:select="''"/>
<s:variable b:name="tEndDate" b:scope="tag" b:select="''"/>
<s:variable b:name="tEndTime" b:scope="tag" b:select="''"/>
<s:variable b:name="tEventStartDate" b:scope="tag" b:select="''"/>
<s:variable b:name="tEventStartTime" b:scope="tag" b:select="''"/>
<s:variable b:name="tEventEndDate" b:scope="tag" b:select="''"/>
<s:variable b:name="tEventEndTime" b:scope="tag" b:select="''"/>
<s:variable b:name="tAvailabilityDates" b:scope="tag" b:select=""/>
<s:variable b:name="tPendingRsrvDates" b:scope="tag" b:select=""/>
<s:super/>
</s:event>
<s:event b:on="UpdateAvailabilityVars">
<s:task b:action="assign" b:target="$tDateTimeEditor" b:scope="tag" b:select="$tEvWiz//s25:rsrv_wiz_datetime"/>
<s:task b:action="assign" b:target="$tSpaceEditor" b:scope="tag" b:select="$tEvWiz//s25:rsrv_wiz_space"/>
<s:task b:action="assign" b:target="$tResourceEditor" b:scope="tag" b:select="$tEvWiz//s25:rsrv_wiz_resource"/>
<s:variable b:name="lUseDatetimeEditor" b:select="'F'"/>
<s:if b:test="exists($tDateTimeEditor)">
<s:if b:test="$tDateTimeEditor/$tNoEdit = 'F'">
<s:task b:action="assign" b:target="$lUseDatetimeEditor" b:select="'T'"/>
</s:if>
</s:if>
<s:choose>
<s:when b:test="$lUseDatetimeEditor = 'T'">
<s:task b:action="assign" b:target="$tStartDate" b:scope="tag" b:select="string($tDateTimeEditor/$tReservationStartDate)"/>
<s:task b:action="assign" b:target="$tStartTime" b:scope="tag" b:select="string($tDateTimeEditor/$tReservationStartTime)"/>
<s:task b:action="assign" b:target="$tEndDate" b:scope="tag" b:select="string($tDateTimeEditor/$tReservationEndDate)"/>
<s:task b:action="assign" b:target="$tEndTime" b:scope="tag" b:select="string($tDateTimeEditor/$tReservationEndTime)"/>
<s:task b:action="assign" b:target="$tEventStartDate" b:scope="tag" b:select="string($tDateTimeEditor/$tEventStartDate)"/>
<s:task b:action="assign" b:target="$tEventStartTime" b:scope="tag" b:select="string($tDateTimeEditor/$tEventStartTime)"/>
<s:task b:action="assign" b:target="$tEventEndDate" b:scope="tag" b:select="string($tDateTimeEditor/$tEventEndDate)"/>
<s:task b:action="assign" b:target="$tEventEndTime" b:scope="tag" b:select="string($tDateTimeEditor/$tEventEndTime)"/>
</s:when>
<s:when b:test="not(string-length($tEvWiz/@c:start_dt) = 0)">
<s:task b:action="assign" b:target="$tStartHour" b:scope="tag" b:select="string($tEvWiz/@c:start_hr)"/>
<s:task b:action="assign" b:target="$tStartDate" b:scope="tag" b:select="string($tEvWiz/@c:start_dt)"/>
<s:task b:action="assign" b:target="$tStartTime" b:scope="tag" b:select="string($tEvWiz/@c:start_time)"/>
<s:task b:action="assign" b:target="$tEndDate" b:scope="tag" b:select="string($tEvWiz/@c:end_dt)"/>
<s:task b:action="assign" b:target="$tEndTime" b:scope="tag" b:select="string($tEvWiz/@c:end_time)"/>
<s:script><![CDATA[

var formattedStartDt, formattedStartTm, formattedEndDt, formattedEndTm;
var rawStartDt = _vars['tStartDate'][0];
formattedStartDt = s25_format_date(rawStartDt, 'yyyyMMdd');
bpc.setVariable('tStartDate', [formattedStartDt], 'tag', _current);
var rawStartTm = _vars['tStartTime'][0];
if (rawStartTm != '') {
formattedStartTm = rawStartTm;
} else {
var rawStartHr = _vars['tStartHour'][0];
if (rawStartHr == '') rawStartHr = (new Date()).getHours();
formattedStartTm = rawStartHr * 100;
}
bpc.setVariable('tStartTime', [formattedStartTm], 'tag', _current);
var rawEndDt = _vars['tEndDate'][0];
if (rawEndDt == '') rawEndDt = rawStartDt;
formattedEndDt = s25_format_date(rawEndDt, 'yyyyMMdd');
bpc.setVariable('tEndDate', [formattedEndDt], 'tag', _current);
var rawEndTm = _vars['tEndTime'][0];
if (rawEndTm != '') {
formattedEndTm = rawEndTm;
} else {
var oEndDt = new Date(parseInt(rawEndDt));
oEndDt.setHours((formattedStartTm / 100) + 1);
formattedEndTm = (oEndDt.getHours()) * 100;
bpc.setVariable('tEndTime', [formattedEndTm], 'tag', _current);
}
bpc.task(["b:action", "msg", "b:value",
"UpdateAvailabilityVars (@c:start_dt): " + 
"formattedStartDt = " + formattedStartDt + "; " + 
"formattedStartTm = " + formattedStartTm + "; " + 
"formattedEndDt = " + formattedEndDt + "; " + 
"formattedEndTm = " + formattedEndTm + 
""], _current);

]]></s:script>
<s:task b:action="assign" b:target="$tEventStartDate" b:scope="tag" b:select="string($tStartDate)"/>
<s:task b:action="assign" b:target="$tEventStartTime" b:scope="tag" b:select="string($tStartTime)"/>
<s:task b:action="assign" b:target="$tEventEndDate" b:scope="tag" b:select="string($tEndDate)"/>
<s:task b:action="assign" b:target="$tEventEndTime" b:scope="tag" b:select="string($tEndTime)"/>
</s:when>
<s:when b:test="not(string-length($tEvWiz/$tProfile/r25:reservation/r25:reservation_start_dt) = 0)">
<s:task b:action="assign" b:target="$tStartDate" b:scope="tag" b:select="string($tEvWiz/$tProfile/r25:reservation/r25:reservation_start_dt)"/>
<s:task b:action="assign" b:target="$tStartTime" b:scope="tag" b:select="''"/>
<s:task b:action="assign" b:target="$tEndDate" b:scope="tag" b:select="string($tEvWiz/$tProfile/r25:reservation/r25:reservation_end_dt)"/>
<s:task b:action="assign" b:target="$tEndTime" b:scope="tag" b:select="''"/>
<s:script><![CDATA[

var rawStartDt = _vars['tStartDate'][0];
var formattedStartDt = s25_format_date(rawStartDt, 'yyyyMMdd');
bpc.setVariable('tStartDate', [formattedStartDt], 'tag', _current);
var formattedStartHr = s25_format_date(rawStartDt, 'h24mm');
bpc.setVariable('tStartTime', [formattedStartHr], 'tag', _current);
var rawEndDt = _vars['tEndDate'][0];
var formattedEndDt = s25_format_date(rawEndDt, 'yyyyMMdd');
bpc.setVariable('tEndDate', [formattedEndDt], 'tag', _current);
var formattedEndHr = s25_format_date(rawEndDt, 'h24mm');
bpc.setVariable('tEndTime', [formattedEndHr], 'tag', _current);
bpc.task(["b:action", "msg", "b:value",
"UpdateAvailabilityVars (r25:reservation_start_dt): " + 
"formattedStartDt = " + formattedStartDt + "; " + 
"formattedStartHr = " + formattedStartHr + "; " + 
"formattedEndDt = " + formattedEndDt + "; " + 
"formattedEndHr = " + formattedEndHr + 
""], _current);

]]></s:script>
<s:task b:action="assign" b:target="$tEventStartDate" b:scope="tag" b:select="string($tEvWiz/$tProfile/r25:reservation/r25:event_start_dt)"/>
<s:task b:action="assign" b:target="$tEventStartTime" b:scope="tag" b:select="''"/>
<s:task b:action="assign" b:target="$tEventEndDate" b:scope="tag" b:select="string($tEvWiz/$tProfile/r25:reservation/r25:event_end_dt)"/>
<s:task b:action="assign" b:target="$tEventEndTime" b:scope="tag" b:select="''"/>
<s:script><![CDATA[

var rawEventStartDt = _vars['tEventStartDate'][0];
var formattedEventStartDt = s25_format_date(rawEventStartDt, 'yyyyMMdd');
bpc.setVariable('tEventStartDate', [formattedEventStartDt], 'tag', _current);
var formattedEventStartHr = s25_format_date(rawEventStartDt, 'h24mm');
bpc.setVariable('tEventStartTime', [formattedEventStartHr], 'tag', _current);
var rawEventEndDt = _vars['tEventEndDate'][0];
var formattedEventEndDt = s25_format_date(rawEventEndDt, 'yyyyMMdd');
bpc.setVariable('tEventEndDate', [formattedEventEndDt], 'tag', _current);
var formattedEventEndHr = s25_format_date(rawEventEndDt, 'h24mm');
bpc.setVariable('tEventEndTime', [formattedEventEndHr], 'tag', _current);
bpc.task(["b:action", "msg", "b:value",
"UpdateAvailabilityVars (r25:event_start_dt): " + 
"formattedEventStartDt = " + formattedEventStartDt + "; " + 
"formattedEventStartHr = " + formattedEventStartHr + "; " + 
"formattedEventEndDt = " + formattedEventEndDt + "; " + 
"formattedEventEndHr = " + formattedEventEndHr + 
""], _current);

]]></s:script>
</s:when>
<s:otherwise/>
</s:choose>
<s:choose>
<s:when b:test="$tEvWiz/$tDateTimeEditor = 'T'">
<s:choose>
<s:when b:test="$tEvWiz//s25:rsrv_wiz_datetime/@c:status = 'pending'">
<s:task b:action="assign" b:target="$tEvWiz/$tHasDates" b:select="'F'"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$tEvWiz/$tHasDates" b:select="'T'"/>
</s:otherwise>
</s:choose>
</s:when>
<s:when b:test="not(string-length($tEvWiz/@c:start_dt) = 0) or  count($tEvWiz/$tInbox/occurrences/occurrence) gt 0 or  not(string-length($tEvWiz/$tProfile/r25:reservation/r25:reservation_start_dt) = 0)">
<s:task b:action="assign" b:target="$tEvWiz/$tHasDates" b:select="'T'"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$tEvWiz/$tHasDates" b:select="'F'"/>
</s:otherwise>
</s:choose>
<s:choose>
<s:when b:test="count($tEvWiz/$tInbox/reserve/obj[@obj_type='space']) gt 0 or not(string-length($tEvWiz/$tProfile/r25:reservation/r25:space_reservation/r25:space_id) = 0) or count($tEvWiz//s25:rsrv_wiz_space//div[@c:purpose='Space']) gt 0">
<s:task b:action="assign" b:target="$tEvWiz/$tHasSpaces" b:select="'T'"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$tEvWiz/$tHasSpaces" b:select="'F'"/>
</s:otherwise>
</s:choose>
<s:choose>
<s:when b:test="count($tEvWiz/$tInbox/reserve/obj[@obj_type='resource']) gt 0 or not(string-length($tEvWiz/$tProfile/r25:reservation/r25:resource_reservation/r25:resource_id) = 0) or count($tEvWiz//s25:rsrv_wiz_resource//div[@c:purpose='Resource']) gt 0">
<s:task b:action="assign" b:target="$tEvWiz/$tHasResources" b:select="'T'"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$tEvWiz/$tHasResources" b:select="'F'"/>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="UpdateValidity">
<s:choose>
<s:when b:test="count(div[@c:id = 'space_conflicts']/div[@c:space_id]) gt 0">
<s:with b:target="$tEvWiz//*[@c:editor = 'true'][@c:id = 'space']">
<s:setatt c:valid="false"/>
</s:with>
</s:when>
<s:otherwise>
<s:with b:target="$tEvWiz//*[@c:editor = 'true'][@c:id = 'space']">
<s:setatt c:valid="true"/>
</s:with>
</s:otherwise>
</s:choose>
<s:variable b:name="lLocationCrumb" b:scope="local" b:select="$tEvWiz/$tCrumbContainer//s25:rsrv_wiz_crumb[.//div[@c:name='space']]"/>
<s:task b:action="trigger" b:event="Validate" b:target="$lLocationCrumb"/>
<s:choose>
<s:when b:test="count(div[@c:id = 'resource_conflicts']/div[@c:resource_id]) gt 0">
<s:with b:target="$tEvWiz//*[@c:editor = 'true'][@c:id = 'resource']">
<s:setatt c:valid="false"/>
</s:with>
</s:when>
<s:otherwise>
<s:with b:target="$tEvWiz//*[@c:editor = 'true'][@c:id = 'resource']">
<s:setatt c:valid="true"/>
</s:with>
</s:otherwise>
</s:choose>
<s:variable b:name="lResourceCrumb" b:scope="local" b:select="$tEvWiz/$tCrumbContainer//s25:rsrv_wiz_crumb[.//div[@c:name='resource']]"/>
<s:task b:action="trigger" b:event="Validate" b:target="$lResourceCrumb"/>
</s:event>
<s:event b:on="BuildAvailabilityDates">
<s:variable b:name="lStartDt" b:scope="local" b:select="$tStartDate"/>
<s:variable b:name="lStartTm" b:scope="local" b:select="string($tStartTime)"/>
<s:task b:test="string-length(concat('0',$lStartTm)) = 4" b:action="assign" b:target="$lStartTm" b:scope="local" b:select="concat('0',$lStartTm)"/>
<s:variable b:name="lEndDt" b:scope="local" b:select="$tEndDate"/>
<s:variable b:name="lEndTm" b:scope="local" b:select="$tEndTime"/>
<s:task b:test="string-length(concat('0',$lEndTm)) = 4" b:action="assign" b:target="$lEndTm" b:scope="local" b:select="concat('0',$lEndTm)"/>
<s:variable b:name="lHasRepeats" b:scope="local" b:select="string($tEvWiz/$tHasRepeats)"/>
<s:variable b:name="lAdHocDateValues" b:scope="local" b:select="''"/>
<s:choose>
<s:when b:test="exists($tDateTimeEditor) and exists($tDateTimeEditor//s25:rsrv_wiz_repeats)">
<s:task b:test="$lHasRepeats = 'T'" b:action="assign" b:target="$lAdHocDateValues" b:scope="local" b:select="$tDateTimeEditor//s25:rsrv_wiz_repeats[1]/$tOccurrenceList/tr[@c:purpose = 'occurrence'][@c:state = '1']/@c:sortvalue"/>
</s:when>
<s:when b:test="count($tEvWiz/$tInbox/occurrences/occurrence) gt 1">
<s:task b:action="assign" b:target="$lAdHocDateValues" b:scope="local" b:select="$tEvWiz/$tInbox/occurrences/occurrence/@event_start_dt"/>
</s:when>
<s:when b:test="count($tEvWiz/$tProfile/r25:reservation) gt 1">
<s:task b:action="assign" b:target="$lAdHocDateValues" b:scope="local" b:select="$tEvWiz/$tProfile/r25:reservation[r25:reservation_state = '1']/r25:reservation_start_dt/text()"/>
</s:when>
</s:choose>
<s:script><![CDATA[

var sAdHocDateValues = _vars['lAdHocDateValues'];
var sStartDate = String(_vars['lStartDt']);
var sStartTime = String(_vars['lStartTm']);
var sEndDate = String(_vars['lEndDt']);
var sEndTime = String(_vars['lEndTm']);
var sRepeats = String(_vars['lHasRepeats']);
var sXmlInitStart = sStartDate + 'T' + sStartTime + '00';
var sXmlInitEnd = sEndDate + 'T' + sEndTime + '00';
bpc.task(["b:action", "msg", "b:value",
"BuildAvailabilityDates (2): " + 
"sXmlInitStart = " + sXmlInitStart + "; " + 
"sXmlInitEnd = " + sXmlInitEnd + 
""], _current);
var sXml = '<r25:dates><r25:start_dt>';
sXml += String(sXmlInitStart);
sXml += '</r25:start_dt>';
sXml += '<r25:end_dt>';
sXml += String(sXmlInitEnd);
sXml += '</r25:end_dt></r25:dates>';
if (sRepeats == 'T') 
{
var sXmlRepeatStart, sXmlRepeatEnd;
var oStartDate = new Date(sStartDate.substr(0,4) + '/' + sStartDate.substr(4,2) + '/' + sStartDate.substr(6,2) + ' ' + sStartTime.substr(0,2) + ':' + sStartTime.substr(2,2));
var oEndDate = new Date(sEndDate.substr(0,4) + '/' + sEndDate.substr(4,2) + '/' + sEndDate.substr(6,2) + ' ' + sEndTime.substr(0,2) + ':' + sEndTime.substr(2,2));
for ( var i = 1; i < sAdHocDateValues.length; i++ ) 
{
var dt = sAdHocDateValues[i];
var repeatDt = ( typeof dt == 'object' ) ? dt.nodeValue : dt;
if (repeatDt.indexOf('T') != -1) 
{
repeatDt = repeatDt.substring(0, repeatDt.indexOf('T'));
repeatDt = repeatDt.replace(/\-/g, '');
}
var oRepeatDt = new Date(repeatDt.substr(0,4) + '/' + repeatDt.substr(4,2) + '/' + repeatDt.substr(6,2) + ' ' + sStartTime.substr(0,2) + ':' + sStartTime.substr(2,2));
var startDiff = dateDiff(oStartDate, oRepeatDt);
var oRepeatStart = new Date(oStartDate.getTime());
var oRepeatEnd = new Date(oEndDate.getTime());
oRepeatStart.setDate( oRepeatStart.getDate() + startDiff);
oRepeatEnd.setDate( oRepeatEnd.getDate() + startDiff);
sXmlRepeatStart = s25_format_date(oRepeatStart, 'yyyyMMddThh24mm00');
sXmlRepeatEnd = s25_format_date(oRepeatEnd, 'yyyyMMddThh24mm00');
bpc.task(["b:action", "msg", "b:value",
"BuildAvailabilityDates (ad hoc: " + i + "): " + 
"repeatDt = " + repeatDt + "; " + 
"sXmlRepeatStart = " + sXmlRepeatStart + "; " + 
"sXmlRepeatEnd = " + sXmlRepeatEnd + 
""], _current);
sXml += '<r25:dates><r25:start_dt>';
sXml += String(sXmlRepeatStart);
sXml += '</r25:start_dt>';
sXml += '<r25:end_dt>';
sXml += String(sXmlRepeatEnd);
sXml += '</r25:end_dt></r25:dates>';
}
}
bpc.setVariable('tAvailabilityDates',[sXml],'tag');

]]></s:script>
</s:event>
<s:event b:on="BuildPendingRsrvDates">
<s:variable b:name="lStartDt" b:scope="local" b:select="$tStartDate"/>
<s:variable b:name="lStartTm" b:scope="local" b:select="string($tStartTime)"/>
<s:task b:test="string-length(concat('0',$lStartTm)) = 4" b:action="assign" b:target="$lStartTm" b:scope="local" b:select="concat('0',$lStartTm)"/>
<s:variable b:name="lHasRepeats" b:scope="local" b:select="string($tEvWiz/$tHasRepeats)"/>
<s:variable b:name="lAdHocDateValues" b:scope="local" b:select="''"/>
<s:choose>
<s:when b:test="exists($tDateTimeEditor) and exists($tDateTimeEditor//s25:rsrv_wiz_repeats)">
<s:task b:test="$lHasRepeats = 'T'" b:action="assign" b:target="$lAdHocDateValues" b:scope="local" b:select="$tDateTimeEditor//s25:rsrv_wiz_repeats[1]/$tOccurrenceList/tr[@c:purpose = 'occurrence'][@c:state = '1']/@c:sortvalue"/>
</s:when>
<s:when b:test="count($tEvWiz/$tInbox/occurrences/occurrence) gt 1">
<s:task b:action="assign" b:target="$lAdHocDateValues" b:scope="local" b:select="$tEvWiz/$tInbox/occurrences/occurrence/@event_start_dt"/>
</s:when>
<s:when b:test="count($tEvWiz/$tProfile/r25:reservation) gt 1">
<s:task b:action="assign" b:target="$lAdHocDateValues" b:scope="local" b:select="$tEvWiz/$tProfile/r25:reservation[r25:reservation_state = '1']/r25:reservation_start_dt/text()"/>
</s:when>
</s:choose>
<s:script><![CDATA[

var sAdHocDateValues = _vars['lAdHocDateValues'];
var sStartDate = String(_vars['lStartDt']);
var sStartTime = String(_vars['lStartTm']);
var sRepeats = String(_vars['lHasRepeats']);
bpc.task(["b:action", "msg", "b:value",
"BuildPendingRsrvDates: " + 
"sStartDate = " + sStartDate + "; " + 
"sStartTime = " + sStartTime + "; " + 
"sRepeats = " + sRepeats + "; " + 
""], _current);
var sXml = '<r25:date_collection xmlns:xl="http://www.w3.org/1999/xlink" xmlns:r25="http://www.collegenet.com/r25">';
sXml += '<r25:date_list>';
sXml += '<r25:start_date>';
sXml += String(sStartDate);
sXml += '</r25:start_date>';
sXml += '</r25:date_list>';
if (sRepeats == 'T') 
{
for ( var i = 1; i < sAdHocDateValues.length; i++ ) 
{
var dt = sAdHocDateValues[i];
var adhocDt = ( typeof dt == 'object' ) ? dt.nodeValue : dt;
if (adhocDt.indexOf('T') != -1) 
{
adhocDt = adhocDt.substring(0, adhocDt.indexOf('T'));
adhocDt = adhocDt.replace(/\-/g, '');
}
bpc.task(["b:action", "msg", "b:value",
"BuildPendingRsrvDates (ad hoc: " + i + "): " + 
"adhocDt = " + adhocDt + "; " + 
""], _current);
sXml += '<r25:date_list>';
sXml += '<r25:start_date>';
sXml += String(adhocDt);
sXml += '</r25:start_date>';
sXml += '</r25:date_list>';
}
}
sXml += '</r25:date_collection>';
bpc.setVariable('tPendingRsrvDates',[sXml],'tag');

]]></s:script>
</s:event>
<s:event b:on="CheckExistingEventReservations">
<s:task b:action="trigger" b:event="UpdateAvailabilityVars"/>
<s:task b:action="assign" b:target="$tCreatePendingRsrvs" b:scope="tag" b:select="'T'"/>
<s:if b:test="not(exists($tSpaceEditor))">
<s:variable b:name="lSpaceID" b:select=""/>
<s:variable b:name="lSpaceName" b:select=""/>
<s:for-each b:target="distinct-values($tEvWiz/$tProfile/r25:reservation/r25:space_reservation[not(string-length(r25:space_id) = 0)]/r25:space_id)">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lSpaceID" b:select="string($_target)"/>
<s:task b:action="assign" b:target="$lSpaceName" b:select="string($_target/../r25:space/r25:space_name)"/>
<s:task b:action="trigger" b:event="CreatePendingSpaceRsrv"/>
</s:lock></s:sequential>
</s:for-each>
<s:variable b:name="lSpacePreset" b:scope="local" b:select="$tEvWiz/$tInbox/reserve/obj[@obj_type='space' and not(@obj_id='')][1]"/>
<s:if b:test="exists($lSpacePreset)">
<s:task b:action="assign" b:target="$lSpaceID" b:select="string($lSpacePreset/@obj_id)"/>
<s:task b:action="assign" b:target="$lSpaceName" b:select="string($lSpacePreset/@obj_name)"/>
<s:task b:action="trigger" b:event="CreatePendingSpaceRsrv"/>
</s:if>
</s:if>
<s:if b:test="not(exists($tResourceEditor))">
<s:variable b:name="lResourceID" b:select=""/>
<s:variable b:name="lResourceName" b:select=""/>
<s:for-each b:target="distinct-values($tEvWiz/$tProfile/r25:reservation/r25:resource_reservation[not(string-length(r25:resource_id) = 0)]/r25:resource_id)">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lResourceID" b:select="string($_target)"/>
<s:task b:action="assign" b:target="$lResourceName" b:select="string($_target/../r25:resource/r25:resource_name)"/>
<s:task b:action="trigger" b:event="CreatePendingResourceRsrv"/>
</s:lock></s:sequential>
</s:for-each>
<s:variable b:name="lResourcePreset" b:scope="local" b:select="$tEvWiz/$tInbox/reserve/obj[@obj_type='resource' and not(@obj_id='')][1]"/>
<s:if b:test="exists($lResourcePreset)">
<s:task b:action="assign" b:target="$lResourceID" b:select="string($lResourcePreset/@obj_id)"/>
<s:task b:action="assign" b:target="$lResourceName" b:select="string($lResourcePreset/@obj_name)"/>
<s:task b:action="trigger" b:event="CreatePendingResourceRsrv"/>
</s:if>
</s:if>
<s:task b:action="trigger" b:event="UpdateValidity"/>
</s:event>
<s:event b:on="DateChangePending">
<s:task b:action="trigger" b:event="UpdateAvailabilityVars"/>
<s:if b:test="$tEvWiz/$tHasSpaces = 'T' or $tEvWiz/$tHasResources = 'T'">
<s:task b:action="hide" b:target="div"/>
<s:task b:action="show" b:target="div[@c:id = 'pending']"/>
</s:if>

<s:task b:action="assign" b:target="$tEvWiz/$tHasDates" b:select="'F'"/>
</s:event>
<s:event b:on="PrepAvailabilityCheck">
<s:task b:action="trigger" b:event="UpdateAvailabilityVars"/>
<s:if b:test="$tEvWiz/$tHasSpaces = 'T' or $tEvWiz/$tHasResources = 'T'">
<s:if b:test="exists($tSpaceEditor)">
<s:with b:target="$tSpaceEditor/$tContentOptions/div[@c:id='txt']/div[@c:purpose='Space']">
<s:setatt c:valid="U"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
</s:if>
<s:if b:test="exists($tResourceEditor)">
<s:with b:target="$tResourceEditor/$tContentOptions/div[@c:id='txt']/div[@c:purpose='Resource']">
<s:setatt c:valid="U"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
</s:if>
<s:task b:action="hide" b:target="div"/>
<s:task b:action="show" b:target="div[@c:id = 'pending']"/>
</s:if>
</s:event>
<s:event b:on="InitiateAvailabilityCheck">
<s:task b:action="trigger" b:event="Save" b:target="$tSpaceEditor"/>
<s:task b:action="trigger" b:event="Save" b:target="$tResourceEditor"/>
<s:task b:action="trigger" b:event="UpdateAvailabilityVars"/>
<s:task b:action="assign" b:target="$tEvWiz/$tRaisedEvent" b:scope="tag" b:select="'DateChange'"/>
<s:task b:action="trigger" b:event="ObserveRsrvWizard" b:target="$tSpaceEditor"/>
<s:task b:action="trigger" b:event="ObserveRsrvWizard" b:target="$tResourceEditor"/>
<s:task b:action="trigger" b:event="CheckExistingEventReservations"/>
</s:event>
<s:event b:on="FinalAvailabilityCheck">
<s:task b:action="trigger" b:event="UpdateAvailabilityVars"/>
<s:task b:action="assign" b:target="$tEvWiz/$tRaisedEvent" b:scope="tag" b:select="'FinalCheck'"/>
<s:task b:action="trigger" b:event="ObserveRsrvWizard" b:target="$tSpaceEditor"/>
<s:task b:action="trigger" b:event="ObserveRsrvWizard" b:target="$tResourceEditor"/>
<s:task b:action="trigger" b:event="CheckExistingEventReservations"/>
</s:event>
<s:event b:on="CreatePendingSpaceRsrv">
<s:task b:action="trigger" b:event="DeletePendingSpaceRsrv"/>
<s:task b:action="trigger" b:event="UpdateAvailabilityVars" b:target="."/>
<s:variable b:name="lSpaceObject" b:select=""/>
<s:if b:test="exists($tSpaceEditor)">
<s:task b:action="assign" b:target="$lSpaceObject" b:select="$tSpaceEditor/$tContentOptions/div[@c:id='txt']//div[@c:purpose='Space' and @c:space_id = $lSpaceID]"/>
</s:if>
<s:choose>
<s:when b:test="$tEvWiz/$tHasDates = 'T' and $tCreatePendingRsrvs = 'T'">
<s:task b:action="hide" b:target="div[@c:id = 'no_conflicts']"/>
<s:task b:action="hide" b:target="div[@c:id = 'no_dates']"/>
<s:task b:action="hide" b:target="div[@c:id = 'pending']"/>
<s:task b:action="show" b:target="div[@c:id = 'checking']"/>
<s:with b:target="$lSpaceObject">
<s:setatt c:valid="C"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
<s:variable b:name="lPendXml" b:scope="local">
<r25:space_pend_rsrvs>
<r25:space_pend_rsrv status="new">
<r25:rsrv_start_dt/>
<r25:rsrv_end_dt/>
<r25:event_id/>
<r25:profile_id/>
<r25:space_id/>
<r25:share>F</r25:share>
</r25:space_pend_rsrv>
</r25:space_pend_rsrvs>
</s:variable>
<s:task b:action="string2xml" b:variable="$lPendXml"/>
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:space_id" b:value="{$lSpaceID}"/>
<s:variable b:name="lEventID" b:scope="local" b:select="$tEvWiz/$tEvent/r25:event_id"/>
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:event_id" b:value="{$lEventID}"/>
<s:variable b:name="lProfileID" b:scope="local" b:select="$tEvWiz/$tProfile/r25:profile_id"/>
<s:if b:test="string-length($lProfileID) = 0">
<s:task b:action="assign" b:target="$lProfileID" b:scope="local" b:select="'-1'"/>
</s:if>
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:profile_id" b:value="{$lProfileID}"/>
<s:variable b:name="lStartDate" b:scope="local" b:select="$tStartDate"/>
<s:variable b:name="lStartTime" b:scope="local" b:select="$tStartTime"/>
<s:variable b:name="lEndDate" b:scope="local" b:select="$tEndDate"/>
<s:variable b:name="lEndTime" b:scope="local" b:select="$tEndTime"/>
<s:if b:test="string-length($lStartDate) = 0">
<s:with b:target="$lSpaceObject">
<s:setatt c:valid="U"/>
</s:with>
</s:if>
<s:if b:test="not(string-length($lStartDate) = 0)">
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:rsrv_start_dt" b:value="{concat($lStartDate,'T',$lStartTime)}"/>
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:rsrv_end_dt" b:value="{concat($lEndDate,'T',$lEndTime)}"/>
<s:if b:test="$tEvWiz/$tHasRepeats = 'T'">
<s:task b:action="trigger" b:event="BuildPendingRsrvDates" b:target="."/>
<s:variable b:name="lDatelistXml" b:select="string($tPendingRsrvDates)"/>
<s:task b:action="string2xml" b:variable="$lDatelistXml"/>
<s:variable b:name="lIterationDate" b:select=""/>
<s:choose>
<s:when b:test="exists($tSpaceEditor)">
<s:for-each b:target="$lSpaceObject//b:infobox//table/tbody/tr">
<s:sequential><s:lock>
<s:if b:test="not($_target/td/input[@type='checkbox']/@b:state = 'selected')">
<s:task b:action="assign" b:target="$lIterationDate" b:select="string($_target/@c:sortdate)"/>
<s:for-each b:target="$lDatelistXml/r25:date_collection/r25:date_list">
<s:if b:test="$lIterationDate = $_target/r25:start_date">
<s:task b:action="remove" b:target="$_target"/>
</s:if>
</s:for-each>
</s:if>
</s:lock></s:sequential>
</s:for-each>
</s:when>
<s:otherwise>
<s:variable b:name="lIterationReservation" b:select=""/>
<s:for-each b:target="$lDatelistXml/r25:date_collection/r25:date_list">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lIterationDate" b:select="string($_target/r25:start_date)"/>
<s:task b:action="assign" b:target="$lIterationReservation" b:select="$tEvWiz/$tProfile/r25:reservation[substring-before(replace(r25:reservation_start_dt, '-', ''), 'T') = $lIterationDate]"/>
<s:if b:test="count($lIterationReservation) gt 0 and not($lIterationReservation/r25:space_reservation/r25:space_id = $lSpaceID)">
</s:if>
</s:lock></s:sequential>
</s:for-each>
</s:otherwise>
</s:choose>
<s:if b:test="count($lDatelistXml//r25:start_date) = 0">
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:rsrv_start_dt" b:value=""/>
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:rsrv_end_dt" b:value=""/>
</s:if>
<s:if b:test="count($lDatelistXml//r25:start_date) gt 0">
<s:if b:test="not(string($lDatelistXml//r25:start_date[1]) = $lStartDate)">
<s:variable b:name="lNewStartDate" b:select="string($lDatelistXml//r25:start_date[1])"/>
<s:variable b:name="lNewEndDate" b:select="string($lDatelistXml//r25:start_date[1])"/>
<s:if b:test="not($lStartDate = $lEndDate)">
<s:variable b:name="lStartDateDelimited" b:select="concat(substring($lStartDate,1,4),'-',substring($lStartDate,5,2),'-',substring($lStartDate,7,2))"/>
<s:variable b:name="lEndDateDelimited" b:select="concat(substring($lStartDate,1,4),'-',substring($lStartDate,5,2),'-',substring($lStartDate,7,2))"/>
<s:variable b:name="lNewStartDateDelimited" b:select="concat(substring($lNewStartDate,1,4),'-',substring($lNewStartDate,5,2),'-',substring($lNewStartDate,7,2))"/>
<s:script><![CDATA[

var iDateDiff = dateDiff(_vars['lStartDateDelimited'][0], _vars['lEndDateDelimited'][0]);
var dNewStart = returnDate(_vars['lNewStartDateDelimited'][0]);
var dNewEnd = dNewStart.setDate(dNewStart.getDate() + iDateDiff);
bpc.setVariable('lNewEndDate', [s25_format_date(dNewEnd, 'yyyyMMdd')], _current);

]]></s:script>
</s:if>
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:rsrv_start_dt" b:value="{concat($lNewStartDate,'T',$lStartTime)}"/>
<s:task b:action="settext" b:target="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:rsrv_end_dt" b:value="{concat($lNewEndDate,'T',$lEndTime)}"/>
</s:if>
<s:task b:action="remove" b:target="$lDatelistXml/r25:date_collection/r25:date_list[r25:start_date = substring($lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:rsrv_start_dt, 1, 8)]"/>
<s:task b:action="copy" b:source="$lDatelistXml/r25:date_collection//r25:date_list" b:destination="$lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv" b:mode="aslastchild"/>
</s:if>
</s:if>
<s:task b:action="xml2string" b:variable="$lPendXml"/>
<s:task b:action="string2xml" b:variable="$lPendXml"/>
<s:variable b:name="lPendResult" b:select="'Unknown'"/>
<s:choose>
<s:when b:test="not(string-length($lPendXml/r25:space_pend_rsrvs/r25:space_pend_rsrv/r25:rsrv_start_dt) = 0)">
<s:variable b:name="lData" b:scope="local" b:select="$lPendXml"/>
<s:task b:action="xml2string" b:variable="$lData"/>
<s:task b:test="not(starts-with($lData,'&lt;?'))" b:action="assign" b:target="$lData" b:scope="local" b:select="concat('&lt;?xml version=&#34;1.0&#34;?&gt;',$lData)"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="POST" b:showloading="true" b:url="{concat(id('Config')/$tWsPrefix,'sp_pend_rsrvs.xml')}" b:data="{$lData}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="string2xml" b:variable="$lTxt"/>
<s:variable b:name="lRespHttp" b:select="number(id('HttpMgr')/$tStatus)"/>
<s:variable b:name="lRespXml" b:select=""/>
<s:variable b:name="lRespStr" b:select="id('HttpMgr')/$tResponseText"/>
<s:if b:test="starts-with($lRespStr,'&lt;?')">
<s:script><![CDATA[

var s = String(_vars['lRespStr'][0]);
s = s.replace(/\s*<\?.*?\?>/,'');
s = s.replace(/\s+&\s+/g,' &amp; ');
s = s.replace(/\s+%\s+/g,' &#37; ');
bpc.setVariable('lRespStr',[s],'local');

]]></s:script>
<s:task b:action="string2xml" b:source="$lRespStr" b:variable="$lRespXml"/>
</s:if>
<s:if b:test="number($lRespHttp) = 200 or number($lRespHttp) = 201">
<s:choose>
<s:when b:test="count($lRespXml/r25:results/r25:taken_pend_rsrv_space) gt 0">
<s:with b:target="$lSpaceObject">
<s:setatt c:valid="F"/>
</s:with>
<s:if b:test="$tEvWiz/$tHasRepeats = 'T'">
<s:variable b:name="lThisRow" b:select=""/>
<s:variable b:name="lThisRowCheckbox" b:select=""/>
<s:variable b:name="lThisRowSortDate" b:select=""/>
<s:variable b:name="lThisTakenSpaceDt" b:select=""/>
<s:for-each b:target="$lSpaceObject//b:infobox//table/tbody/tr[not(@c:sortdate='99999999')]">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lThisRow" b:select="$_target"/>
<s:task b:action="assign" b:target="$lThisRowSortDate" b:select="$lThisRow/@c:sortdate"/>
<s:task b:action="assign" b:target="$lThisRowCheckbox" b:select="$lThisRow/td/input[@type='checkbox' and @c:purpose='assign']"/>
<s:task b:action="removeclass" b:value="conflict"/>
<s:setatt c:valid="T"/>
<s:render b:destination="$lThisRow/td[@c:id='conflicts']" b:mode="replacechildren">
<span>none</span>
</s:render>
<s:for-each b:target="$lRespXml/r25:results/r25:taken_pend_rsrv_space/r25:taken_space_pend_rsrv_dt">
<s:task b:action="assign" b:target="$lThisTakenSpaceDt" b:select="replace(substring-before($_target, 'T'), '-', '')"/>
<s:if b:test="$lThisRowCheckbox/@b:state = 'selected' and $lThisRowSortDate = $lThisTakenSpaceDt">
<s:with b:target="$lThisRow">
<s:task b:action="addclass" b:value="conflict"/>
<s:setatt c:valid="F"/>
<s:render b:destination="$lThisRow/td[@c:id='conflicts']" b:mode="replacechildren">
<span><img src="https://25live-b.collegenet.com/hybridssl/v21.0/gfx/loading_anim.gif"/></span>
</s:render>
</s:with>
</s:if>
</s:for-each>
</s:lock></s:sequential>
</s:for-each>
</s:if>
<s:task b:action="assign" b:target="$lPendResult" b:select="'Conflicts'"/>
</s:when>
<s:otherwise>
<s:with b:target="$lSpaceObject">
<s:setatt c:valid="T"/>
</s:with>
<s:if b:test="$tEvWiz/$tHasRepeats = 'T'">
<s:for-each b:target="$lSpaceObject//b:infobox//table/tbody/tr">
<s:with b:target="$_target">
<s:task b:action="removeclass" b:value="conflict"/>
<s:setatt c:valid="T"/>
</s:with>
</s:for-each>
</s:if>
<s:task b:action="assign" b:target="$lPendResult" b:select="'NoConflicts'"/>
</s:otherwise>
</s:choose>
<s:if b:test="count($lRespXml/r25:results/r25:shared_pend_rsrv_space) gt 0">
<s:with b:target="$lSpaceObject/span[@c:purpose='customizations']/div[@c:id='share']/input[@c:purpose='share']">
<s:setatt b:state="selected" checked="checked"/>
<s:task b:action="disable" b:target="."/>
</s:with>
<s:if b:test="$tEvWiz/$tHasRepeats = 'T'">
<s:variable b:name="lShareRow" b:select=""/>
<s:variable b:name="lShareRowCheckbox" b:select=""/>
<s:variable b:name="lShareRowSortDate" b:select=""/>
<s:variable b:name="lShareSpaceDt" b:select=""/>
<s:with b:target="$lSpaceObject//b:infobox/table/tbody//tr/td/input[@type='checkbox' and @c:purpose='share']">
<s:task b:action="enable" b:target="."/>
</s:with>
<s:for-each b:target="$lSpaceObject//b:infobox//table/tbody/tr">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lShareRow" b:select="$_target"/>
<s:task b:action="assign" b:target="$lShareRowSortDate" b:select="$lShareRow/@c:sortdate"/>
<s:task b:action="assign" b:target="$lShareRowCheckbox" b:select="$lShareRow/td/input[@type='checkbox' and @c:purpose='share']"/>
<s:task b:action="removeclass" b:value="conflict"/>
<s:setatt c:valid="T"/>
<s:for-each b:target="$lRespXml/r25:results/r25:shared_pend_rsrv_space/r25:shared_space_pend_rsrv_dt">
<s:task b:action="assign" b:target="$lShareSpaceDt" b:select="substring($_target, 1, 8)"/>
<s:choose>
<s:when b:test="$lShareRowSortDate = $lShareSpaceDt">
<s:with b:target="$lShareRowCheckbox">
<s:setatt b:state="selected" checked="checked"/>
<s:task b:action="disable" b:target="."/>
</s:with>
</s:when>
<s:otherwise>
</s:otherwise>
</s:choose>
</s:for-each>
</s:lock></s:sequential>
</s:for-each>
</s:if>
</s:if>
</s:if>
<s:task b:action="hide" b:target="div[@c:id = 'checking']"/>
<s:task b:action="remove" b:target="div[@c:id = 'space_conflicts']/div[@c:space_id = $lSpaceID]"/>
<s:choose>
<s:when b:test="$lPendResult = 'Unknown'">
<s:with b:target="$lSpaceObject">
<s:setatt c:valid="U"/>
</s:with>
</s:when>
<s:when b:test="$lPendResult = 'NoConflicts'">
<s:if b:test="count(id('PendingSpaceReservations')/space[@event_id = $lEventID and @space_id = $lSpaceID]) = 0">
<s:render b:destination="id('PendingSpaceReservations')" b:mode="aslastchild">
<space event_id="{$lEventID}" space_id="{$lSpaceID}"/>
</s:render>
</s:if>
<s:if b:test="count(div[@c:id = 'space_conflicts']/div[@c:space_id]) = 0">
<s:task b:action="hide" b:target="div[@c:id = 'space_conflicts']"/>
<s:if b:test="count(div[@c:id = 'resource_conflicts']/div[@c:resource_id]) = 0">
<s:task b:action="show" b:target="div[@c:id = 'no_conflicts']"/>
</s:if>
</s:if>
</s:when>
<s:when b:test="$lPendResult = 'Conflicts'">
<s:if b:test="count(id('PendingSpaceReservations')/space[@event_id = $lEventID and @space_id = $lSpaceID]) = 0">
<s:render b:destination="id('PendingSpaceReservations')" b:mode="aslastchild">
<space event_id="{$lEventID}" space_id="{$lSpaceID}"/>
</s:render>
</s:if>
<s:render b:destination="div[@c:id = 'space_conflicts']" b:mode="aslastchild">
<div class="icon-warning" c:space_id="{$lSpaceID}">
<b b:behavior="S25Object" c:obj_type="space" c:obj_id="{$lSpaceID}"><s:textnode b:label="{$lSpaceName}"/></b>
<span style="font-size:90%"><s:textnode b:label="has conflicts on the following date(s): "/></span>
<span/>
</div>
</s:render>
<s:variable b:name="lDateList" b:select="div[@c:id = 'space_conflicts']/div[@c:space_id = $lSpaceID]/span[last()]"/>
<s:for-each b:target="$lRespXml/r25:results/r25:taken_pend_rsrv_space/r25:taken_space_pend_rsrv_dt">
<s:sequential><s:lock>

<s:render b:destination="$lDateList" b:mode="aslastchild">
<div c:sortdate="{replace(substring-before($_target,'T'),'-','')}"><b><s:textnode b:label="{s25_format_date(string($_target), id('Prefs')/$tDatePattern)}"/></b></div>
</s:render>
</s:lock></s:sequential>
</s:for-each>
<s:task b:action="show" b:target="div[@c:id = 'space_conflicts']"/>
</s:when>
</s:choose>
</s:when>
<s:otherwise>
<s:task b:action="hide" b:target="div"/>
<s:task b:action="show" b:target="div[@c:id = 'no_conflicts']"/>
<s:with b:target="$lSpaceObject">
<s:setatt c:valid="U"/>
</s:with>
</s:otherwise>
</s:choose>
</s:if>
<s:with b:target="$lSpaceObject">
<s:task b:action="trigger" b:event="ConflictUpdate"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
</s:when>
<s:when b:test="$tEvWiz/$tHasDates = 'T' and $tCreatePendingRsrvs = 'F'">
<s:with b:target="$lSpaceObject">
<s:task b:action="trigger" b:event="ConflictUpdate"/>
<s:setatt c:valid="T"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
</s:when>
<s:when b:test="$tEvWiz/$tHasDates = 'F'">
<s:with b:target="$lSpaceObject">
<s:setatt c:valid="U"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
</s:when>
</s:choose>
</s:event>
<s:event b:on="DeletePendingSpaceRsrv">
<s:if b:test="$tCreatePendingRsrvs = 'T' and $tEvWiz/$tHasDates">
<s:variable b:name="lEventID" b:scope="local" b:select="$tEvWiz/$tEvent/r25:event_id"/>
<s:if b:test="id('PendingSpaceReservations')/space[@event_id = $lEventID and @space_id = $lSpaceID]">
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:showloading="false" b:method="DELETE" b:url="{concat(id('Config')/$tWsPrefix,'sp_pend_rsrvs.xml', '?event_id=',$lEventID, '&amp;space_id=',$lSpaceID)}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="remove" b:target="id('PendingSpaceReservations')/space[@event_id = $lEventID and @space_id = $lSpaceID]"/>
</s:if>
<s:task b:action="remove" b:target="div[@c:id = 'space_conflicts']/div[@c:space_id = $lSpaceID]"/>
<s:if b:test="count(div[@c:id = 'space_conflicts']/div[@c:space_id]) = 0">
<s:task b:action="hide" b:target="div[@c:id = 'space_conflicts']"/>
<s:if b:test="count(div[@c:id = 'resource_conflicts']/div[@c:resource_id]) = 0">
<s:task b:action="show" b:target="div[@c:id = 'no_conflicts']"/>
</s:if>
</s:if>
</s:if>
</s:event>
<s:event b:on="CreatePendingResourceRsrv">
<s:task b:action="trigger" b:event="DeleteResourceSpaceRsrv"/>
<s:task b:action="trigger" b:event="UpdateAvailabilityVars" b:target="."/>
<s:variable b:name="lResourceObject" b:select=""/>
<s:if b:test="exists($tResourceEditor)">
<s:task b:action="assign" b:target="$lResourceObject" b:select="$tResourceEditor/$tContentOptions/div[@c:id='txt']//div[@c:purpose='Resource' and @c:resource_id = $lResourceID]"/>
</s:if>
<s:choose>
<s:when b:test="$tEvWiz/$tHasDates = 'T' and $tCreatePendingRsrvs = 'T'">
<s:task b:action="hide" b:target="div[@c:id = 'no_conflicts']"/>
<s:task b:action="hide" b:target="div[@c:id = 'no_dates']"/>
<s:task b:action="hide" b:target="div[@c:id = 'pending']"/>
<s:task b:action="show" b:target="div[@c:id = 'checking']"/>
<s:with b:target="$lResourceObject">
<s:setatt c:valid="C"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
<s:variable b:name="lPendXml" b:scope="local">
<r25:resource_pend_rsrvs>
<r25:resource_pend_rsrv status="new">
<r25:rsrv_start_dt/>
<r25:rsrv_end_dt/>
<r25:event_id/>
<r25:profile_id/>
<r25:resource_id/>
<r25:stock_level>1</r25:stock_level>
</r25:resource_pend_rsrv>
</r25:resource_pend_rsrvs>
</s:variable>
<s:task b:action="string2xml" b:variable="$lPendXml"/>
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:resource_id" b:value="{$lResourceID}"/>
<s:variable b:name="lEventID" b:scope="local" b:select="$tEvWiz/$tEvent/r25:event_id"/>
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:event_id" b:value="{$lEventID}"/>
<s:variable b:name="lProfileID" b:scope="local" b:select="$tEvWiz/$tProfile/r25:profile_id"/>
<s:if b:test="string-length($lProfileID) = 0">
<s:task b:action="assign" b:target="$lProfileID" b:scope="local" b:select="-1"/>
</s:if>
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:profile_id" b:value="{$lProfileID}"/>
<s:choose>
<s:when b:test="declared($lResourceQty)">
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:stock_level" b:value="{$lResourceQty}"/>
</s:when>
<s:when b:test="exists($tResourceEditor) and $tEvWiz/$tHasRepeats = 'T'">
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:stock_level" b:value="{$lResourceObject//b:infobox//table/tbody/tr[1]/td/b:spinner/@b:value}"/>
</s:when>
<s:when b:test="exists($tResourceEditor) and not(string-length($lResourceObject/div[@c:id='currentResource']/span/@c:quantity) = 0)">
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:stock_level" b:value="{$lResourceObject/div[@c:id='currentResource']/span/@c:quantity}"/>
</s:when>
<s:when b:test="$tEvWiz/$tProfile//r25:resource_reservation[r25:resource_id = $lResourceID]">
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:stock_level" b:value="{string($tEvWiz/$tProfile//r25:resource_reservation[r25:resource_id = $lResourceID][1]/r25:quantity)}"/>
</s:when>
</s:choose>
<s:task b:action="trigger" b:event="UpdateAvailabilityVars" b:target="."/>
<s:variable b:name="lStartDate" b:scope="local" b:select="$tStartDate"/>
<s:variable b:name="lStartTime" b:scope="local" b:select="$tStartTime"/>
<s:variable b:name="lEndDate" b:scope="local" b:select="$tEndDate"/>
<s:variable b:name="lEndTime" b:scope="local" b:select="$tEndTime"/>
<s:if b:test="string-length($lStartDate) = 0">
<s:with b:target="$lResourceObject">
<s:setatt c:valid="U"/>
</s:with>
</s:if>
<s:if b:test="not(string-length($lStartDate) = 0)">
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:rsrv_start_dt" b:value="{concat($lStartDate,'T',$lStartTime)}"/>
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:rsrv_end_dt" b:value="{concat($lEndDate,'T',$lEndTime)}"/>
<s:if b:test="$tEvWiz/$tHasRepeats = 'T'">
<s:task b:action="trigger" b:event="BuildPendingRsrvDates" b:target="."/>
<s:variable b:name="lDatelistXml" b:select="string($tPendingRsrvDates)"/>
<s:task b:action="assign" b:target="$lDatelistXml" b:select="replace($lDatelistXml, '&lt;/r25:start_date&gt;', '&lt;/r25:start_date&gt;&lt;r25:stock/&gt;')"/>
<s:task b:action="string2xml" b:variable="$lDatelistXml"/>
<s:variable b:name="lIterationDate" b:select=""/>
<s:variable b:name="lIterationState" b:select=""/>
<s:variable b:name="lIterationStock" b:select=""/>
<s:choose>
<s:when b:test="exists($tResourceEditor)">
<s:for-each b:target="$lResourceObject//b:infobox//table/tbody/tr[@c:occurrence]">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lIterationDate" b:select="string($_target/@c:sortdate)"/>
<s:task b:action="assign" b:target="$lIterationState" b:select="string($_target/td/input[@type='checkbox']/@b:state)"/>
<s:choose>
<s:when b:test="$_target/td/b:spinner[@c:purpose='quantity']">
<s:task b:action="assign" b:target="$lIterationStock" b:select="string($_target/td/b:spinner[@c:purpose='quantity']/@b:value)"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$lIterationStock" b:select="string($_target/@c:init_qty)"/>
</s:otherwise>
</s:choose>
<s:if b:test="$lIterationState = 'selected'">
<s:for-each b:target="$lDatelistXml/r25:date_collection/r25:date_list">
<s:if b:test="$lIterationDate = $_target/r25:start_date">
<s:task b:action="settext" b:target="$_target/r25:stock" b:value="{$lIterationStock}"/>
</s:if>
</s:for-each>
</s:if>
<s:if b:test="not($lIterationState = 'selected')">
<s:for-each b:target="$lDatelistXml/r25:date_collection/r25:date_list">
<s:if b:test="$lIterationDate = $_target/r25:start_date">
<s:task b:action="remove" b:target="$_target"/>
</s:if>
</s:for-each>
</s:if>
</s:lock></s:sequential>
</s:for-each>
</s:when>
<s:otherwise>
<s:variable b:name="lIterationReservation" b:select=""/>
<s:for-each b:target="$lDatelistXml/r25:date_collection/r25:date_list">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lIterationDate" b:select="string($_target/r25:start_date)"/>
<s:task b:action="assign" b:target="$lIterationReservation" b:select="$tEvWiz/$tProfile/r25:reservation[substring-before(replace(r25:reservation_start_dt, '-', ''), 'T') = $lIterationDate]"/>
<s:choose>
<s:when b:test="count($lIterationReservation) gt 0 and $lIterationReservation/r25:resource_reservation/r25:resource_id = $lResourceID">
<s:task b:action="settext" b:target="$_target/r25:stock" b:value="{$lIterationReservation/r25:resource_reservation[r25:resource_id = $lResourceID]/r25:quantity}"/>
</s:when>
<s:otherwise>
</s:otherwise>
</s:choose>
</s:lock></s:sequential>
</s:for-each>
</s:otherwise>
</s:choose>
<s:if b:test="count($lDatelistXml//r25:start_date) = 0">
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:rsrv_start_dt" b:value=""/>
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:rsrv_end_dt" b:value=""/>
</s:if>
<s:if b:test="count($lDatelistXml//r25:start_date) gt 0">
<s:if b:test="not(string($lDatelistXml//r25:start_date[1]) = $lStartDate)">
<s:variable b:name="lNewStartDate" b:select="string($lDatelistXml//r25:start_date[1])"/>
<s:variable b:name="lNewEndDate" b:select="string($lDatelistXml//r25:start_date[1])"/>
<s:if b:test="not($lStartDate = $lEndDate)">
<s:variable b:name="lStartDateDelimited" b:select="concat(substring($lStartDate,1,4),'-',substring($lStartDate,5,2),'-',substring($lStartDate,7,2))"/>
<s:variable b:name="lEndDateDelimited" b:select="concat(substring($lStartDate,1,4),'-',substring($lStartDate,5,2),'-',substring($lStartDate,7,2))"/>
<s:variable b:name="lNewStartDateDelimited" b:select="concat(substring($lNewStartDate,1,4),'-',substring($lNewStartDate,5,2),'-',substring($lNewStartDate,7,2))"/>
<s:script><![CDATA[

var iDateDiff = dateDiff(_vars['lStartDateDelimited'][0], _vars['lEndDateDelimited'][0]);
var dNewStart = returnDate(_vars['lNewStartDateDelimited'][0]);
var dNewEnd = dNewStart.setDate(dNewStart.getDate() + iDateDiff);
bpc.setVariable('lNewEndDate', [s25_format_date(dNewEnd, 'yyyyMMdd')], _current);

]]></s:script>
</s:if>
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:rsrv_start_dt" b:value="{concat($lNewStartDate,'T',$lStartTime)}"/>
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:rsrv_end_dt" b:value="{concat($lNewEndDate,'T',$lEndTime)}"/>
<s:task b:action="settext" b:target="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:stock_level" b:value="{string($lDatelistXml//r25:date_list[1]/r25:stock)}"/>
</s:if>
<s:task b:action="remove" b:target="$lDatelistXml/r25:date_collection/r25:date_list[r25:start_date = substring($lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:rsrv_start_dt, 1, 8)]"/>
<s:task b:action="copy" b:source="$lDatelistXml/r25:date_collection//r25:date_list" b:destination="$lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv" b:mode="aslastchild"/>
</s:if>
</s:if>
<s:task b:action="xml2string" b:variable="$lPendXml"/>
<s:task b:action="string2xml" b:variable="$lPendXml"/>
<s:variable b:name="lPendResult" b:select="'Unknown'"/>
<s:choose>
<s:when b:test="not(string-length($lPendXml/r25:resource_pend_rsrvs/r25:resource_pend_rsrv/r25:rsrv_start_dt) = 0)">
<s:variable b:name="lData" b:scope="local" b:select="$lPendXml"/>
<s:task b:action="xml2string" b:variable="$lData"/>
<s:task b:test="not(starts-with($lData,'&lt;?'))" b:action="assign" b:target="$lData" b:scope="local" b:select="concat('&lt;?xml version=&#34;1.0&#34;?&gt;',$lData)"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="POST" b:showloading="true" b:url="{concat(id('Config')/$tWsPrefix,'rs_pend_rsrvs.xml')}" b:data="{$lData}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="string2xml" b:variable="$lTxt"/>
<s:variable b:name="lRespHttp" b:select="number(id('HttpMgr')/$tStatus)"/>
<s:variable b:name="lRespXml" b:select=""/>
<s:variable b:name="lRespStr" b:select="id('HttpMgr')/$tResponseText"/>
<s:if b:test="starts-with($lRespStr,'&lt;?')">
<s:script><![CDATA[

var s = String(_vars['lRespStr'][0]);
s = s.replace(/\s*<\?.*?\?>/,'');
s = s.replace(/\s+&\s+/g,' &amp; ');
s = s.replace(/\s+%\s+/g,' &#37; ');
bpc.setVariable('lRespStr',[s],'local');

]]></s:script>
<s:task b:action="string2xml" b:source="$lRespStr" b:variable="$lRespXml"/>
</s:if>
<s:if b:test="number($lRespHttp) = 200 or number($lRespHttp) = 201">
<s:choose>
<s:when b:test="count($lRespXml/r25:results//r25:resource_pend_rsrv[number(r25:qty_avail) lt number(r25:qty_req)]) gt 0">
<s:task b:action="assign" b:target="$lPendResult" b:select="'Conflicts'"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$lPendResult" b:select="'NoConflicts'"/>
</s:otherwise>
</s:choose>
<s:if b:test="exists($tResourceEditor)">
<s:if b:test="$tEvWiz/$tHasRepeats = 'F'">
<s:choose>
<s:when b:test="count($lRespXml/r25:results//r25:resource_pend_rsrv[number(r25:qty_avail) lt number(r25:qty_req)]) gt 0">
<s:render b:destination="$lResourceObject/span[@c:purpose='conflicts']/div[@c:id='conflicts']" b:mode="replacechildren">
<div class="currentSelection_Conflict">
<div class="currentSelection_ConflictLabel">Insufficient Quantity:</div>
<div class="currentSelection_ConflictDetail">
Requested: <b><s:textnode b:label="{$lRespXml/r25:results//r25:resource_pend_rsrv/r25:qty_req}"/></b>; 
Available: <b><s:textnode b:label="{$lRespXml/r25:results//r25:resource_pend_rsrv/r25:qty_avail}"/></b>
</div>
</div>
</s:render>
<s:task b:action="assign" b:target="$lPendResult" b:select="'Conflicts'"/>
</s:when>
<s:otherwise>
<s:task b:action="remove" b:target="$lResourceObject/span[@c:purpose='conflicts']/div[@c:id='conflicts']/*"/>

</s:otherwise>
</s:choose>
</s:if>
<s:if b:test="$tEvWiz/$tHasRepeats = 'T'">
<s:variable b:name="lThisRow" b:select=""/>
<s:variable b:name="lThisRowCheckbox" b:select=""/>
<s:variable b:name="lThisRowSortDate" b:select=""/>
<s:variable b:name="lThisTakenResourceDt" b:select=""/>
<s:for-each b:target="$lResourceObject//b:infobox//table/tbody/tr[@c:occurrence]">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lThisRow" b:select="$_target"/>
<s:task b:action="assign" b:target="$lThisRowSortDate" b:select="$lThisRow/@c:sortdate"/>
<s:task b:action="assign" b:target="$lThisRowCheckbox" b:select="$lThisRow/td/input[@type='checkbox']"/>
<s:with b:target="$lThisRow">
<s:task b:action="removeclass" b:value="conflict"/>
<s:setatt c:valid="T"/>
</s:with>
<s:for-each b:target="$lRespXml/r25:results//r25:resource_pend_rsrv/r25:rsrv_start_dt">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lThisTakenResourceDt" b:select="replace(substring-before($_target, 'T'), '-', '')"/>
<s:if b:test="$lThisRowSortDate = $lThisTakenResourceDt">
<s:with b:target="$lThisRow">
<s:setatt c:available="{string($_target/../r25:qty_avail)}"/>
</s:with>
</s:if>
</s:lock></s:sequential>
</s:for-each>
<s:for-each b:target="$lRespXml/r25:results//r25:resource_pend_rsrv[number(r25:qty_avail) lt number(r25:qty_req)]/r25:rsrv_start_dt">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lThisTakenResourceDt" b:select="replace(substring-before($_target, 'T'), '-', '')"/>
<s:if b:test="$lThisRowCheckbox/@b:state = 'selected' and $lThisRowSortDate = $lThisTakenResourceDt">
<s:with b:target="$lThisRow">
<s:task b:action="addclass" b:value="conflict"/>
<s:setatt c:valid="F"/>
</s:with>
<s:task b:action="assign" b:target="$lPendResult" b:select="'Conflicts'"/>
</s:if>
</s:lock></s:sequential>
</s:for-each>
<s:task b:target="$lThisRow/td[@c:id='quantity']" b:action="trigger" b:event="UpdateQuantity"/>
<s:task b:target="$lThisRow/td[@c:id='available']" b:action="trigger" b:event="UpdateQuantityAvailable"/>
</s:lock></s:sequential>
</s:for-each>
</s:if>
</s:if>

</s:if>
<s:task b:action="hide" b:target="div[@c:id = 'checking']"/>
<s:task b:action="remove" b:target="div[@c:id = 'resource_conflicts']/div[@c:resource_id = $lResourceID]"/>
<s:choose>
<s:when b:test="$lPendResult = 'Unknown'">
<s:with b:target="$lResourceObject">
<s:setatt c:valid="U"/>
</s:with>
</s:when>
<s:when b:test="$lPendResult = 'NoConflicts'">
<s:with b:target="$lResourceObject">
<s:setatt c:valid="T"/>
</s:with>
<s:if b:test="count(id('PendingResourceReservations')/resource[@event_id = $lEventID and @resource_id = $lResourceID]) = 0">
<s:render b:destination="id('PendingResourceReservations')" b:mode="aslastchild">
<resource event_id="{$lEventID}" resource_id="{$lResourceID}"/>
</s:render>
</s:if>
<s:if b:test="count(div[@c:id = 'resource_conflicts']/div[@c:resource_id]) = 0">
<s:task b:action="hide" b:target="div[@c:id = 'resource_conflicts']"/>
<s:if b:test="count(div[@c:id = 'space_conflicts']/div[@c:space_id]) = 0">
<s:task b:action="show" b:target="div[@c:id = 'no_conflicts']"/>
</s:if>
</s:if>
</s:when>
<s:when b:test="$lPendResult = 'Conflicts'">
<s:if b:test="count(id('PendingResourceReservations')/resource[@event_id = $lEventID and @resource_id = $lResourceID]) = 0">
<s:render b:destination="id('PendingResourceReservations')" b:mode="aslastchild">
<resource event_id="{$lEventID}" resource_id="{$lResourceID}"/>
</s:render>
</s:if>
<s:with b:target="$lResourceObject">
<s:setatt c:valid="F"/>
</s:with>
<s:render b:destination="div[@c:id = 'resource_conflicts']" b:mode="aslastchild">
<div class="icon-warning" c:resource_id="{$lResourceID}">
<b b:behavior="S25Object" c:obj_type="resource" c:obj_id="{$lResourceID}"><s:textnode b:label="{$lResourceName}"/></b>
<span style="font-size:90%"><s:textnode b:label="has conflicts on the following date(s): "/></span>
<span/>
</div>
</s:render>
<s:variable b:name="lDateList" b:select="div[@c:id = 'resource_conflicts']/div[@c:resource_id = $lResourceID]/span[last()]"/>
<s:for-each b:target="$lRespXml/r25:results//r25:resource_pend_rsrv[number(r25:qty_avail) lt number(r25:qty_req)]/r25:rsrv_start_dt">
<s:sequential><s:lock>
<s:render b:destination="$lDateList" b:mode="aslastchild">
<div c:sortdate="{replace(substring-before($_target,'T'),'-','')}">
<b><s:textnode b:label="{s25_format_date(string($_target), id('Prefs')/$tDatePattern)}"/></b>
<span style="font-size:90%"> (Requested: <s:textnode b:label="{string($_target/following-sibling::r25:qty_req)}"/>; Available: <s:textnode b:label="{string($_target/following-sibling::r25:qty_avail)}"/>)</span>
</div>
</s:render>
</s:lock></s:sequential>
</s:for-each>
<s:task b:action="show" b:target="div[@c:id = 'resource_conflicts']"/>
</s:when>
</s:choose>
</s:when>
<s:otherwise>
<s:task b:action="hide" b:target="div"/>
<s:task b:action="show" b:target="div[@c:id = 'no_conflicts']"/>
<s:with b:target="$lResourceObject">
<s:setatt c:valid="U"/>
</s:with>
</s:otherwise>
</s:choose>
</s:if>
<s:with b:target="$lResourceObject">
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
</s:when>
<s:when b:test="$tEvWiz/$tHasDates = 'T' and $tCreatePendingRsrvs = 'F'">
<s:with b:target="$lResourceObject">
<s:setatt c:valid="T"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
</s:when>
<s:when b:test="$tEvWiz/$tHasDates = 'F'">
<s:with b:target="$lResourceObject">
<s:setatt c:valid="U"/>
<s:task b:action="trigger" b:event="ValidityUpdate"/>
</s:with>
</s:when>
</s:choose>
</s:event>
<s:event b:on="DeletePendingResourceRsrv">
<s:if b:test="$tCreatePendingRsrvs = 'T' and $tEvWiz/$tHasDates">
<s:variable b:name="lEventID" b:scope="local" b:select="$tEvWiz/$tEvent/r25:event_id"/>
<s:if b:test="id('PendingResourceReservations')/resource[@event_id = $lEventID and @resource_id = $lResourceID]">
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:showloading="false" b:method="DELETE" b:url="{concat(id('Config')/$tWsPrefix,'rs_pend_rsrvs.xml', '?event_id=',$lEventID, '&amp;resource_id=',$lResourceID)}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="remove" b:target="id('PendingResourceReservations')/resource[@event_id = $lEventID and @resource_id = $lResourceID]"/>
</s:if>
<s:task b:action="remove" b:target="div[@c:id = 'resource_conflicts']/div[@c:resource_id = $lResourceID]"/>
<s:if b:test="count(div[@c:id = 'resource_conflicts']/div[@c:resource_id]) = 0">
<s:task b:action="hide" b:target="div[@c:id = 'resource_conflicts']"/>
<s:if b:test="count(div[@c:id = 'space_conflicts']/div[@c:space_id]) = 0">
<s:task b:action="show" b:target="div[@c:id = 'no_conflicts']"/>
</s:if>
</s:if>
</s:if>
</s:event>
</s:behavior>
</div>
<s:htmlstructure b:name="s25:rsrv_wiz" b:behavior="S25RsrvWiz">
<div class="s25rsrvwiz"><s:innercontent/></div>
</s:htmlstructure>
<s:behavior b:name="S25RsrvWiz" b:behavior="S25Data">
<s:initatt c:purpose="S25RsrvWiz" c:prefs="25L_rsrv_wizard" c:thread="default_wizard" c:key="" c:allow_save="false" c:locked="false" c:event_id="" c:profile_id="" c:title="Creating Event" c:contact_id="" c:event_type_id="" c:start_dt="" c:start_hr="" c:end_dt="" c:start_time="" c:end_time="" c:headcount=""/>
<s:event b:on="construct">
<s:super/>

<s:variable b:name="tRespStr" b:scope="tag" b:select=""/>
<s:variable b:name="tRespXml" b:scope="tag" b:select=""/>
<s:variable b:name="tHiddenData" b:scope="tag" b:select=""/>
<s:variable b:name="tInbox" b:scope="tag" b:select=""/>
<s:variable b:name="tTable" b:scope="tag" b:select=""/>
<s:variable b:name="tStatus" b:scope="tag" b:select=""/>
<s:variable b:name="tCrumbContainer" b:scope="tag" b:select=""/>
<s:variable b:name="tDeck" b:scope="tag" b:select=""/>
<s:variable b:name="tButtonContainer" b:scope="tag" b:select=""/>
<s:variable b:name="tCancelButton" b:scope="tag" b:select=""/>
<s:variable b:name="tNextButton" b:scope="tag" b:select=""/>
<s:variable b:name="tPreviousButton" b:scope="tag" b:select=""/>
<s:variable b:name="tSaveButton" b:scope="tag" b:select=""/>
<s:variable b:name="tCrumbMaxLength" b:scope="tag" b:select="number(125)"/>
<s:variable b:name="tThread" b:scope="tag" b:select=""/>
<s:variable b:name="tCard" b:scope="tag" b:select=""/>
<s:variable b:name="tTitle" b:scope="tag" b:select=""/>
<s:variable b:name="tActionSelect" b:scope="tag" b:select=""/>
<s:variable b:name="tPrintIcon" b:scope="tag" b:select=""/>
<s:variable b:name="tReference" b:scope="tag" b:select=""/>
<s:variable b:name="tTimestamp" b:scope="tag" b:select=""/>
<s:variable b:name="tPrefStatusSpace" b:scope="tag" b:select=""/>
<s:variable b:name="tPrefStatusResource" b:scope="tag" b:select=""/>
<s:variable b:name="tBlackoutOverrides" b:scope="tag" b:select="'F'"/>
<s:variable b:name="tOpenCloseOverrides" b:scope="tag" b:select="'F'"/>		
<s:if b:test="string(id('FLS_SPACE_BLACK')) = 'F'">
<s:task b:action="assign" b:target="$tBlackoutOverrides" b:select="'T'"/>		
</s:if>
<s:if b:test="string(id('FLS_SPACE_HOURS')) = 'F'">
<s:task b:action="assign" b:target="$tOpenCloseOverrides" b:select="'T'"/>
</s:if>
<s:variable b:name="tEventRef" b:scope="tag" b:select=""/>
<s:variable b:name="tEvent" b:scope="tag" b:select=""/>
<s:variable b:name="tProfile" b:scope="tag" b:select=""/>
<s:variable b:name="tRsrv" b:scope="tag" b:select=""/>
<s:variable b:name="tSelectedObj" b:scope="tag" b:select=""/>
<s:variable b:name="tInvalidEditors" b:scope="tag" b:select=""/>
<s:variable b:name="tMessages" b:scope="tag" b:select=""/>
<s:variable b:name="tAvailabilityControl" b:scope="tag" b:select=""/>
<s:variable b:name="tReportTemplate" b:scope="tag" b:select=""/>
<s:variable b:name="tDateTimeEditor" b:scope="tag" b:select="'F'"/>
<s:variable b:name="tResourceEditor" b:scope="tag" b:select="'F'"/>
<s:variable b:name="tSpaceEditor" b:scope="tag" b:select="'F'"/>
<s:variable b:name="tContactEditor" b:scope="tag" b:select="'F'"/>
<s:variable b:name="tInitStartDt" b:scope="tag" b:select=""/> 
<s:variable b:name="tInitEndDt" b:scope="tag" b:select=""/>       
<s:variable b:name="tInitState" b:scope="tag" b:select=""/>       
<s:variable b:name="tName" b:scope="tag" b:select=""/>      
<s:variable b:name="tRegistrationExists" b:scope="tag" b:select="'F'"/>
<s:variable b:name="tResultKey" b:scope="tag" b:select="''"/>
<s:variable b:name="tRelatedEventsXml" b:scope="tag">
<related_events>
</related_events>
</s:variable>
<s:task b:action="string2xml" b:variable="$tRelatedEventsXml"/>
<s:if b:test="string-length(@c:xsl_prefix) = 0">
<s:setatt c:xsl_prefix="{id('Config')/$tXslPrefix}"/>
</s:if>
<s:if b:test="string-length(@c:r25ws_prefix) = 0">
<s:setatt c:r25ws_prefix="{id('Config')/$tWsPrefix}"/>
</s:if>
<s:script><![CDATA[

oDt = new Date();
bpc.setBXMLAttribute('c:key',oDt.getTime(),_current);

]]></s:script>
<s:variable b:name="lPrefNames">
<prefs>
<name>config_BPE_event_get</name>
<name>25L_rsrvwiz_config</name>
<name>25L_rsrvwiz_secgroups</name>
<name>25L_rsrvwiz_email_roles</name>
<name>config_BPE_event_itransform</name>
<name>config_BPE_event_otransform</name>
<name>config_ev_categories</name>
<name>config_ev_contact_roles</name>
<name>config_ev_cust_atrb_details</name>
</prefs>
</s:variable>
<s:task b:action="string2xml" b:variable="$lPrefNames"/>
<s:for-each b:target="$lPrefNames/prefs/name">
<s:if b:test="exists(id(concat('Pref_',string($_target))))">
<s:task b:action="remove" b:target="$_target"/>
</s:if>
</s:for-each>
<s:if b:test="count($lPrefNames/prefs/name) gt 0">
<s:variable b:name="lPrefUrl" b:scope="local" b:select="concat(id('Config')/$tWsPrefix,'preference.xml', '?otransform=',id('Config')/$tXslPrefix,'prefs.foal', '&amp;name=', string-join($lPrefNames/prefs/name, '+'))"/>
<s:task b:action="load" b:method="GET" b:url="{$lPrefUrl}" b:destination="id('PrefsDataIsland')" b:mode="aslastchild"/>
</s:if>
<s:variable b:name="lMode" b:select="id('Controller')/$tInbox/rsrv_wizard/@mode"/>
<s:task b:action="set" b:target="@c:mode" b:value="{$lMode}"/>
<s:if b:test="$lMode = 'edit'">
<s:task b:action="addclass" b:value="RsrvWiz_EditMode"/>
<s:setatt c:locked="true"/>
</s:if>
<s:variable b:name="tHasSpaces" b:scope="tag" b:select="'F'"/>
<s:variable b:name="tHasResources" b:scope="tag" b:select="'F'"/>
<s:variable b:name="tHasDates" b:scope="tag" b:select="'F'"/>
<s:task b:test="$lMode = 'edit'" b:action="assign" b:target="$tHasDates" b:select="'T'"/>
<s:variable b:name="tHasRepeats" b:scope="tag" b:select="'F'"/>
<s:variable b:name="lEventMasterListFLS" b:scope="local" b:select="id('FLS_ML_EVENT')"/>
<s:variable b:name="lCategoryPrefList" b:scope="local" b:select="tokenize(id('Pref_config_ev_categories'),',')"/>
<s:variable b:name="lAttributePrefList" b:scope="local" b:select="tokenize(id('Pref_config_ev_cust_atrb_wizard'),',')"/>
<s:variable b:name="lRolePrefList" b:scope="local" b:select="tokenize(id('Pref_config_ev_contact_roles'),',')"/>
<s:variable b:name="tCrumbXpaths" b:scope="tag" b:select=""/>
<s:choose>
<s:when b:test="string($lEventMasterListFLS) = 'F' or string($lEventMasterListFLS) = 'C'">
<s:variable b:name="lFullControlXpaths">
<crumb_xpaths>
<crumb_xpath name="name" xpath="$tEvent/r25:event_name/text()"/>
<crumb_xpath name="type" xpath="$tEvent/r25:event_type_name/text()"/>
<crumb_xpath name="sponsor" xpath="$tEvent/r25:organization[r25:primary='T'][not(@status='del')]/r25:organization_name/text()"/>
<crumb_xpath name="additional_sponsor" xpath="string-join($tEvent/r25:organization[r25:primary='F'][not(@status='del')]/r25:organization_name/text(), '|')"/>
<crumb_xpath name="datetime" xpath="$tProfile/r25:profile_description/text()"/>
<crumb_xpath name="state" xpath="$tEvent/r25:state_name/text()"/>
<crumb_xpath name="description" xpath="$tEvent/r25:event_text[r25:text_type_id='1']/r25:text"/>
<crumb_xpath name="description_html" xpath="$tEvent/r25:event_text[r25:text_type_id='1']/r25:text"/>
<crumb_xpath name="space" xpath="string-join(distinct-values($tProfile//r25:space_reservation/r25:space/r25:space_name), '|')"/>
<crumb_xpath name="headcount" xpath="concat('Expected Head Count', ' ', $tProfile/r25:expected_count/text(), '; ', 'Registered Head Count', ' ', $tProfile/r25:registered_count/text())"/>
<crumb_xpath name="headcount_expected" xpath="$tProfile/r25:expected_count/text()"/>
<crumb_xpath name="headcount_registered" xpath="$tProfile/r25:registered_count/text()"/>				
<crumb_xpath name="resource" xpath="string-join(distinct-values($tProfile//r25:resource_reservation/r25:resource/r25:resource_name), '|')"/>
<crumb_xpath name="title" xpath="$tEvent/r25:event_title/text()"/>
<crumb_xpath name="ev_custom_attr" xpath="string-join((./$tEvent/r25:custom_attribute[not(r25:attribute_value='' or r25:attribute_id='-16' or r25:attribute_id='-17')]/r25:attribute_name), '|')"/>
<crumb_xpath name="ev_category" xpath="string-join((./$tEvent/r25:category[not(@status='del')]/r25:category_name), '|')"/>
<crumb_xpath name="contact" xpath="string-join($tEvent/r25:role[string-length(r25:contact/r25:contact_id) gt 0]/r25:role_name, '; ')"/>
<crumb_xpath name="comment" xpath="$tProfile/r25:profile_comments"/>
<crumb_xpath name="notes" xpath="$tEvent/r25:event_text[r25:text_type_id = '2']/r25:text"/>
</crumb_xpaths>			
</s:variable>				
<s:task b:action="assign" b:target="$tCrumbXpaths" b:select="$lFullControlXpaths"/>								
</s:when>
<s:otherwise>
<s:variable b:name="lMLRestrictedXpaths">
<crumb_xpaths>
<crumb_xpath name="name" xpath="$tEvent/r25:event_name/text()"/>
<crumb_xpath name="type" xpath="$tEvent/r25:event_type_name/text()"/>
<crumb_xpath name="sponsor" xpath="$tEvent/r25:organization[r25:primary='T'][not(@status='del')]/r25:organization_name/text()"/>
<crumb_xpath name="additional_sponsor" xpath="string-join($tEvent/r25:organization[r25:primary='F'][not(@status='del')]/r25:organization_name/text(), '|')"/>
<crumb_xpath name="datetime" xpath="$tProfile/r25:profile_description/text()"/>
<crumb_xpath name="state" xpath="$tEvent/r25:state_name/text()"/>
<crumb_xpath name="description" xpath="$tEvent/r25:event_text[r25:text_type_id='1']/r25:text"/>
<crumb_xpath name="description_html" xpath="$tEvent/r25:event_text[r25:text_type_id='1']/r25:text"/>
<crumb_xpath name="space" xpath="string-join(distinct-values($tProfile//r25:space_reservation/r25:space/r25:space_name), '|')"/>
<crumb_xpath name="headcount" xpath="concat('Expected Head Count', ' ', $tProfile/r25:expected_count/text(), '; ', 'Registered Head Count', ' ', $tProfile/r25:registered_count/text())"/>
<crumb_xpath name="headcount_expected" xpath="$tProfile/r25:expected_count/text()"/>
<crumb_xpath name="headcount_registered" xpath="$tProfile/r25:registered_count/text()"/>				
<crumb_xpath name="resource" xpath="string-join(distinct-values($tProfile//r25:resource_reservation/r25:resource/r25:resource_name), '|')"/>
<crumb_xpath name="title" xpath="$tEvent/r25:event_title/text()"/>
<crumb_xpath name="ev_custom_attr" xpath="string-join((./$tEvent/r25:custom_attribute[not(r25:attribute_value='' or r25:attribute_id='-16' or r25:attribute_id='-17')]/r25:attribute_name), '|')"/>
<crumb_xpath name="ev_category" xpath="string-join((./$tEvent/r25:category[not(@status='del')]/r25:category_name), '|')"/>
<crumb_xpath name="contact" xpath="string-join($tEvent/r25:role[string-length(r25:contact/r25:contact_id) gt 0]/r25:role_name, '; ')"/>
<crumb_xpath name="comment" xpath="$tProfile/r25:profile_comments"/>
<crumb_xpath name="notes" xpath="$tEvent/r25:event_text[r25:text_type_id = '2']/r25:text"/>
</crumb_xpaths>			
</s:variable>
<s:task b:action="assign" b:target="$tCrumbXpaths" b:select="$lMLRestrictedXpaths"/>				
</s:otherwise>
</s:choose>
<s:task b:action="string2xml" b:variable="$tCrumbXpaths"/>
<s:task b:action="trigger" b:event="Paint" b:target="."/>
<s:setatt c:event_id="{id('Controller')/$tInbox/selected_obj/@obj_id}" c:profile_id="{id('Controller')/$tInbox/selected_obj/@profile_id}" c:start_dt="{id('Controller')/$tInbox/selected_obj/@start_dt}" c:end_dt="{id('Controller')/$tInbox/selected_obj/@end_dt}" c:start_time="{id('Controller')/$tInbox/selected_obj/@start_time}" c:end_time="{id('Controller')/$tInbox/selected_obj/@end_time}" c:start_hr="{id('Controller')/$tInbox/selected_obj/@start_hr}" c:headcount="{id('Controller')/$tInbox/selected_obj/@headcount}" c:contact_id="{id('WSSessionMgr')/@c:contact-id}"/>
<s:task b:action="trigger" b:event="Reset" b:target="."/>
<s:choose>
<s:when b:test="$lMode = 'edit'">


</s:when>
<s:otherwise>
<s:if b:test="not(@c:mode='clone') and  (not(string-length(id('Controller')/$tInbox/selected_obj/@obj_id) = 0) or  not(string-length(id('Controller')/$tInbox/selected_obj/@start_dt) = 0))">
<s:task b:action="trigger" b:event="PresetPopulate" b:target="."/>
</s:if>
<s:if b:test="@c:mode = 'clone'">
<s:variable b:name="lReserve" b:scope="local" b:select="$tInbox/reserve"/>
<s:task b:action="remove" b:target="$lReserve/obj"/>
<s:variable b:name="lObjID" b:select=""/>
<s:variable b:name="lOccurrenceDate" b:select=""/>
<s:for-each b:target="distinct-values($tProfile//r25:space_reservation/r25:space_id)">
<s:render b:destination="$lReserve" b:mode="aslastchild">
<obj obj_type="space" obj_id="{$_target/../r25:space_id}" obj_name="{$_target/../r25:space/r25:space_name}" obj_layout="{$_target/../r25:space/r25:layout_id}" obj_layout_name="{$_target/../r25:space/r25:layout_name}" obj_instructions="{$_target/../r25:space/r25:space_instructions}" obj_share="{$_target/../r25:space/r25:share}"/>
</s:render>
</s:for-each>
<s:for-each b:target="distinct-values($tProfile//r25:resource_reservation/r25:resource_id)">
<s:render b:destination="$lReserve" b:mode="aslastchild">
<obj obj_type="resource" obj_id="{$_target/../r25:resource_id}" obj_name="{$_target/../r25:resource/r25:resource_name}" obj_quantity="{$_target/../r25:quantity}" obj_instructions="{$_target/../r25:resource_instructions}"/>
</s:render>
</s:for-each>
<s:if b:test="count($tProfile/r25:reservation)">
<s:for-each b:target="$tProfile/r25:reservation">
<s:task b:action="assign" b:target="$lOccurrenceDate" b:select="substring-before($_target/r25:event_start_dt, 'T')"/>
<s:for-each b:target="$_target/r25:space_reservation">
<s:task b:action="assign" b:target="$lObjID" b:select="string($_target/r25:space_id)"/>
<s:render b:destination="$lReserve/obj[@obj_type='space' and @obj_id=$lObjID]" b:mode="aslastchild">
<occurrence date="{string($lOccurrenceDate)}" obj_layout="{$_target/r25:layout_id}" obj_layout_name="{$_target/r25:layout_name}" obj_instructions="{$_target/r25:space_instructions}" obj_share="{$_target/r25:share}"/>
</s:render>
</s:for-each>
<s:for-each b:target="$_target/r25:resource_reservation">
<s:task b:action="assign" b:target="$lObjID" b:select="string($_target/r25:resource_id)"/>
<s:render b:destination="$lReserve/obj[@obj_type='resource' and @obj_id=$lObjID]" b:mode="aslastchild">
<occurrence date="{string($lOccurrenceDate)}" obj_quantity="{$_target/r25:quantity}" obj_instructions="{$_target/r25:resource_instructions}"/>
</s:render>
</s:for-each>
</s:for-each>
</s:if>
<s:task b:action="remove" b:target="$tDataXml//r25:reservation"/>
</s:if>
<s:choose>
<s:when b:test="$tHasDates = 'T' and ($tHasSpaces = 'T' or $tHasResources = 'T')">
</s:when>
<s:when b:test="$tHasDates = 'T' and $tHasSpaces = 'F' and $tHasResources = 'F'">
<s:task b:action="hide" b:target="$tAvailabilityControl/div[@c:id = 'checking']"/>
<s:task b:action="show" b:target="$tAvailabilityControl/div[@c:id = 'no_conflicts']"/>
</s:when>
<s:when b:test="$tHasDates = 'F'">
<s:task b:action="hide" b:target="$tAvailabilityControl/div[@c:id = 'checking']"/>
<s:task b:action="show" b:target="$tAvailabilityControl/div[@c:id = 'no_dates']"/>
</s:when>
</s:choose>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="Paint">
<s:variable b:name="lThis" b:scope="local">ancestor::s25:rsrv_wiz[1]</s:variable>
<s:variable b:name="lCancelText" b:select="'Cancel'"/>
<s:variable b:name="lSaveText" b:select="'Finish'"/>
<s:if b:test="@c:mode = 'edit'">
<s:task b:action="assign" b:target="$lCancelText" b:select="'Close'"/>
<s:task b:action="assign" b:target="$lSaveText" b:select="'Save'"/>
</s:if>
<s:render b:destination="." b:mode="replacechildren">
<div>
<div c:purpose="inbox" style="display:none;">
<reserve>
</reserve>
<occurrences>
</occurrences>
</div>
<div class="sentenceNav" c:purpose="sentenceNav">
<img src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="sentenceNavOrnament_rsrvwiz"/>
<table class="sentenceNav_columns">
<tr>
<td class="sentenceNavHeader">Loading...   </td>
<td class="sentenceNavRight" style="width:250px">
<img src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Back" b:action="trigger" b:event="OnClickPrevious" b:target="{$lThis}" b:tooltiptext="Previous Options"/> 
<img src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Forward" b:action="trigger" b:event="OnClickNext" b:target="{$lThis}" b:tooltiptext="More Options"/> 
<img src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Save" b:action="trigger" b:event="OnClickSave" b:target="{$lThis}" b:tooltiptext="Save this event"/>
<img src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Help" b:behavior="DirectHelpLink" b:help="event_create" b:tooltiptext="Get help with creating and editing events."/>
<img src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Shortcuts" b:tooltiptext="View keyboard shortcuts for event creation and editing" style="display:none">
<s:event b:on="command">
<s:task b:test="not(id('custom_modals_control')/*)" b:action="load" b:url="{concat('',s25live_ver(),'/app/modals.xml')}" b:destination="id('custom_modals_control')" b:mode="replacechildren"/>
<s:task b:test="not(exists(id('RsrvWizShortcutsModal')))" b:action="trigger" b:event="RenderRsrvWizShortcutsModal" b:target="id('Modals')"/>
<s:task b:action="trigger" b:event="open" b:target="id('RsrvWizShortcutsModal')"/>
</s:event>
</img>
<img src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Report" b:action="trigger" b:event="OnClickPrint" b:target="{$lThis}" b:tooltiptext="Print a confirmation report for this event." style="display:none;"/>
<img c:id="action-close" src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Close" b:action="trigger" b:event="OnClickCancel" b:target="{$lThis}" b:tooltiptext="Cancel or Close this instance of event creation and editing."/>
<img c:id="action-close-disabled" src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Close_Disabled" style="display:none;cursor:default" b:tooltiptext="This button is temporarily disabled."/>
<img c:id="action-close-immediately" src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/_.gif" class="actionIcon_Close" style="display:none" b:action="trigger" b:event="Cancel" b:target="{$lThis}" b:tooltiptext="Cancel or Close this instance of event creation and editing."/>
</td>
</tr>
</table>
</div>
<div align="center">
<div class="RsrvWizMessages" c:purpose="messages">
<img src="https://25live-c.collegenet.com/hybridssl/v21.0/gfx/icon_close.gif" class="RsrvWizMessages_Close">
<s:event b:on="command"><s:task b:action="hide" b:target=".."/></s:event>
</img>
<div c:id="message"/>
</div>
</div>
<div c:id="table" class="RsrvWiz">
<div c:id="left" class="RsrvWiz_Left">
<rsrvwizdetails/>
<div c:id="status" class="RsrvWiz_Status">
<div class="RsrvWiz_StatusHeader">Event Status</div>
<div class="RsrvWiz_StatusBody">
<div c:id="reference" class="icon-event" style="display:none"/>
<div c:id="timestamp" class="icon-save" style="display:none"/>
<div c:id="space_pref" class="icon-space" style="display:none">This event has requested locations.</div>
<div c:id="resource_pref" class="icon-resource" style="display:none">This event has requested resources.</div>
<div c:id="status_required" class="icon-loading">
Checking Required Fields...
</div>
<span c:purpose="check-availability" b:behavior="CheckAvailability">
<div c:id="no_dates" class="icon-pending" style="display:none">Awaiting Date Selection...</div>
<div c:id="no_conflicts" class="icon-checkmark" style="display:none">No Scheduling Conflicts Detected!</div>
<div c:id="space_conflicts" class="availabilityNotice"/>
<div c:id="resource_conflicts" class="availabilityNotice"/>
<div c:id="pending" class="icon-pending" style="display:none">
<a href="javascript:void(0)" onclick="return false">
<s:event b:on="command">

<s:task b:action="trigger" b:event="Save" b:target="ancestor::s25:rsrv_wiz//s25:rsrv_wiz_datetime"/>
</s:event>
Check for Location/Resource Conflicts?
</a>
</div>
<div c:id="checking" class="icon-loading">Checking for Scheduling Conflicts...</div>
</span>
</div>
</div>
<div c:id="crumbs" class="RsrvWiz_Crumbs"/>
</div>
<div c:id="right" class="RsrvWiz_Right">
<div c:id="deck" class="RsrvWiz_Deck">
<div>
<b:deck>
<div c:id="blank">
<div class="s25rsrvwiz-gears"/>
</div>
</b:deck>
</div>
</div>
<div c:id="buttons" class="RsrvWiz_Buttons" style="display:none;">
<table align="center" border="0">
<tr>
<td align="left">
<b:button c:id="cancel" class="s25rsrvwiz-cancel-btn" b:tooltiptext="Stop Editing this Event" b:behavior="RsrvWizInput" b:action="trigger" b:event="OnClickCancel" b:target="{$lThis}"><s:textnode b:label="{$lCancelText}"/></b:button>
</td>
<td align="right">
<b:button c:id="previous" class="s25rsrvwiz-prev-btn" b:tooltiptext="Return to the Previous screen" b:behavior="RsrvWizInput">
<s:event b:on="command">
<s:task b:test="not(@b:disabled='true')" b:action="trigger" b:event="OnClickPrevious" b:target="{$lThis}"/>
</s:event>
Previous
</b:button>
</td>
<td align="left">
<b:button c:id="next" class="s25rsrvwiz-next-btn" b:tooltiptext="Proceed to the Next screen" b:behavior="RsrvWizInput">
<s:event b:on="command">
<s:task b:test="not(@b:disabled='true')" b:action="trigger" b:event="OnClickNext" b:target="{$lThis}"/>
</s:event>
Next
</b:button>
</td>
<td align="right">
<b:button c:id="save" class="s25rsrvwiz-save-btn" b:tooltiptext="Finish Editing this Event" b:behavior="RsrvWizInput" b:action="trigger" b:event="OnClickSave" b:target="{$lThis}"><s:textnode b:label="{$lSaveText}"/></b:button>
</td>
</tr>
</table>
</div>
</div>
</div>
</div>
</s:render>
<s:task b:action="assign" b:target="$tInbox" b:scope="tag" b:select="div/div[@c:purpose = 'inbox']"/>
<s:task b:action="assign" b:target="$tTable" b:scope="tag" b:select="div/div[@c:id = 'table']"/>
<s:task b:action="assign" b:target="$tStatus" b:scope="tag" b:select="$tTable/div[@c:id='left']/div[@c:id='status']"/>
<s:task b:action="assign" b:target="$tReference" b:scope="tag" b:select="$tStatus//div[@c:id='reference']"/>
<s:task b:action="assign" b:target="$tTimestamp" b:scope="tag" b:select="$tStatus//div[@c:id='timestamp']"/>
<s:task b:action="assign" b:target="$tPrefStatusSpace" b:scope="tag" b:select="$tStatus//div[@c:id='space_pref']"/>
<s:task b:action="assign" b:target="$tPrefStatusResource" b:scope="tag" b:select="$tStatus//div[@c:id='resource_pref']"/>
<s:task b:action="assign" b:target="$tCrumbContainer" b:scope="tag" b:select="$tTable/div[@c:id='left']/div[@c:id='crumbs']"/>
<s:task b:action="assign" b:target="$tDeck" b:scope="tag" b:select="$tTable/div[@c:id='right']/div[@c:id='deck']/div/b:deck"/>
<s:task b:action="assign" b:target="tButtonContainer" b:scope="tag" b:select="$tTable/div[@c:id='right']/div[@c:id='buttons']"/>
<s:task b:action="assign" b:target="$tNextButton" b:scope="tag" b:select="$tButtonContainer//b:button[@c:id='next']"/>
<s:task b:action="assign" b:target="$tPreviousButton" b:scope="tag" b:select="$tButtonContainer//b:button[@c:id='previous']"/>
<s:task b:action="assign" b:target="$tSaveButton" b:scope="tag" b:select="$tButtonContainer//b:button[@c:id='save']"/>
<s:task b:action="assign" b:target="$tCancelButton" b:scope="tag" b:select="$tButtonContainer//b:button[@c:id='cancel']"/>
<s:task b:action="assign" b:target="$tActionSelect" b:scope="tag" b:select="div/div[@c:purpose='sentenceNav'][1]//td[@class='sentenceNavRight'][1]"/>
<s:task b:action="assign" b:target="$tPrintIcon" b:scope="tag" b:select="$tActionSelect/img[@class='actionIcon_Report']"/>
<s:task b:action="assign" b:target="$tTitle" b:scope="tag" b:select="div/div[@c:purpose='sentenceNav']//td[@class='sentenceNavHeader']"/>
<s:task b:action="assign" b:target="$tMessages" b:scope="tag" b:select=".//div[@c:purpose='messages']"/>
<s:task b:action="assign" b:target="$tAvailabilityControl" b:scope="tag" b:select="$tTable/div[@c:id='left']//span[@c:purpose='check-availability']"/>
</s:event>
<s:event b:on="Reset">
<s:setatt c:close="F" c:allow_save="false"/>
<s:task b:action="trigger" b:event="ResetXmlData" b:target="."/>
<s:variable b:name="tPrefXml" b:scope="tag" b:select="$tDataXml/r25:events"/>
<s:variable b:name="tAvailabilityMsgs" b:scope="tag" b:select="$tDataXml/r25:events"/>
<s:variable b:name="lThread" b:scope="local" b:select="@c:thread"/>
<s:variable b:name="tOLS" b:scope="tag" b:select="$tPrefXml/wizard/@OLS"/>
<s:variable b:name="tSecurityGroup" b:scope="tag" b:select="$tPrefXml/wizard/@security_groups"/>
<s:variable b:name="lNotesFLS" b:scope="tag" b:select="id('FLS_EVENT_NOTES')"/>
<s:if b:test="not($lNotesFLS = 'F')">
<s:task b:action="remove" b:target="$tPrefXml//wizard//editor[@name='notes']"/>
</s:if>
<s:task b:action="remove" b:target="$tPrefXml//wizard//editor[@name='registration']"/>
<s:task b:action="remove" b:target="$tPrefXml/wizard//card[count(.//editor) = 0]"/>
<s:task b:action="transform" b:datasource="$tPrefXml/wizard/threads/thread[@name = $lThread]" b:stylesheet="$XslS25RsrvWizCrumbs" b:destination="$tCrumbContainer" b:mode="replacechildren"/>
<s:task b:action="transform" b:datasource="$tPrefXml/wizard/threads/thread[@name = $lThread]" b:stylesheet="$XslS25RsrvWizCards" b:destination="$tDeck" b:mode="replacechildren"/>
<s:if b:test="not(string-length(id('Controller')/$tInbox/selected_obj/@start_dt) = 0)">
<s:with b:target="$tDeck/div/*[@c:editor = 'true' and @c:id='datetime']">
<s:setatt c:valid="preset"/>
</s:with>
</s:if>
<s:if b:test="not(string-length(id('Controller')/$tInbox/rsrv_wizard/obj[@obj_type='space']/@obj_id) = 0)">
<s:with b:target="$tDeck/div/*[@c:editor = 'true' and @c:id='space']">
<s:setatt c:valid="preset"/>
</s:with>
</s:if>
<s:if b:test="not(string-length(id('Controller')/$tInbox/rsrv_wizard/obj[@obj_type='resource']/@obj_id) = 0)">
<s:with b:target="$tDeck/div/*[@c:editor = 'true' and @c:id='resource']">
<s:setatt c:valid="preset"/>
</s:with>
</s:if>
<s:if b:test="not(@c:mode = 'edit')">
<s:variable b:name="lEarliestEventCreationDate" b:select="s25_format_date(id('Prefs')/$tEarliestEventCreationDate, 'yyyyMMdd')"/>
<s:variable b:name="lToday" b:select="s25_format_date(current-date(), 'yyyyMMdd')"/>
<s:if b:test="number($lEarliestEventCreationDate) gt number($lToday)">
<s:with b:target="$tMessages">
<s:render b:destination="div[@c:id='message']" b:mode="aslastchild">
<div><b>Note:</b> <span>The earliest that you can schedule a new event is</span> <span><s:textnode b:label="{s25_format_date(id('Prefs')/$tEarliestEventCreationDate, id('Prefs')/$tDatePattern)}"/></span></div>
</s:render>
<s:task b:action="show" b:target="."/>
</s:with>
</s:if>
</s:if>
<s:if b:test="@c:mode = 'edit'">
<s:task b:action="settext" b:target="$tReference" b:value="{concat('Event Reference:',' ', $tEvent/r25:event_locator)}"/>
<s:task b:action="show" b:target="$tReference"/>
<s:task b:test="$tEvent//r25:space_pref" b:action="show" b:target="$tPrefStatusSpace"/>
<s:task b:test="$tEvent//r25:resource_pref" b:action="show" b:target="$tPrefStatusResource"/>
<s:task b:action="set" b:target=".//s25:rsrv_wiz_crumb/@b:disabled" b:value="false"/>
<s:task b:action="trigger" b:event="ResetDraftInfo" b:target="."/>
<s:for-each b:target="$tProfile/r25:reservation">
<s:sequential><s:lock>
<s:render b:destination="$tInbox/occurrences" b:mode="aslastchild">
<occurrence event_start_dt="{substring($_target/r25:event_start_dt,1,19)}" state="{string($_target/r25:reservation_state)}"><s:textnode b:label="{string($_target/r25:rsrv_comments)}"/></occurrence>
</s:render>
</s:lock></s:sequential>
</s:for-each>
</s:if>
<s:if b:test="@c:mode = 'clone'">
<s:task b:action="trigger" b:event="ResetDraftInfo" b:target="."/>
<s:for-each b:target="$tProfile/r25:reservation">
<s:sequential><s:lock>
<s:render b:destination="$tInbox/occurrences" b:mode="aslastchild">
<occurrence event_start_dt="{substring($_target/r25:event_start_dt,1,19)}" state="{string($_target/r25:reservation_state)}"><s:textnode b:label="{string($_target/r25:rsrv_comments)}"/></occurrence>
</s:render>
</s:lock></s:sequential>
</s:for-each>
<s:with b:target="$tDeck/div/*[@c:id='datetime']">
<s:setatt c:valid="clone"/>
</s:with>			
<s:if b:test="count($tDataXml//r25:space) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='space']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>
<s:if b:test="count($tDataXml//r25:resource) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='resource']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>
<s:if b:test="string-length($tDataXml//r25:event_type_id) &gt; 0 and string($tDataXml//r25:event_type_id ne '-1')">
<s:with b:target="$tDeck/div/*[@c:id='type']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>		
<s:if b:test="count($tDataXml//r25:organization[r25:primary='T']) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='sponsor']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>
<s:if b:test="count($tDataXml//r25:organization[not(r25:primary='T')]) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='additional_sponsor']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>
<s:if b:test="count($tDataXml//r25:role) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='contact']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>		
<s:if b:test="string-length($tDataXml//r25:event_name) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='name']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>		
<s:if b:test="string-length($tDataXml/r25:events/r25:event/r25:state) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='state']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>		
<s:if b:test="string-length($tDataXml//r25:event_title) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='title']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>		
<s:if b:test="string-length($tDataXml//r25:text[r25:text_type_id = '1']) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='description']">
<s:setatt c:valid="clone"/>
</s:with>
</s:if>
<s:if b:test="string-length($tDataXml//r25:profile_comments) &gt; 0">
<s:with b:target="$tDeck/div/*[@c:id='comment']">
<s:setatt c:valid="clone"/>
</s:with>			
</s:if>		
<s:variable b:name="lEarliestEventCreationDate" b:select="s25_format_date(id('Prefs')/$tEarliestEventCreationDate, 'yyyyMMdd')"/>
<s:variable b:name="lCloneStartDate" b:select="replace($tEvent/r25:start_date,'-','')"/>
<s:if b:test="number($lEarliestEventCreationDate) gt number($lCloneStartDate)">
<s:with b:target="$tDeck/div/*[@c:editor = 'true' and @c:id='datetime']">
<s:setatt c:valid="invalid"/>
</s:with>
</s:if>
</s:if>

<s:task b:action="show" b:target="$tCrumbContainer/div[@c:thread = $lThread]"/>
<s:task b:test="not(string-length(@c:thread)=0)" b:action="trigger" b:event="SetWizThread" b:target="."/>
<s:task b:action="trigger" b:event="ResetTitle" b:target="."/>
<s:task b:action="trigger" b:event="ResetCrumbs" b:target="."/>
<s:variable b:name="lEvType" b:scope="local" b:select="$tDataXml/r25:events/r25:event/r25:event_type_id"/>
<s:variable b:name="lTypeAtrbsUrl" b:scope="local" b:select="concat(id('Config')/$tWsPrefix,'evtype.xml', '?type_id=',$lEvType,'&amp;scope=extended', '&amp;include=attributes+rules')"/>
<s:variable b:name="tTypeAtrbs" b:scope="tag" b:select=""/>
<s:task b:action="load" b:url="{$lTypeAtrbsUrl}" b:method="GET" b:destination="$tTypeAtrbs" b:mode="replace" b:showloading="false"/>
<s:task b:action="string2xml" b:variable="$tTypeAtrbs"/>
<s:choose>
<s:when b:test="count($tDataXml/r25:events/wizard/threads//editor[@name='ev_custom_attr']/required_attributes/attribute[@id = $tTypeAtrbs//r25:event_types/r25:event_type/r25:custom_attributes/r25:attribute_id]) &gt; 0">
<s:with b:target="$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='ev_custom_attr']/div[@c:id='flag']">
<s:setatt class="s25rsrvwiz-crumb-flag-required"/>
</s:with>
<s:with b:target="$tDeck/div/*[@c:editor='true'][@c:id='ev_custom_attr']">
<s:setatt c:required="true"/>
</s:with>
</s:when>
<s:otherwise>
<s:with b:target="$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='ev_custom_attr']/div[@c:id='flag']">
<s:setatt class="s25rsrvwiz-crumb-flag"/>
</s:with>
<s:with b:target="$tDeck/div/*[@c:editor='true'][@c:id='ev_custom_attr']">
<s:task b:action="remove" b:target="@c:required"/>
</s:with>
</s:otherwise>
</s:choose>
<s:task b:action="trigger" b:event="UpdateRequiredStatus" b:target="."/>
</s:event>
<s:event b:on="SetWizThread">
<s:task b:action="assign" b:target="$tThread" b:scope="tag" b:select="@c:thread"/>
<s:variable b:name="lThread" b:scope="local" b:select="@c:thread"/>
<s:task b:action="trigger" b:event="Reset" b:target="$tDeck/div"/>
<s:variable b:name="lThreadData" b:scope="local" b:select="$tPrefXml/wizard/threads/thread[@name = $lThread]"/>
<s:if b:test="count($lThreadData//editor[@name='registration']) &gt; 0">
<s:task b:action="assign" b:target="$tRegistrationExists" b:select="'T'"/>
</s:if>
</s:event>
<s:event b:on="PresetPopulate">
<s:render b:mode="replacechildren" b:destination="$tInbox/reserve">
<obj obj_type="{id('Controller')/$tInbox/selected_obj/@obj_type}" obj_id="{id('Controller')/$tInbox/selected_obj/@obj_id}" mode="{id('Controller')/$tInbox/selected_obj/@mode}" start_dt="{id('Controller')/$tInbox/selected_obj/@start_dt}" start_time="{id('Controller')/$tInbox/selected_obj/@start_time}" end_time="{id('Controller')/$tInbox/selected_obj/@end_time}" start_hr="{id('Controller')/$tInbox/selected_obj/@start_hr}" headcount="{id('Controller')/$tInbox/selected_obj/@headcount}"/>
</s:render>
<s:with b:target="id('Controller')/$tInbox/selected_obj">
<s:setatt obj_type="" obj_id="" mode="" start_dt="" start_time="" end_time="" start_hr="" headcount=""/>
</s:with>
<s:if b:test="string($tInbox/reserve/obj/@obj_type) = 'space' or string($tInbox/reserve/obj/@obj_type) = 'resource'">
<s:variable b:name="lReserveObjXml" b:select=""/>
<s:variable b:name="lReserveType" b:select="string($tInbox/reserve/obj/@obj_type)"/>
<s:variable b:name="lReserveId" b:select="string($tInbox/reserve/obj/@obj_id)"/>
<s:task b:action="load" b:method="GET" b:url="{concat(id('Config')/$tWsPrefix, $lReserveType, '.xml',  '?', $lReserveType, '_id=', $lReserveId,  '&amp;scope=minimal')}" b:destination="$lReserveObjXml" b:mode="replacechildren"/>
<s:task b:action="string2xml" b:variable="$lReserveObjXml"/>
<s:with b:target="$tInbox/reserve/obj">
<s:choose>
<s:when b:test="$lReserveType = 'space'">
<s:setatt obj_name="{$lReserveObjXml//r25:space_name}" obj_formal_name="{$lReserveObjXml//r25:formal_name}"/>
</s:when>
<s:when b:test="$lReserveType = 'resource'">
<s:setatt obj_name="{$lReserveObjXml//r25:resource_name}"/>
</s:when>
</s:choose>
</s:with>
<s:variable b:scope="local" b:name="PresetLocation" b:select="$tInbox/reserve/obj[@obj_type='space']"/>
<s:if b:test="count($PresetLocation) gt 0">
<s:with b:target="./$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='space']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{concat(' ', $PresetLocation[1]/@obj_name)}"/></div>
</s:render>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-preset"/>
</s:with>
<s:variable b:name="lSpaceID" b:select="string($PresetLocation/@obj_id)"/>
<s:variable b:name="lSpaceName" b:select="string($PresetLocation/@obj_name)"/>
<s:task b:action="trigger" b:event="CreatePendingSpaceRsrv" b:target="$tAvailabilityControl"/>
</s:if>
<s:variable b:scope="local" b:name="PresetResource" b:select="$tInbox/reserve/obj[@obj_type='resource']"/>
<s:if b:test="count($PresetResource) gt 0">
<s:with b:target="./$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='resource']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{concat(' ', $PresetResource[1]/@obj_name)}"/></div>
</s:render>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-preset"/>
</s:with>
<s:variable b:name="lResourceID" b:select="string($PresetResource/@obj_id)"/>
<s:variable b:name="lResourceName" b:select="string($PresetResource/@obj_name)"/>
<s:variable b:name="lResourceQty" b:select="1"/>
<s:task b:action="trigger" b:event="CreatePendingResourceRsrv" b:target="$tAvailabilityControl"/>
</s:if>
</s:if>
<s:variable b:scope="tag" b:name="PresetDate" b:select="string(@c:start_dt)"/>
<s:task b:test="not($PresetDate='')" b:action="assign" b:target="PresetDate" b:select="number($PresetDate)"/>
<s:variable b:scope="tag" b:name="PresetStartTime" b:select="string(@c:start_time)"/>
<s:task b:test="not($PresetStartTime='')" b:action="assign" b:target="PresetStartTime" b:select="number($PresetStartTime)"/>
<s:variable b:scope="tag" b:name="PresetEndTime" b:select="string(@c:end_time)"/>
<s:task b:test="not($PresetEndTime='')" b:action="assign" b:target="PresetEndTime" b:select="number($PresetEndTime)"/>
<s:variable b:scope="tag" b:name="PresetHour" b:select="string(@c:start_hr)"/>
<s:task b:test="not($PresetHour='')" b:action="assign" b:target="PresetHour" b:select="number($PresetHour)"/>
<s:if b:test="not($PresetDate='')">
<s:variable b:name="dateFormat" b:scope="local" b:select="string(id('Prefs')/$tDatePattern)"/>
<s:script><![CDATA[

var dateFormat = _vars['dateFormat'][0];
var presetDate = _vars['PresetDate'][0];
var rawDate = new Date(Number(_vars['PresetDate'][0]));
var formattedDate = s25_format_date(rawDate, dateFormat);
bpc.setVariable('PresetDate',[formattedDate],'tag', _current);

]]></s:script>
<s:with b:target="./$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='datetime']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{concat(' ', $PresetDate)}"/></div>
</s:render>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-preset"/>
</s:with>
<s:variable b:name="timeFormat" b:scope="local" b:select="string(id('Prefs')/$tTimePattern)"/>
<s:variable b:name="hourFormat" b:scope="local" b:select="string(id('Prefs')/$tTimeDisplay)"/>
<s:choose>
<s:when b:test="not($PresetStartTime='')">
<s:script><![CDATA[

var presetStartTime = parseInt(_vars['PresetStartTime'][0]);
var rawTime = new Date();
rawTime.setHours(Math.floor(presetStartTime / 100), presetStartTime % 100, 0, 0);
var timePattern = _vars['timeFormat'][0] + (_vars['hourFormat'][0] == 12 ? ' a' : '');
var formattedTime = s25_format_date(rawTime, timePattern);
bpc.setVariable('PresetStartTime',[formattedTime],'tag', _current);

]]></s:script>
<s:with b:target="./$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='datetime']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{concat(' ', $PresetDate, ' ', $PresetStartTime)}"/></div>
</s:render>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-preset"/>
</s:with>
<s:if b:test="not($PresetEndTime='')">
<s:script><![CDATA[

var presetEndTime = parseInt(_vars['PresetEndTime'][0]);
var rawTime = new Date();
rawTime.setHours(Math.floor(presetEndTime / 100), presetEndTime % 100, 0, 0);
var timePattern = _vars['timeFormat'][0] + (_vars['hourFormat'][0] == 12 ? ' a' : '');
var formattedTime = s25_format_date(rawTime, timePattern);
bpc.setVariable('PresetEndTime',[formattedTime],'tag', _current);

]]></s:script>
<s:with b:target="./$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='datetime']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{concat(' ', $PresetDate, ' ', $PresetStartTime, ' - ', $PresetEndTime)}"/></div>
</s:render>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-preset"/>
</s:with>
</s:if>
</s:when>
<s:otherwise>
<s:script><![CDATA[

var timePattern = _vars['timeFormat'][0] + (_vars['hourFormat'][0] == 12 ? ' a' : '');
var presetHour = _vars['PresetHour'][0];
if (presetHour == '') {
var now = new Date();
presetHour = now.getHours();
} else {
presetHour = parseInt(presetHour);
}
var startHour = (new Date()).setHours(presetHour, 0, 0, 0);
bpc.setVariable('PresetStartTime',[s25_format_date(startHour, timePattern)],'tag', _current);
var endHour = (new Date(startHour));
endHour.setHours(endHour.getHours() + 1);
bpc.setVariable('PresetEndTime',[s25_format_date(endHour, timePattern)],'tag', _current);

]]></s:script>
<s:with b:target="./$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='datetime']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{concat(' ', $PresetDate, ' ', $PresetStartTime, ' - ', $PresetEndTime)}"/></div>
</s:render>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-preset"/>
</s:with>
</s:otherwise>
</s:choose>
<s:variable b:name="lRsrvStartDate" b:select=""/>
<s:variable b:name="lRsrvEndDate" b:select=""/>
<s:script><![CDATA[

var sPat = 'yyyy-MM-ddThh24:mm:00';
var presetDate = _vars['PresetDate'][0];
var presetStartTime = _vars['PresetStartTime'][0];
var presetEndTime = _vars['PresetEndTime'][0];
var startDateTime = new Date(presetDate + ' ' + presetStartTime);
bpc.setVariable('lRsrvStartDate',[s25_format_date(startDateTime,sPat)],'local');
var endDateTime = new Date(presetDate + ' ' + presetEndTime);
bpc.setVariable('lRsrvEndDate',[s25_format_date(endDateTime,sPat)],'local');

]]></s:script>
<s:task b:action="settext" b:target="$tProfile/r25:init_start_dt" b:value="{$lRsrvStartDate}"/>
<s:task b:action="settext" b:target="$tProfile/r25:init_end_dt" b:value="{$lRsrvEndDate}"/>
<s:task b:action="settext" b:target="$tProfile//r25:event_start_dt" b:value="{$lRsrvStartDate}"/>
<s:task b:action="settext" b:target="$tProfile//r25:event_end_dt" b:value="{$lRsrvEndDate}"/>
<s:task b:action="settext" b:target="$tEvent/r25:start_date" b:value="{substring($lRsrvStartDate,1,10)}"/>
<s:task b:action="settext" b:target="$tEvent/r25:end_date" b:value="{substring($lRsrvEndDate,1,10)}"/>
<s:task b:action="trigger" b:event="OutputCurrentXmlData"/>
<s:task b:action="assign" b:scope="tag" b:target="$tHasDates" b:select="'T'"/>
</s:if>
<s:variable b:scope="local" b:name="PresetHeadcount" b:select="string(@c:headcount)"/>
<s:if b:test="string-length($PresetHeadcount) gt 0">
<s:with b:target="./$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='headcount']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{@c:crumb_title}"/>: </div> 
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{concat(' ', 'Expected Head Count', ' ', $PresetHeadcount)}"/></div>
</s:render>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-preset"/>
</s:with>
</s:if>
</s:event>
<s:event b:on="ResetXmlData">
<s:choose>

<s:when b:test="@c:mode = 'reserve'">
<s:task b:action="trigger" b:event="GetTemplate" b:target="."/>
</s:when>
<s:when b:test="@c:mode = 'clone'">
<s:task b:action="trigger" b:event="GetEvent" b:target="."/>
<s:task b:action="trigger" b:event="Clone" b:target="."/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="GetEvent" b:target="."/>
<s:task b:action="trigger" b:event="CheckData" b:target="."/>
</s:otherwise>
</s:choose>
<s:if b:test="not(@c:mode='reserve' or @c:mode='clone')">
<s:choose>
<s:when b:test="id('FLS_REP_LIST') = 'N'">
<s:task b:action="hide" b:target="$tPrintIcon"/>
</s:when>
<s:otherwise>
<s:task b:action="show" b:target="$tPrintIcon"/>
</s:otherwise>
</s:choose>
</s:if>
</s:event>
<s:event b:on="ResetDraftInfo">
<s:variable b:name="lSavedState" b:select="string($tDataXml/r25:events/r25:event/r25:state)"/>
<s:if b:test="$lSavedState = '0'">
<s:if b:test="not(string-length($tEvent/r25:event_text[r25:text_type_id = '8']/r25:text) = 0)">
<s:sequential><s:lock>
<s:variable b:name="lDraftInfo" b:select="normalize-space(string($tEvent/r25:event_text[r25:text_type_id = '8']/r25:text))"/>
<s:script><![CDATA[

var sDraftInfo = _vars['lDraftInfo'][0];
sDraftInfo = sDraftInfo.replace(/&lt;/g, '<');
sDraftInfo = sDraftInfo.replace(/&gt;/g, '>');
bpc.setVariable('lDraftInfo', [sDraftInfo]);

]]></s:script>
<s:task b:action="string2xml" b:variable="$lDraftInfo"/>
<s:variable b:name="lReserveInfo" b:select="$lDraftInfo/reserve"/>
<s:task b:action="xml2string" b:variable="$lReserveInfo"/>
<s:task b:action="remove" b:target="$tInbox/reserve"/>
<s:script><![CDATA[

var sReserveInfo = _vars['lReserveInfo'][0];
bpc.render(sReserveInfo, 'aslastchild', '$tInbox', _current);

]]></s:script>
</s:lock></s:sequential>
</s:if>
</s:if>
</s:event>
<s:event b:on="ResetTitle">
<s:task b:action="trigger" b:event="UpdateTitle" b:target="."/>
</s:event>
<s:event b:on="ResetCrumbs">
<s:if b:test="not(@c:mode = 'reserve')">
<s:task b:action="trigger" b:event="Reset" b:target="$tCrumbContainer/div/s25:rsrv_wiz_crumb"/>
<s:with b:target="$tTimestamp">
<s:variable b:name="lDateTimePattern" b:select="concat(id('Prefs')/$tDatePattern,' ',id('Prefs')/$tTimePattern)"/>
<s:task b:test="id('Prefs')/$tTimeDisplay = 12" b:action="assign" b:target="$lDateTimePattern" b:select="concat($lDateTimePattern, 'a')"/>
<s:task b:action="settext" b:target="." b:value="{concat('Last Saved:',' ',  s25_format_date(string($tEvent/r25:last_mod_dt/text()),  $lDateTimePattern) )}" b:test="not(@c:mode='clone')"/>
<s:task b:action="show" b:target="."/>
</s:with>
<s:variable b:name="lSavedState" b:select="string($tDataXml/r25:events/r25:event/r25:state)"/>
<s:if b:test="$lSavedState = '0'">
<s:if b:test="count($tInbox/reserve/obj[@obj_type='space']) gt 0">
<s:variable b:name="lSpaceNames" b:select="string-join($tInbox/reserve/obj[@obj_type='space']/@obj_name, '; ')"/>
<s:variable b:name="lSpaceLabel" b:select="normalize-space($tCrumbContainer//div[@c:name='space']/span)"/>
<s:with b:target="$tCrumbContainer//div[@c:name='space']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{$lSpaceLabel}"/></div>
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{$lSpaceNames}"/></div>
</s:render>
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-enabled"/>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-visited"/>
</s:with>
</s:if>
<s:if b:test="count($tInbox/reserve/obj[@obj_type='resource']) gt 0">
<s:variable b:name="lResourceNames" b:select="string-join($tInbox/reserve/obj[@obj_type='resource']/@obj_name, '; ')"/>
<s:variable b:name="lResourceLabel" b:select="normalize-space($tCrumbContainer//div[@c:name='resource']/span)"/>
<s:with b:target="$tCrumbContainer//div[@c:name='resource']">
<s:render b:destination="span[@c:id='label']" b:mode="replacechildren">
<div class="s25rsrvwiz-crumb-label-text"><s:textnode b:label="{$lResourceLabel}"/></div>
<div class="s25rsrvwiz-crumb-label-value"><s:textnode b:label="{$lResourceNames}"/></div>
</s:render>
<s:task b:action="removeclass" b:value="s25rsrvwiz-crumb-enabled"/>
<s:task b:action="addclass" b:value="s25rsrvwiz-crumb-visited"/>
</s:with>
</s:if>
</s:if>
</s:if>
</s:event>
<s:event b:on="SetProfile">
<s:variable b:name="lProfileID" b:scope="local" b:select="@c:profile_id"/>
<s:task b:action="assign" b:target="$tEvent" b:scope="local" b:select="$tDataXml/r25:events/r25:event"/>
<s:choose>
<s:when b:test="$tEvent/@status='new'">
<s:task b:action="assign" b:target="$tProfile" b:scope="tag" b:select="$tEvent/r25:profile[@status = 'new'][1]"/>
<s:task b:action="assign" b:target="$tRsrv" b:scope="tag" b:select="$tProfile/r25:reservation[@status='new'][1]"/>
<s:setatt c:profile_id="new_event"/>
</s:when>
<s:otherwise>
<s:choose>
<s:when b:test="@c:profile_id='new'">
<s:task b:action="assign" b:target="$tProfile" b:scope="tag" b:select="$tEvent/r25:profile[@status='new'][1]"/>
<s:task b:action="assign" b:target="$tRsrv" b:scope="tag" b:select="$tProfile/r25:reservation[@status='new'][1]"/>
</s:when>
<s:when b:test="not(string-length($lProfileID) = 0) and $tEvent/r25:profile[r25:profile_id = $lProfileID]">
<s:task b:action="assign" b:target="$tProfile" b:scope="tag" b:select="$tEvent/r25:profile[normalize-space(child::r25:profile_id) = $lProfileID]"/>
<s:task b:action="assign" b:target="$tRsrv" b:scope="tag" b:select="$tProfile/r25:reservation[@status='est'][1]"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$tProfile" b:scope="tag" b:select="$tEvent/r25:profile[@status='est'][1]"/>
<s:task b:action="assign" b:target="$tRsrv" b:scope="tag" b:select="$tProfile/r25:reservation[@status='est'][1]"/>
<s:setatt c:profile_id="{$tProfile/r25:profile_id}"/>
</s:otherwise>
</s:choose>
</s:otherwise>
</s:choose>
<s:if b:test="count($tProfile/r25:reservation) gt 1 or count($tInbox/occurrences/occurrence) gt 1">
<s:task b:action="assign" b:target="$tHasRepeats" b:scope="tag" b:select="'T'"/>
</s:if>
</s:event>
<s:event b:on="CardSelect">
<s:task b:action="assign" b:target="$tCard" b:scope="tag" b:select="$tDeck/div[@b:state='selected']"/>
<s:variable b:name="lCardPosition" b:scope="local" b:select="$tCard/@c:pos"/>
<s:with b:target="$tCrumbContainer/div">
<s:setatt b:singular="strict"/>
<s:task b:test="ancestor::div[@b:behavior='LayoutTabboxBuffer']/@b:state='selected'" b:action="select" b:target="s25:rsrv_wiz_crumb[@c:pos = $lCardPosition]"/>
</s:with>
<s:if b:test="$tCard/@c:save='true'">
<s:setatt c:allow_save="true"/>
</s:if>
<s:task b:action="trigger" b:event="UpdateButtons" b:target="."/>
<s:task b:action="trigger" b:event="UpdateCrumbs" b:target="."/>
<s:task b:action="trigger" b:event="UpdateRequiredStatus"/>
</s:event>
<s:event b:on="EditorConstruct">
<s:variable b:name="pElm" b:scope="local" b:select="."/>
<s:variable b:name="pHandler" b:scope="local" b:select="'ObserveEditors'"/>
<s:task b:action="trigger" b:event="RegisterObserver" b:target="$pEditor"/>
</s:event>
<s:event b:on="ObserveEditors">
<s:variable b:name="lEd" b:scope="local" b:select="S25Observer_getPublisher()"/>
<s:if b:test="$lEd">
<s:variable b:name="pEvent" b:scope="local" b:select="$lEd/@c:raised_event"/>
<s:task b:action="trigger" b:event="NotifyObservers" b:target="."/>
</s:if>
</s:event>
<s:event b:on="UpdateCrumbs">
<s:task b:action="removeclass" b:target="$tTable" b:value="RsrvWizConfirm"/>
<s:choose>
<s:when b:test="$tCard/@c:modal='true'">
<s:task b:action="addclass" b:target="$tTable" b:value="RsrvWizConfirm"/>
</s:when>
<s:when b:test="not(@c:mode='edit')">
<s:task b:action="enable" b:target="$tCrumbContainer/div/s25:rsrv_wiz_crumb"/>
</s:when>
</s:choose>
</s:event>
<s:event b:on="UpdateButtons">
<s:choose>
<s:when b:test="$tCard/@c:modal='true'">
<s:task b:action="hide" b:target="$tButtonContainer"/>
</s:when>
<s:otherwise>
<s:task b:action="show" b:target="$tButtonContainer"/>
<s:fxstyle b:time="1"/>
<s:choose>
<s:when b:test="count($tCard/preceding-sibling::div[@b:behavior='S25RsrvWizCard' and not(@c:modal='true')]) gt 0">
<s:with b:target="$tPreviousButton">
<s:task b:action="enable"/>
<s:task b:action="removeclass" b:value="disabled"/>
</s:with>
</s:when>
<s:otherwise>
<s:with b:target="$tPreviousButton">
<s:task b:action="disable"/>
<s:task b:action="addclass" b:value="disabled"/>
</s:with>
</s:otherwise>
</s:choose>
<s:choose>
<s:when b:test="count($tCard/following-sibling::div[@b:behavior='S25RsrvWizCard' and not(@c:modal='true')]) gt 0">
<s:with b:target="$tNextButton">
<s:task b:action="enable"/>
<s:task b:action="removeclass" b:value="disabled"/>
</s:with>
</s:when>
<s:otherwise>
<s:with b:target="$tNextButton">
<s:task b:action="disable"/>
<s:task b:action="addclass" b:value="disabled"/>
</s:with>
</s:otherwise>
</s:choose>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="UpdateTitle">
<s:if b:test="string-length($tEvent/@status) gt 0">
<s:variable b:name="lTxt" b:scope="local"/>
<s:choose>
<s:when b:test="@c:mode = 'edit'">
<s:task b:action="assign" b:target="$lTxt" b:scope="local" b:select="concat('Editing Event:', ' ', $tEvent/r25:event_name)"/>
<s:if b:test="count($tEvent/r25:profile) gt 1">
<s:task b:action="assign" b:target="$lTxt" b:scope="local" b:select="concat($lTxt, ' (Reservation: ', $tProfile/r25:profile_name, ')')"/>
</s:if>
<s:setatt c:title="{$lTxt}"/>
</s:when>
<s:when b:test="not($tEvent/r25:event_name = '') and not(upper-case($tEvent/r25:event_name) = concat('EVENT_', $tEvent/r25:event_id))">
<s:task b:action="assign" b:target="$lTxt" b:scope="local" b:select="concat('Creating Event:', ' ', $tEvent/r25:event_name )"/>
<s:setatt c:title="{$lTxt}"/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$lTxt" b:scope="local" b:select="concat('Creating Event: Untitled #', id('Controller')/$tNewRsrvCount)"/>
<s:setatt c:title="{$lTxt}"/>
</s:otherwise>
</s:choose>
<s:lock b:target="$tTitle">
<s:render b:destination="$tTitle" b:mode="replacechildren">
<s:textnode b:label="{$lTxt}"/>
</s:render>
</s:lock>
<s:task b:action="assign" b:target="$tName" b:scope="tag" b:select="$lTxt"/>
<s:variable b:scope="local" b:name="rsrvwizPurpose" b:select="string(@c:purpose)"/>
<s:with b:target="id('LayoutMgr')/$tSubTabbar/b:deck/div[@c:purpose='rsrvwiz']//a[@c:obj_id = $rsrvwizPurpose]">
<s:task b:action="settext" b:value="{$lTxt}"/>
</s:with>
<s:with b:target="id('LayoutMgr')/$tSubTabbar/b:deck/div[@c:purpose='rsrvwiz']//b:infobox/div[@c:obj_id = $rsrvwizPurpose]">
<s:task b:action="settext" b:value="{$lTxt}"/>
<s:task b:action="set" b:target="@c:obj_name" b:value="{$lTxt}"/>
</s:with>
<s:with b:target="id('subtabbar-history')/span[@c:obj_id = $rsrvwizPurpose]">
<s:task b:action="set" b:target="@c:obj_name" b:value="{$lTxt}"/>
</s:with>
<s:variable b:name="pEvent" b:scope="local" b:select="'Change'"/>
<s:task b:action="trigger" b:event="NotifyObservers" b:target="."/>
<s:task b:action="trigger" b:event="UpdateRsrvWizTabs" b:target="id('layout-subtabbar-rsrvwiz')/s25:subtabbar"/>
</s:if>
</s:event>
<s:event b:on="UpdateRequiredStatus">
<s:variable b:name="lHeadcountRequired" b:scope="local" b:select="'false'"/>
<s:if b:test="$tProfile/r25:expected_count/@required = 'T' or  $tProfile/r25:registered_count/@required = 'T'">
<s:task b:action="assign" b:target="$lHeadcountRequired" b:select="'true'"/>
</s:if>
<s:if b:test="$lHeadcountRequired = 'true'">
<s:with b:target="$tDeck/div/*[@c:editor='true' and @c:id='headcount']">
<s:setatt c:required="true"/>		
</s:with>
<s:with b:target="$tCrumbContainer//s25:rsrv_wiz_crumb/div/div[@c:name='headcount']/div[@c:id='flag']">
<s:setatt class="s25rsrvwiz-crumb-flag-required"/>
</s:with>
</s:if>
<s:variable b:name="lRequiredEditors" b:select="$tDeck/div/*[@c:editor='true' and @c:required='true']"/>
<s:task b:action="assign" b:scope="tag" b:target="$tInvalidEditors" b:select="$tDeck/div/*[@c:editor='true' and (@c:required='true' or (@c:id='description' and @c:init='1')) and (not(@c:init='1') or @c:valid='false') and not(@c:valid = 'preset')]"/>
<s:if b:test="@c:mode = 'clone'">
<s:task b:action="assign" b:scope="tag" b:target="$tInvalidEditors" b:select="$tDeck/div/*[@c:editor='true' and (@c:required='true' or @c:id='description') and ((not(@c:init='1') and not(@c:valid='clone')) or @c:valid='false')]"/>
</s:if>
<s:if b:test="@c:mode = 'edit'">
<s:task b:action="assign" b:scope="tag" b:target="$tInvalidEditors" b:select="$tDeck/div/*[@c:editor='true' and @c:valid='false']"/>
</s:if>
<s:variable b:name="lRequiredStatusDisplay" b:select="$tStatus//div[@c:id='status_required']"/>
<s:choose>
<s:when b:test="count($lRequiredEditors) = 0">
<s:with b:target="$lRequiredStatusDisplay">
<s:task b:action="hide"/>
</s:with>
</s:when>
<s:when b:test="count($tInvalidEditors) = 0">
<s:with b:target="$lRequiredStatusDisplay">
<s:task b:action="show"/>
<s:task b:action="settext" b:value="All Required Fields Complete"/>
<s:setatt class="icon-checkmark"/>
</s:with>
</s:when>
<s:when b:test="count($tInvalidEditors) = 1">
<s:with b:target="$lRequiredStatusDisplay">
<s:task b:action="show"/>
<s:task b:action="settext" b:value="1 Required Field Remaining"/>
<s:setatt class="icon-required"/>
</s:with>
</s:when>
<s:otherwise>
<s:with b:target="$lRequiredStatusDisplay">
<s:task b:action="show"/>
<s:task b:action="settext" b:value="{concat(count($tInvalidEditors), ' ', 'Required Fields Remaining')}"/>
<s:setatt class="icon-required"/>
</s:with>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="GetTemplate">
<s:variable b:name="lMsg" b:scope="local" b:select="'Loading Event Template...'"/>
<s:with b:target="id('bxLoading')">
<s:task b:action="settext" b:target="$tMain" b:value="{$lMsg}"/>
<s:task b:action="trigger" b:event="ShowLoading" b:target="."/>
</s:with>
<s:variable b:name="lQuery" b:select="'events.xml'"/>
<s:choose>
<s:when b:test="string(id('Pref_config_BPE_event_get')) = 'configurations'">
<s:variable b:name="lSecurityGroup" b:select="tokenize(string(id('WSSessionMgr')/@c:security-group), ',')[1]"/>

<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'?security_group=',$lSecurityGroup, '&amp;otransform=',id('Config')/$tXslPrefix,'s25-event-wiz/custom_configurations.xsl')"/>
</s:when>
<s:when b:test="string-length(id('Pref_config_BPE_event_get')) &gt; 0">
<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'?otransform=',id('Pref_config_BPE_event_get'))"/>
</s:when>
</s:choose>
<s:setatt c:query="{$lQuery}"/>
<s:variable b:name="lData" b:scope="local" b:select="'&lt;?xml version=&#34;1.0&#34;?&gt;'"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="POST" b:url="{concat(id('Config')/$tWsPrefix,$lQuery)}" b:data="{$lData}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="assign" b:target="$tHttpStatus" b:scope="tag" b:select="number(id('HttpMgr')/$tStatus)"/>
<s:task b:action="assign" b:target="$tDataStr" b:scope="tag" b:select="string(id('HttpMgr')/$tResponseText)"/>
<s:if b:test="starts-with($tDataStr,'&lt;?')">
<s:task b:action="trigger" b:event="DataToXml" b:target="."/>
</s:if>
<s:if b:test="not($tDataXml/r25:events/wizard/editors/editor[@name='confirm'])">
<s:variable b:name="lConfirmationEditor">
<editor name="confirm" title="Confirm" control="s25:rsrv_wiz_confirm"/>
</s:variable>
<s:task b:action="string2xml" b:variable="$lConfirmationEditor"/>
<s:task b:action="copy" b:source="$lConfirmationEditor/editor" b:destination="$tDataXml/r25:events/wizard/editors" b:mode="aslastchild"/>
</s:if>
<s:setatt c:event_id="{$tDataXml/r25:events/r25:event/r25:event_id}"/>
<s:task b:action="trigger" b:event="SetProfile" b:target="."/>
<s:task b:action="assign" b:target="$tInitState" b:select="string($tEvent/r25:state)"/>
<s:variable b:name="pEvent" b:scope="local" b:select="'TemplateLoadFailure'"/>
<s:if b:test="$tHttpStatus = 201 and exists($tDataXml//r25:event) and exists($tDataXml//wizard)">
<s:task b:action="assign" b:target="$pEvent" b:scope="local" b:select="'TemplateLoadSuccess'"/>
</s:if>
<s:task b:action="trigger" b:event="HideLoading" b:target="id('bxLoading')"/>
<s:if b:test="$pEvent = 'TemplateLoadFailure'">
<s:task b:action="alert" b:value="There was an error loading the event template. Events cannot be created."/>
<s:task b:action="trigger" b:event="Cancel"/>
</s:if>
</s:event>
<s:event b:on="GetEvent">
<s:variable b:name="lMsg" b:scope="local" b:select="'Loading Event'"/>
<s:with b:target="id('bxLoading')">
<s:task b:action="settext" b:target="$tMain" b:value="{$lMsg}"/>
<s:task b:target="." b:action="trigger" b:event="ShowLoading"/>
</s:with>
<s:variable b:name="lQuery" b:scope="local" b:select="concat('event.xml')"/>
<s:choose>
<s:when b:test="string(id('Pref_config_BPE_event_get')) = 'configurations'">
<s:variable b:name="lSecurityGroup" b:select="tokenize(string(id('WSSessionMgr')/@c:security-group), ',')[1]"/>
<s:variable b:name="lMode" b:select="'edit'"/>
<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'?security_group=',$lSecurityGroup, '&amp;mode=',$lMode,  '&amp;otransform=',id('Config')/$tXslPrefix,'s25-event-wiz/custom_configurations.xsl')"/>
<s:task b:test="@c:mode = 'clone'" b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'&amp;clone=true')"/>
</s:when>
<s:when b:test="string-length(id('Pref_config_BPE_event_get')) &gt; 0">
<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'?otransform=',id('Pref_config_BPE_event_get'))"/>
</s:when>
</s:choose>
<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'&amp;event_id=',@c:event_id)"/>
<s:choose>
<s:when b:test="@c:mode = 'clone'">
<s:setatt c:query="{$lQuery}"/>
</s:when>
<s:otherwise>
<s:setatt c:query="{$lQuery}" c:event_id="NEW"/>
</s:otherwise>
</s:choose>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="GET" b:url="{concat(@c:r25ws_prefix,$lQuery)}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="assign" b:target="$tHttpStatus" b:scope="tag" b:select="number(id('HttpMgr')/$tStatus)"/>
<s:task b:action="assign" b:target="$tDataStr" b:scope="tag" b:select="string(id('HttpMgr')/$tResponseText)"/>
<s:task b:action="trigger" b:event="HideLoading" b:target="id('bxLoading')"/>
<s:if b:test="starts-with($tDataStr,'&lt;?')">
<s:task b:action="trigger" b:event="DataToXml" b:target="."/>
</s:if>
<s:variable b:name="pEvent" b:scope="local" b:select="'LoadFailure'"/>
<s:if b:test="$tHttpStatus = 200 and $tDataXml//r25:event and $tDataXml//wizard">
<s:task b:action="trigger" b:event="SetProfile" b:target="."/>
<s:setatt c:event_id="{$tEvent/r25:event_id}"/>
<s:task b:action="assign" b:target="$tInitState" b:select="string($tEvent/r25:state)"/>
<s:task b:action="assign" b:target="$pEvent" b:scope="local" b:select="'LoadSuccess'"/>
</s:if>
<s:if b:test="$pEvent = 'LoadFailure'">
<s:task b:action="alert" b:value="There was an error loading the event template. The event cannot be edited."/>
<s:task b:action="trigger" b:event="Cancel"/>
</s:if>
<s:if b:test="$pEvent = 'LoadSuccess'">
<s:variable b:name="tType" b:select="'event'"/>
<s:variable b:name="tId" b:select="string($tEvent/r25:event_id)"/>
<s:variable b:name="tName" b:select="string($tEvent/r25:event_name)"/>
<s:task b:action="trigger" b:target="id('RecentlyViewedObjects')" b:event="AddObject" b:async="true"/>
</s:if>
</s:event>
<s:event b:on="Clone">
<s:variable b:name="lData" b:scope="local" b:select=""/>
<s:task b:action="assign" b:target="$lData" b:scope="local" b:select="concat('&lt;?xml version=&#34;1.0&#34;?&gt;',$lData)"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="POST" b:url="{concat(@c:r25ws_prefix,'events.xml')}" b:data="{$lData}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="string2xml" b:variable="$lTxt"/>
<s:task b:action="set" b:target="$tEvent/@id" b:value=""/>
<s:task b:action="settext" b:target="$tEvent/r25:event_id" b:value="{$lTxt//r25:event_id}"/>
<s:setatt c:event_id="{$lTxt//r25:event_id}"/>
<s:task b:action="set" b:target="$tEvent/@status" b:value="new"/>
<s:task b:action="set" b:target="$tEvent//r25:reservation_attendee/@status" b:value="new"/>
<s:task b:action="set" b:target="$tEvent//r25:event_text/@status" b:value="new"/>
<s:task b:action="set" b:target="$tEvent//r25:category/@status" b:value="new"/>
<s:task b:action="set" b:target="$tEvent//r25:role/@status" b:value="new"/>
<s:task b:action="set" b:target="$tEvent//r25:version" b:value="'0'"/>
<s:task b:action="set" b:target="$tProfile/@status" b:value="new"/>
<s:task b:action="set" b:target="$tProfile//r25:reservation/@status" b:value="new"/>
<s:task b:action="set" b:target="$tProfile//r25:resource_reservation/@status" b:value="new"/>
<s:task b:action="set" b:target="$tProfile//r25:space_reservation/@status" b:value="new"/>
<s:task b:action="set" b:target="$tProfile//r25:ad_hoc_datelist/@status" b:value="new"/>
<s:task b:action="settext" b:target="$tProfile/r25:profile_id" b:value=""/>
<s:task b:action="settext" b:target="$tProfile/r25:profile_name" b:value=""/>
<s:task b:action="settext" b:target="$tEvent/r25:parent_id" b:value=""/>
<s:task b:action="settext" b:target="$tEvent/r25:cabinet_id" b:value=""/>
<s:task b:action="settext" b:target="$tEvent/r25:cabinet_name" b:value=""/>
<s:task b:action="settext" b:target="$tEvent/r25:alien_uid" b:value=""/>
<s:task b:action="remove" b:target="$tEvent//r25:role"/>
<s:task b:action="remove" b:target="$tProfile//r25:space_pref"/>
<s:task b:action="remove" b:target="$tProfile//r25:resource_pref"/>
<s:if b:test="string(id('FLS_EVENT_STATE')) = 'N'">
<s:if b:test="not(exists(id('Pref_SpbkEvState')))">
<s:variable b:name="lPrefUrl" b:scope="local" b:select="concat(id('Config')/$tWsPrefix,'preference.xml','?name=SpbkEvState', '&amp;otransform=',id('Config')/$tXslPrefix,'prefs.foal')"/>
<s:task b:action="load" b:method="GET" b:url="{$lPrefUrl}" b:destination="id('PrefsDataIsland')" b:mode="aslastchild"/>
</s:if>
<s:variable b:name="lState" b:scope="local" b:select="string(id('Pref_SpbkEvState'))"/>
<s:task b:action="settext" b:target="$tEvent/r25:state" b:value="{$lState}"/>				
</s:if>
<s:task b:action="settext" b:target="$tEvent//r25:custom_attribute[r25:attribute_id = '-18']/r25:attribute_value" b:value=""/>
<s:task b:action="settext" b:target="$tEvent//r25:custom_attribute[r25:attribute_id = '-17']/r25:attribute_value" b:value=""/>
<s:task b:action="settext" b:target="$tEvent//r25:custom_attribute[r25:attribute_id = '-16']/r25:attribute_value" b:value=""/>
<s:task b:action="settext" b:target="$tEvent//r25:event_text[r25:text_type_id = '5']/r25:text" b:value=""/>		
<s:task b:action="settext" b:target="$tEvent//r25:event_text[r25:text_type_id = '6']/r25:text" b:value=""/>		
<s:task b:action="settext" b:target="$tEvent//r25:event_text[r25:text_type_id = '7']/r25:text" b:value=""/>		
<s:for-each b:target="$tEvent/r25:content">
<s:task b:action="copy" b:source="$_target" b:destination="$tRelatedEventsXml/related_events" b:mode="aslastchild"/>
</s:for-each>
<s:task b:action="remove" b:target="$tEvent//r25:content"/>
<s:task b:action="remove" b:target="$tEvent//r25:space_reservation[r25:space/r25:space_name = '(Private)']"/>
<s:task b:action="remove" b:target="$tEvent//r25:resource_reservation[r25:resource/r25:resource_name = '(Private)']"/>
<s:variable b:name="lOLSForEachXml">
<r25:foreach>
<r25:actions>
</r25:actions>
</r25:foreach>		
</s:variable>
<s:task b:action="string2xml" b:variable="$lOLSForEachXml"/>
<s:variable b:name="lSpaceOLSXml">
<r25:action>
<r25:action_name/>
<r25:request>
<r25:method>GET</r25:method>
<r25:url/>
<r25:request_body/>
</r25:request>
</r25:action>
</s:variable>
<s:task b:action="string2xml" b:variable="$lSpaceOLSXml"/>		
<s:for-each b:target="distinct-values($tEvent//r25:space_reservation/r25:space_id)">
<s:sequential>
<s:lock>
<s:variable b:name="lSpaceID" b:scope="local" b:select="$_target/text()"/>
<s:task b:action="settext" b:target="$lSpaceOLSXml//r25:url" b:value="{concat('space_ols.xml?space_id=',$lSpaceID,'&amp;perm=SCHEDULE')}"/>					
<s:task b:action="settext" b:target="$lSpaceOLSXml//r25:action_name" b:value="{concat('OLS for Space ID ',$lSpaceID)}"/>					
<s:task b:action="copy" b:source="$lSpaceOLSXml/r25:action" b:destination="$lOLSForEachXml/r25:foreach/r25:actions" b:mode="aslastchild"/>
</s:lock>
</s:sequential>					
</s:for-each>
<s:variable b:name="lOLSUrl" b:scope="local" b:select="concat(@c:r25ws_prefix,'foreach.xml')"/>
<s:variable b:name="lOLSXml" b:scope="local" b:select=""/>
<s:task b:action="xml2string" b:variable="$lOLSForEachXml"/>		
<s:task b:action="load" b:url="{$lOLSUrl}" b:method="POST" b:destination="$lOLSXml" b:data="{$lOLSForEachXml}" b:showloading="false">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>			
</s:task>
<s:task b:action="string2xml" b:variable="$lOLSXml"/>
<s:for-each b:target="$lOLSXml//r25:object_permission">
<s:sequential>
<s:lock>
<s:variable b:name="lRemoveSpaceID" b:scope="local" b:select="$_target/r25:object_id"/>				
<s:if b:test="$_target/r25:access_level/text() ne 'F'">
<s:task b:action="remove" b:target="$tEvent//r25:space_reservation[r25:space_id = $lRemoveSpaceID]"/>			
</s:if>
</s:lock>
</s:sequential>
</s:for-each>
<s:task b:action="assign" b:target="$tRsrv" b:select="$tProfile/r25:reservation[1]"/>
<s:task b:action="remove" b:target="$tEvent//r25:approval"/>
<s:task b:action="settext" b:target="$tEvent//r25:event_name" b:value=""/>
<s:task b:action="trigger" b:event="ResetCrumbs" b:target="."/>
<s:task b:action="trigger" b:event="InitiateAvailabilityCheck" b:target="$tAvailabilityControl"/>
</s:event>
<s:event b:on="CheckData">
<s:task b:action="remove" b:target="div[@c:id='message']/*"/>
<s:if b:test="$tEvent//r25:approval[r25:approval_type_id = 2 and r25:approval_state=1 and r25:object_type=4]">
<s:with b:target="$tMessages">
<s:render b:destination="div[@c:id='message']" b:mode="aslastchild">
<div>
<s:textnode b:label="{concat('A task request has been issued for assignment of the following location(s):',' ',  string-join(distinct-values($tEvent//r25:approval[r25:approval_type_id = 2 and r25:approval_state=1 and r25:object_type=4]/r25:approval_name), '; '), '.')}"/>
</div>
</s:render>
<s:task b:action="show" b:target="."/>
</s:with>
</s:if>
<s:if b:test="$tEvent//r25:approval[r25:approval_type_id = 2 and r25:approval_state=2 and r25:object_type=4] and  $tEvent//r25:approval/r25:approval_contact[r25:approval_contact_state=3]">
<s:with b:target="$tMessages">
<s:render b:destination="div[@c:id='message']" b:mode="aslastchild">
<div>A location request for this event was denied. Please contact your system administrator for details.</div>
</s:render>
<s:task b:action="show" b:target="."/>
</s:with>
</s:if>
<s:if b:test="$tEvent//r25:approval[r25:approval_type_id = 2 and r25:approval_state=1 and r25:object_type=6]">
<s:with b:target="$tMessages">
<s:render b:destination="div[@c:id='message']" b:mode="aslastchild">
<div>
<s:textnode b:label="{concat('A task request has been issued for assignment of the following resource(s):',' ',  string-join(distinct-values($tEvent//r25:approval[r25:approval_type_id = 2 and r25:approval_state=1 and r25:object_type=6]/r25:approval_name), '; '), '.')}"/>
</div>
</s:render>
<s:task b:action="show" b:target="."/>
</s:with>
</s:if>
<s:if b:test="$tEvent//r25:approval[r25:approval_type_id = 2 and r25:approval_state=2 and r25:object_type=6] and  $tEvent//r25:approval/r25:approval_contact[r25:approval_contact_state=3]">
<s:with b:target="$tMessages">
<s:render b:destination="div[@c:id='message']" b:mode="aslastchild">
<div style="margin-bottom:15px;">A resource request for this event was denied. Please contact your system administrator for details.</div>
</s:render>
<s:task b:action="show" b:target="."/>
</s:with>
</s:if>
<s:if b:test="$tProfile//r25:reservation/r25:reservation_state = '2'">
<s:variable b:name="lRsrvDates" b:scope="local" b:select=""/>
<s:variable b:scope="local" b:name="lDatePattern" b:select="string(id('Prefs')/$tDatePattern)"/>
<s:for-each b:target="$tProfile/r25:reservation[r25:reservation_state = '2']">
<s:sequential>
<s:lock>
<s:variable b:name="lFormattedDate" b:scope="local" b:select=""/>
<s:variable b:name="lStartDt" b:scope="local" b:select="string($_target/r25:reservation_start_dt)"/>
<s:script><![CDATA[

var sStartDt = _vars['lStartDt'][0];
var oStartDt = new Date(sStartDt.substr(0,4),
sStartDt.substr(5,2)-1,sStartDt.substr(8,2));                
bpc.setVariable('lFormattedDate', 
[s25_format_date( oStartDt, _vars['lDatePattern'][0] )],
'local' );

]]></s:script>
<s:task b:action="assign" b:target="$lRsrvDates" b:scope="local" b:select="concat($lRsrvDates,' ',$lFormattedDate)"/>
</s:lock>
</s:sequential>
</s:for-each>
<s:variable b:name="lText" b:scope="local" b:select="concat('An occurrence of this event was affected by a date exclusion on ', ' ', $lRsrvDates)"/>
<s:with b:target="$tMessages">
<s:render b:destination="div[@c:id='message']" b:mode="aslastchild">
<div style="margin-bottom:15px;"><s:textnode b:label="{$lText}"/></div>
</s:render>
<s:task b:action="show" b:target="."/>
</s:with>
</s:if>
</s:event>
<s:event b:on="OnClickSave">
<s:script><![CDATA[window.scrollTo(0,0);]]></s:script>
<s:task b:action="hide" b:target="$tMessages"/>
<s:task b:action="trigger" b:event="ValidateCard" b:target="."/>
<s:task b:action="trigger" b:event="UpdateRequiredStatus" b:target="."/>
<s:choose>
<s:when b:test="count($tInvalidEditors) gt 0">
<s:render b:destination="$tMessages/div[@c:id='message']">
<div style="padding-top:3px">
<div style="color:red; font-weight:bold">There are incomplete or invalid fields, or there is a conflict involving a Location or Resource.</div>
Areas that require your attention are highlighted in red. Please make any necessary changes and save again.
</div>
</s:render>
<s:task b:action="show" b:target="$tMessages"/>
<s:task b:action="select" b:target="$tInvalidEditors[1]/parent::div"/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="FinalAvailabilityCheck" b:target="$tAvailabilityControl"/>
<s:choose>
<s:when b:test="count($tAvailabilityControl/div[@c:id='space_conflicts' or @c:id='resource_conflicts']/div) gt 0">
<s:variable b:name="lLast" b:scope="local" b:select="$tCard/@c:pos"/>
<s:with b:target="$tDeck/div[@c:id='confirm']">
<s:task b:test="not($lLast='confirm')" b:action="set" b:target="@c:last" b:value="{$lLast}"/>
<s:task b:action="select" b:target="."/>
</s:with>
</s:when>
<s:otherwise>
<s:if b:test="$tEvent/r25:state = '99' or $tEvent/r25:state = '3'">
<s:setatt c:close="T"/>
</s:if>
<s:task b:action="trigger" b:event="Save" b:target="."/>
</s:otherwise>
</s:choose>
</s:otherwise>
</s:choose>
<s:with b:target="$tCrumbContainer//s25:rsrv_wiz_crumb[@b:state='selected']">
<s:task b:action="trigger" b:event="Reset" b:target="."/>
</s:with>
</s:event>
<s:event b:on="ValidateCard">
<s:variable b:name="lCard" b:scope="local" b:select="$tDeck/div[@b:state = 'selected']"/>
<s:variable b:name="lCrumb" b:scope="local" b:select="$tCrumbContainer//s25:rsrv_wiz_crumb[@b:state='selected']"/>


<s:sequential>
<s:task b:action="trigger" b:event="ValidateAndSave" b:target="$lCard/*[@c:editor]"/>
<s:task b:action="trigger" b:event="Validate" b:target="$lCrumb"/>
</s:sequential>
</s:event>

<s:event b:on="ValidateLocationCard">
<s:variable b:name="lLocationCard" b:scope="local" b:select="$tDeck/div[s25:rsrv_wiz_space]"/>
<s:variable b:name="lLocationCrumb" b:scope="local" b:select="$tCrumbContainer//s25:rsrv_wiz_crumb[.//div[@c:name='space']]"/>
<s:sequential>
<s:task b:action="trigger" b:event="ValidateAndSave" b:target="$lLocationCard/*[@c:editor]"/>
<s:task b:action="trigger" b:event="Validate" b:target="$lLocationCrumb"/>
</s:sequential>
</s:event>
<s:event b:on="ValidateResourceCard">
<s:variable b:name="lResourceCard" b:scope="local" b:select="$tDeck/div[s25:rsrv_wiz_resource]"/>
<s:variable b:name="lResourceCrumb" b:scope="local" b:select="$tCrumbContainer//s25:rsrv_wiz_crumb[.//div[@c:name='resource']]"/>
<s:sequential>
<s:task b:action="trigger" b:event="ValidateAndSave" b:target="$lResourceCard/*[@c:editor]"/>
<s:task b:action="trigger" b:event="Validate" b:target="$lResourceCrumb"/>
</s:sequential>
</s:event>
<s:event b:on="ValidateEditor">
<s:variable b:name="lCard" b:scope="local" b:select="$tDeck/div[@b:state = 'selected']"/>
<s:sequential>
<s:task b:action="trigger" b:event="Validate" b:target="$lCard/*[@c:editor]"/>
<s:task b:action="trigger" b:event="Validate" b:target="$tCrumbContainer/div/*[@c:id=$lCard/@c:id]"/>
</s:sequential>
</s:event>
<s:event b:on="Save">
<s:variable b:name="lMsg" b:select="concat('Saving &#34;', $tEvent/r25:event_name/text(), '&#34; ...')"/>
<s:with b:target="id('bxLoading')">
<s:task b:action="settext" b:target="$tMain" b:value="{$lMsg}"/>
<s:task b:target="." b:action="trigger" b:event="ShowLoading"/>
</s:with>
<s:variable b:name="lEvType" b:scope="local" b:select="$tDataXml/r25:events/r25:event/r25:event_type_id"/>
<s:variable b:name="lTypeAtrbsUrl" b:scope="local" b:select="concat(@c:r25ws_prefix,'evtype.xml', '?type_id=',$lEvType, '&amp;scope=extended','&amp;include=attributes+rules')"/>
<s:variable b:name="tTypeAtrbs" b:scope="tag" b:select=""/>
<s:task b:action="load" b:url="{$lTypeAtrbsUrl}" b:method="GET" b:destination="$tTypeAtrbs" b:mode="replace" b:showloading="false"/>
<s:task b:action="string2xml" b:variable="$tTypeAtrbs"/>
<s:choose>
<s:when b:test="not(@c:mode='edit') and count($tDataXml/r25:events/wizard/threads//editor[@name='ev_custom_attr']/required_attributes/attribute[@id = $tTypeAtrbs//r25:event_types/r25:event_type/r25:custom_attributes/r25:attribute_id]) &gt; 0 and not(exists(.//s25:rsrv_wiz_custom_attr))">
<s:with b:target=".//s25:rsrv_wiz_crumb[./div/div[@c:name='ev_custom_attr']]">
<s:task b:action="trigger" b:event="select" b:target="."/>
<s:task b:action="trigger" b:event="command" b:target="."/>
</s:with>
<s:task b:action="trigger" b:target="id('bxLoading')" b:event="HideLoading"/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="SaveEditors" b:target="."/>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="SaveEditors">
<s:variable b:name="lEditors" b:scope="local" b:select="$tDeck/div[@c:dirty='true']/*[@c:editor='true']"/>
<s:sequential>
<s:task b:test="$tEvent/@status='new'" b:action="settext" b:target="$tEvent/r25:node_type" b:value="E"/>
<s:task b:action="trigger" b:event="Save" b:target="$lEditors"/>
<s:task b:action="trigger" b:event="SaveObjRsrv" b:target="."/>
<s:if b:test="$tEvent/@status='new'">
<s:task b:action="assign" b:target="$lThread" b:scope="tag" b:select="@c:thread"/>
<s:variable b:name="lThreadData" b:scope="local" b:select="$tPrefXml/wizard/threads/thread[@name=$lThread]"/>
<s:if b:test="not($lThreadData//editor[@name='contact'])">
<s:task b:action="trigger" b:event="SaveRequestor"/>
</s:if>
<s:if b:test="$tContactEditor = 'F'">
<s:task b:action="trigger" b:event="SaveRequestor"/>
</s:if>
<s:variable b:name="lDefaultScheduler" b:select="''"/>
<s:if b:test="string(id('Pref_config_BPE_event_get')) = 'configurations'">
<s:variable b:name="lSecGroupsConfig" b:select=""/>
<s:task b:action="string2xml" b:variable="$lSecGroupsConfig" b:source="id('Pref_25L_rsrvwiz_secgroups')"/>
<s:variable b:name="lSecurityGroup" b:select="tokenize(string(id('WSSessionMgr')/@c:security-group), ',')[1]"/>
<s:task b:action="assign" b:target="$lDefaultScheduler" b:select="string($lSecGroupsConfig//security_group[@group_id = $lSecurityGroup]/@default_scheduler_id)"/>
</s:if>
<s:if b:test="not($lDefaultScheduler = '0') and not(string-length($lDefaultScheduler) = 0)">
<s:variable b:name="lXml" b:scope="local">
<r25:role status="new">
<r25:role_id>-2</r25:role_id>
<r25:role_name>Scheduler</r25:role_name>
<r25:contact status="new">
<r25:contact_id/>
</r25:contact>
</r25:role>
</s:variable>
<s:task b:action="string2xml" b:variable="$lXml"/>
<s:task b:action="remove" b:target="$tEvent/r25:role[@r25:role_id = '-2']"/>
<s:task b:action="settext" b:target="$lXml/r25:role/r25:contact/r25:contact_id" b:value="{$lDefaultScheduler}"/>
<s:task b:action="copy" b:source="$lXml/r25:role" b:destination="$tEvent" b:mode="aslastchild"/>
</s:if>
</s:if>
<s:task b:action="remove" b:target="$tDataXml/r25:events//wizard"/>
<s:task b:action="remove" b:target="$tDataXml/r25:events//availability_msgs"/>
<s:choose>
<s:when b:test="$tMultiPut = 'true'">
<s:task b:action="trigger" b:event="MultiPutEvent" b:target="."/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="PutEvent" b:target="."/>
</s:otherwise>
</s:choose>
</s:sequential>
</s:event>
<s:event b:on="SaveRequestor">
<s:variable b:name="lRequestor" b:scope="local" b:select="@c:contact_id"/>
<s:variable b:name="lXml" b:scope="local">
<r25:role status="new">
<r25:role_id>-1</r25:role_id>
<r25:role_name>Requestor</r25:role_name>
<r25:contact status="new">
<r25:contact_id/>
</r25:contact>
</r25:role>
</s:variable>
<s:task b:action="string2xml" b:variable="$lXml"/>
<s:task b:action="remove" b:target="$tEvent/r25:role[@status='new']"/>
<s:task b:action="settext" b:target="$lXml/r25:role/r25:contact/r25:contact_id" b:value="{$lRequestor}"/>
<s:task b:action="copy" b:source="$lXml/r25:role" b:destination="$tEvent" b:mode="aslastchild"/>
</s:event>
<s:event b:on="SaveObjRsrv">
<s:task b:action="trigger" b:event="OutputCurrentXmlData"/>
<s:variable b:name="tMultiPut" b:scope="tag" b:select="'false'"/>
<s:if b:test="$tDateTimeEditor = 'F'">
<s:for-each b:target="$tProfile/r25:reservation">
<s:sequential><s:lock>
<s:render b:destination="$tInbox/occurrences" b:mode="aslastchild">
<occurrence event_start_dt="{substring($_target/r25:event_start_dt,1,19)}" state="{string($_target/r25:reservation_state)}"><s:textnode b:label="{string($_target/r25:rsrv_comments)}"/></occurrence>
</s:render>
</s:lock></s:sequential>
</s:for-each>
</s:if>
<s:task b:action="trigger" b:event="OutputCurrentInbox"/>
<s:if b:test="$tSpaceEditor = 'F'">
<s:for-each b:target="distinct-values($tProfile/r25:reservation[not(@status='del')]/r25:space_reservation/r25:space_id)">
<s:sequential><s:lock>
<s:render b:destination="$tInbox/reserve" b:mode="aslastchild">
<obj obj_type="space" obj_id="{$_target/../r25:space_id}" obj_name="{$_target/../r25:space/r25:space_name}" obj_layout="{$_target/../r25:layout_id}" obj_instructions="{$_target/../r25:space_instructions}" obj_share="{$_target/../r25:share}"/>
</s:render>
</s:lock></s:sequential>
</s:for-each>
<s:for-each b:target="$tProfile/r25:reservation[not(@status='del')]/r25:space_reservation">
<s:sequential><s:lock>
<s:render b:destination="$tInbox/reserve/obj[@obj_type='space' and @obj_id=$_target/r25:space_id]" b:mode="aslastchild">
<occurrence date="{substring($_target/../r25:event_start_dt, 1, 10)}" obj_layout="{$_target/r25:layout_id}" obj_instructions="{$_target/r25:space_instructions}" obj_share="{$_target/r25:share}"/>
</s:render>
</s:lock></s:sequential>
</s:for-each>
<s:task b:action="trigger" b:event="OutputCurrentInbox"/>
<s:if b:test="$tDateTimeEditor = 'T' and $tInbox/reserve/obj[@obj_type='space']">
<s:if b:test=".//s25:rsrv_wiz_datetime/$tRepeats/div[@c:id='control']/s25:rsrv_wiz_repeats">
<s:if b:test="not(.//s25:rsrv_wiz_repeats/$tRepeatType = 'none')">
<s:variable b:name="lOccurrence" b:select=""/>
<s:for-each b:target=".//s25:rsrv_wiz_datetime/$tRepeats/div[@c:id='control']/s25:rsrv_wiz_repeats/ $tOccurrenceList/tr[@c:purpose='occurrence']">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lOccurrence" b:select="concat(substring($_target/@c:sortvalue,1,4),'-', substring($_target/@c:sortvalue,5,2),'-',substring($_target/@c:sortvalue,7,2))"/>
<s:for-each b:target="$tInbox/reserve/obj[@obj_type='space']">
<s:if b:test="not($_target/occurrence[@date=$lOccurrence])">
<s:render b:destination="$_target" b:mode="aslastchild">
<occurrence date="{$lOccurrence}" obj_layout="-1" obj_instructions="" obj_share="F"/>
</s:render>
</s:if>
</s:for-each>
</s:lock></s:sequential>
</s:for-each>
</s:if>
</s:if>
</s:if>
<s:task b:action="trigger" b:event="OutputCurrentInbox"/>
</s:if>
<s:if b:test="$tResourceEditor = 'F'">
<s:for-each b:target="distinct-values($tProfile/r25:reservation[not(@status='del')]/r25:resource_reservation/r25:resource_id)">
<s:sequential><s:lock>
<s:render b:destination="$tInbox/reserve" b:mode="aslastchild">
<obj obj_type="resource" obj_id="{$_target/../r25:resource_id}" obj_name="{$_target/../r25:resource/r25:resource_name}" obj_quantity="{$_target/../r25:quantity}" obj_instructions="{$_target/../r25:resource_instructions}"/>
</s:render>
</s:lock></s:sequential>
</s:for-each>
<s:for-each b:target="$tProfile/r25:reservation[not(@status='del')]/r25:resource_reservation">
<s:sequential><s:lock>
<s:render b:destination="$tInbox/reserve/obj[@obj_type='resource' and @obj_id=$_target/r25:resource_id]" b:mode="aslastchild">
<occurrence date="{substring($_target/../r25:event_start_dt, 1, 10)}" obj_quantity="{$_target/r25:quantity}" obj_instructions="{$_target/r25:resource_instructions}"/>
</s:render>
</s:lock></s:sequential>
</s:for-each>
<s:if b:test="$tDateTimeEditor = 'T' and $tInbox/reserve/obj[@obj_type='resource']">
<s:if b:test=".//s25:rsrv_wiz_datetime/$tRepeats/div[@c:id='control']/s25:rsrv_wiz_repeats">
<s:if b:test="not(.//s25:rsrv_wiz_repeats/$tRepeatType = 'none')">
<s:variable b:name="lOccurrence" b:select=""/>
<s:for-each b:target=".//s25:rsrv_wiz_datetime/$tRepeats/div[@c:id='control']/s25:rsrv_wiz_repeats/$tOccurrenceList/tr[@c:purpose='occurrence']">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lOccurrence" b:select="concat(substring($_target/@c:sortvalue,1,4),'-',substring($_target/@c:sortvalue,5,2),'-',substring($_target/@c:sortvalue,7,2))"/>
<s:for-each b:target="$tInbox/reserve/obj[@obj_type='resource']">
<s:if b:test="not($_target/occurrence[@date=$lOccurrence])">
<s:render b:destination="$_target" b:mode="aslastchild">
<occurrence date="{$lOccurrence}" obj_quantity="-1" obj_instructions=""/>
</s:render>
</s:if>
</s:for-each>
</s:lock></s:sequential>
</s:for-each>
</s:if>
</s:if>
</s:if>
</s:if>
<s:variable b:name="lSpaces" b:scope="local" b:select="$tInbox/reserve/obj[@obj_type = 'space']/@obj_id"/>
<s:variable b:name="lResources" b:scope="local" b:select="$tInbox/reserve/obj[@obj_type = 'resource']/@obj_id"/>
<s:variable b:name="lSpXml" b:scope="local">
<r25:space_reservation occurrence="" status="new">
<r25:space_id/>
<r25:attendance/>
<r25:layout_id/>
<r25:space_instructions/>
<r25:share/>
</r25:space_reservation>
</s:variable>
<s:task b:action="string2xml" b:variable="$lSpXml"/>
<s:variable b:name="lRsXml" b:scope="local">
<r25:resource_reservation occurrence="" status="new">
<r25:resource_id/>
<r25:quantity/>          
<r25:resource_instructions/>
</r25:resource_reservation>
</s:variable>
<s:task b:action="string2xml" b:variable="$lRsXml"/>
<s:task b:action="remove" b:target="$tProfile//r25:space_reservation[r25:space_id='']"/>
<s:task b:action="remove" b:target="$tInbox/reserve/obj[@obj_type = 'space' and @obj_id = '']"/>
<s:task b:action="remove" b:target="$tProfile//r25:resource_reservation[r25:resource_id = '']"/>
<s:task b:action="remove" b:target="$tInbox/reserve/obj[@obj_type = 'resource' and @obj_id = '']"/>
<s:task b:action="trigger" b:event="OutputCurrentInbox"/>
<s:if b:test="not(string-length($tProfile/@status)=0)">
<s:task b:action="assign" b:target="$tMultiPut" b:select="'true'"/>

<s:choose>
<s:when b:test="$tMultiPut = 'false'">
<s:for-each b:target="$tInbox/reserve/obj">
<s:sequential>
<s:lock>
<s:choose>
<s:when b:test="$_target/@obj_type='space'">
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:space_id" b:value="{$_target/@obj_id}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:space_instructions" b:value="{string($_target/@obj_instructions)}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:layout_id" b:value="{string($_target/@obj_layout)}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:share" b:value="{string($_target/@obj_share)}"/>
<s:task b:action="remove" b:target="$lSpXml/r25:space_reservation/@occurrence"/>
<s:for-each b:target="$tProfile/r25:reservation">
<s:sequential>
<s:lock>
<s:if b:test="not($tDataXml/r25:events/r25:event/@status='new') and not($_target/@status='new')">
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
<s:choose>
<s:when b:test="not($_target//r25:space_reservation/r25:space_id = $lSpXml/r25:space_reservation/r25:space_id)">
<s:task b:action="copy" b:source="$lSpXml/r25:space_reservation" b:destination="$_target" b:mode="aslastchild"/>
</s:when>
<s:otherwise>
<s:variable b:name="lSpID" b:scope="local" b:select="$lSpXml/r25:space_reservation/r25:space_id"/>
<s:variable b:name="lSpInstructions" b:scope="local" b:select="string($lSpXml/r25:space_reservation/r25:space_instructions)"/>
<s:variable b:name="lSpLayout" b:scope="local" b:select="string($lSpXml/r25:space_reservation/r25:layout_id)"/>
<s:variable b:name="lSpShare" b:scope="local" b:select="string($lSpXml/r25:space_reservation/r25:share)"/>
<s:if b:test="not($tDataXml/r25:events/r25:event/@status='new')">
<s:task b:action="set" b:target="$tProfile//r25:space_reservation[r25:space_id = $lSpID]/@status" b:value="mod"/>
</s:if>
<s:task b:action="settext" b:target="$tProfile//r25:space_reservation[r25:space_id = $lSpID]/r25:space_instructions" b:value="{$lSpInstructions}"/>
<s:task b:action="settext" b:target="$tProfile//r25:space_reservation[r25:space_id = $lSpID]/r25:layout_id" b:value="{$lSpLayout}"/>
<s:if b:test="id('FLS_EVENT_SHARE') = 'F'">
<s:task b:action="settext" b:target="$tProfile//r25:space_reservation[r25:space_id = $lSpID]/r25:share" b:value="{$lSpShare}"/>
</s:if>
</s:otherwise>
</s:choose>
<s:task b:action="set" b:target="$_target//r25:space_reservation[not(r25:space_id = $lSpaces)]/@status" b:value="del"/>
</s:lock>
</s:sequential>
</s:for-each>
</s:when>
<s:when b:test="$_target/@obj_type='resource'">
<s:task b:action="settext" b:target="$lRsXml/r25:resource_reservation/r25:resource_id" b:value="{$_target/@obj_id}"/>
<s:task b:action="settext" b:target="$lRsXml/r25:resource_reservation/r25:quantity" b:value="{$_target/@obj_quantity}"/>
<s:task b:action="settext" b:target="$lRsXml/r25:resource_reservation/r25:resource_instructions" b:value="{string($_target/@obj_instructions)}"/>
<s:for-each b:target="$tProfile/r25:reservation">
<s:sequential>
<s:lock>
<s:if b:test="not($tDataXml/r25:events/r25:event/@status='new')">
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
<s:choose>
<s:when b:test="not($_target//r25:resource_reservation/r25:resource_id = $lRsXml/r25:resource_reservation/r25:resource_id)">
<s:task b:action="copy" b:source="$lRsXml/r25:resource_reservation" b:destination="$_target" b:mode="aslastchild"/>
</s:when>
<s:otherwise>
<s:variable b:name="lRsID" b:scope="local" b:select="$lRsXml/r25:resource_reservation/r25:resource_id"/>
<s:variable b:name="lRsInstructions" b:scope="local" b:select="string($lRsXml/r25:resource_reservation/r25:resource_instructions)"/>
<s:variable b:name="lRsQuantity" b:scope="local" b:select="string($lRsXml/r25:resource_reservation/r25:quantity)"/>
<s:if b:test="not(string($lRsInstructions) =  string($tProfile//r25:resource_reservation[r25:resource_id = $lRsID]/r25:resource_instructions/text()))">
<s:task b:action="set" b:target="$tProfile//r25:resource_reservation[r25:resource_id = $lRsID]/@status" b:value="mod"/>
<s:task b:action="settext" b:target="$tProfile//r25:resource_reservation[r25:resource_id = $lRsID]/r25:resource_instructions" b:value="{$lRsInstructions}"/>														
</s:if>
<s:if b:test="not(string($lRsQuantity) =  string($tProfile//r25:resource_reservation[r25:resource_id = $lRsID]/r25:quantity))">
<s:task b:action="set" b:target="$tProfile//r25:resource_reservation[r25:resource_id = $lRsID]/@status" b:value="mod"/>														
<s:task b:action="settext" b:target="$tProfile//r25:resource_reservation[r25:resource_id = $lRsID]/r25:quantity" b:value="{$lRsQuantity}"/>
</s:if>
</s:otherwise>
</s:choose>
<s:task b:action="set" b:target="$_target//r25:resource_reservation[not(r25:resource_id = $lResources)]/@status" b:value="del"/>
</s:lock>
</s:sequential>                     
</s:for-each>
</s:when>
</s:choose>
</s:lock>
</s:sequential>
</s:for-each>
<s:task b:action="remove" b:target="$tProfile//r25:space_reservation[r25:layout_id = '-1']/r25:space_instructions"/>
<s:task b:action="remove" b:target="$tProfile//r25:space_reservation[r25:layout_id = '-1']/r25:layout_id"/>
<s:task b:action="remove" b:target="$tProfile//r25:space_reservation[r25:layout_id = '-1']/r25:share"/>
<s:task b:action="remove" b:target="$tProfile//r25:resource_reservation[r25:quantity = '-1']/r25:resource_instructions"/>
<s:task b:action="remove" b:target="$tProfile//r25:resource_reservation[r25:quantity = '-1']/r25:quantity"/>
<s:if b:test="count($tInbox/reserve/obj[@obj_type='space']) = 0">
<s:task b:action="set" b:target="$tRsrv//r25:space_reservation/@status" b:value="del"/>
</s:if>
<s:if b:test="count($tInbox/reserve/obj[@obj_type='resource']) = 0">
<s:task b:action="set" b:target="$tRsrv//r25:resource_reservation/@status" b:value="del"/>
</s:if>
<s:if b:test="not($tDataXml/r25:events/r25:event/@status='new')">
<s:task b:action="set" b:target="$tProfile/@status" b:value="mod"/>
</s:if>
</s:when>
<s:otherwise>
<s:variable b:name="tRsrvList" b:scope="tag">
<reservations>
<spaces/>
<resources/>
</reservations>
</s:variable>
<s:task b:action="string2xml" b:variable="$tRsrvList"/>
<s:for-each b:target="$tInbox/reserve/obj[(@obj_type='resource' or @obj_type='space') and not(string-length(@obj_id) = 0)]">
<s:sequential>
<s:lock>
<s:choose>
<s:when b:test="$_target/@obj_type='space'">
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:space_id" b:value="{$_target/@obj_id}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:layout_id" b:value="{string($_target/@obj_layout)}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:space_instructions" b:value="{string($_target/@obj_instructions)}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:share" b:value="{string($_target/@obj_share)}"/>
<s:choose>
<s:when b:test="count($_target/occurrence) gt 0">
<s:for-each b:target="$_target/occurrence">
<s:task b:action="set" b:target="$lSpXml/r25:space_reservation/@occurrence" b:value="{$_target/@date}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:layout_id" b:value="{string($_target/@obj_layout)}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:space_instructions" b:value="{string($_target/@obj_instructions)}"/>
<s:task b:action="settext" b:target="$lSpXml/r25:space_reservation/r25:share" b:value="{string($_target/@obj_share)}"/>
<s:task b:action="copy" b:source="$lSpXml/r25:space_reservation" b:destination="$tRsrvList/reservations/spaces" b:mode="aslastchild"/>
</s:for-each>
</s:when>
<s:otherwise>
<s:task b:action="set" b:target="$lSpXml/r25:space_reservation/@occurrence" b:value="{substring($tInbox/occurrences/occurrence/@event_start_dt, 1, 10)}"/>
<s:task b:action="copy" b:source="$lSpXml/r25:space_reservation" b:destination="$tRsrvList/reservations/spaces" b:mode="aslastchild"/>
</s:otherwise>
</s:choose>
</s:when>
<s:when b:test="$_target/@obj_type='resource'">
<s:task b:action="settext" b:target="$lRsXml/r25:resource_reservation/r25:resource_id" b:value="{$_target/@obj_id}"/>
<s:task b:action="settext" b:target="$lRsXml/r25:resource_reservation/r25:quantity" b:value="{$_target/@obj_quantity}"/>
<s:task b:action="settext" b:target="$lRsXml/r25:resource_reservation/r25:resource_instructions" b:value="{string($_target/@obj_instructions)}"/>
<s:choose>
<s:when b:test="count($_target/occurrence) gt 0">
<s:for-each b:target="$_target/occurrence">
<s:task b:action="set" b:target="$lRsXml/r25:resource_reservation/@occurrence" b:value="{$_target/@date}"/>
<s:task b:action="settext" b:target="$lRsXml/r25:resource_reservation/r25:quantity" b:value="{string($_target/@obj_quantity)}"/>
<s:task b:action="settext" b:target="$lRsXml/r25:resource_reservation/r25:resource_instructions" b:value="{string($_target/@obj_instructions)}"/>
<s:task b:action="copy" b:source="$lRsXml/r25:resource_reservation" b:destination="$tRsrvList/reservations/resources" b:mode="aslastchild"/>
</s:for-each>
</s:when>
<s:otherwise>
<s:task b:action="set" b:target="$lRsXml/r25:resource_reservation/@occurrence" b:value="{substring($tInbox/occurrences/occurrence/@event_start_dt, 1, 10)}"/>
<s:task b:action="copy" b:source="$lRsXml/r25:resource_reservation" b:destination="$tRsrvList/reservations/resources" b:mode="aslastchild"/>
</s:otherwise>
</s:choose>
</s:when>
</s:choose>
</s:lock>
</s:sequential>
</s:for-each>
<s:task b:action="remove" b:target="$tRsrvList/reservations/spaces/r25:space_reservation[r25:layout_id = '-1']/r25:space_instructions"/>
<s:task b:action="remove" b:target="$tRsrvList/reservations/spaces/r25:space_reservation[r25:layout_id = '-1']/r25:layout_id"/>
<s:task b:action="remove" b:target="$tRsrvList/reservations/spaces/r25:space_reservation[r25:layout_id = '-1']/r25:share"/>
<s:task b:action="remove" b:target="$tRsrvList/reservations/resources/r25:resource_reservation[r25:quantity = '-1']/r25:resource_instructions"/>
<s:task b:action="remove" b:target="$tRsrvList/reservations/resources/r25:resource_reservation[r25:quantity = '-1']/r25:quantity"/>
<s:if b:test="count($tInbox/reserve/obj[@obj_type='space']) = 0">
<s:if b:test="not($tDataXml/r25:events/r25:event/@status='new')">
<s:task b:action="set" b:target="$tProfile/@status" b:value="mod"/>
<s:task b:action="set" b:target="$tProfile//r25:reservation/@status" b:value="mod"/>
<s:task b:action="set" b:target="$tProfile//r25:space_reservation/@status" b:value="del"/>
</s:if>
</s:if>
<s:if b:test="count($tInbox/reserve/obj[@obj_type='resource']) = 0">
<s:if b:test="not($tDataXml/r25:events/r25:event/@status='new')">
<s:task b:action="set" b:target="$tProfile/@status" b:value="mod"/>
<s:task b:action="set" b:target="$tProfile//r25:reservation/@status" b:value="mod"/>
<s:task b:action="set" b:target="$tProfile//r25:resource_reservation/@status" b:value="del"/>
</s:if>
</s:if>
<s:task b:action="xml2string" b:variable="$tRsrvList"/>
<s:task b:action="string2xml" b:variable="$tRsrvList"/>
</s:otherwise>
</s:choose>
<s:if b:test="not($tEvent/@status='new')">
<s:task b:action="set" b:target="$tEvent/@status" b:value="mod"/>
</s:if>
</s:if>
</s:event>
<s:event b:on="PutEvent">
<s:task b:action="trigger" b:event="OutputCurrentInbox"/>
<s:for-each b:target="$tProfile/r25:reservation">
<s:sequential><s:lock>
<s:variable b:name="lEventStartDt" b:select="substring($_target/r25:event_start_dt,1,19)"/>
<s:if b:test="$tInbox/occurrences/occurrence[@event_start_dt = $lEventStartDt]">
<s:variable b:name="lState" b:select="string($tInbox/occurrences/occurrence[@event_start_dt = $lEventStartDt]/@state)"/>
<s:variable b:name="lComment" b:select="string($tInbox/occurrences/occurrence[@event_start_dt = $lEventStartDt]/text())"/>
<s:task b:action="settext" b:target="$_target/r25:reservation_state" b:value="{$lState}"/>
<s:task b:action="settext" b:target="$_target/r25:rsrv_comments" b:value="{$lComment}"/>
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
</s:lock></s:sequential>
</s:for-each>
<s:task b:action="trigger" b:event="OutputCurrentInbox"/>
<s:variable b:name="lQuery" b:scope="local" b:select="concat('event.xml?event_id=',$tEvent/r25:event_id/text(),'&amp;return_doc=T')"/>
<s:variable b:name="lInputXsl" b:scope="local" b:select="string(id('Pref_config_BPE_event_itransform'))"/>
<s:variable b:name="lOutputXsl" b:scope="local" b:select="string(id('Pref_config_BPE_event_otransform'))"/>
<s:if b:test="string-length($lInputXsl) &gt; 0">
<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'&amp;itransform=',$lInputXsl)"/>
</s:if>
<s:if b:test="string-length($lOutputXsl) &gt; 0">
<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'&amp;otransform=',$lOutputXsl)"/>
</s:if>
<s:setatt c:query="{$lQuery}"/>
<s:variable b:name="lData" b:scope="local" b:select="$tDataXml"/>
<s:task b:action="xml2string" b:variable="$lData"/>
<s:task b:test="not(starts-with($lData,'&lt;?'))" b:action="assign" b:target="$lData" b:scope="local" b:select="concat('&lt;?xml version=&#34;1.0&#34;?&gt;',$lData)"/>
<s:variable b:name="lRespTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="PUT" b:url="{concat(id('Config')/$tWsPrefix,$lQuery,'&amp;async=T')}" b:data="{$lData}" b:destination="$lRespTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:test="contains($lRespTxt, '?&gt;')" b:action="assign" b:target="$lRespTxt" b:select="substring-after($lRespTxt, '?&gt;')"/>
<s:variable b:name="lRespXml" b:scope="local" b:select=""/>
<s:task b:action="string2xml" b:source="$lRespTxt" b:variable="$lRespXml"/>
<s:task b:action="assign" b:target="tResultKey" b:scope="tag" b:select="$lRespXml//r25:key"/>
<s:variable b:name="lPutEvent" b:select="'single'"/>
<s:task b:action="trigger" b:event="CheckPutResults"/>
</s:event>
<s:event b:on="MultiPutEvent">
<s:variable b:name="lQuery" b:select="concat('event.xml?event_id=',$tEvent/r25:event_id/text())"/>
<s:setatt c:query="{$lQuery}"/>
<s:variable b:name="lData" b:scope="local" b:select="$tDataXml"/>
<s:task b:action="xml2string" b:variable="$lData"/>
<s:task b:test="not(starts-with($lData,'&lt;?'))" b:action="assign" b:target="$lData" b:scope="local" b:select="concat('&lt;?xml version=&#34;1.0&#34;?&gt;',$lData)"/>
<s:variable b:name="lRespTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="PUT" b:url="{concat(id('Config')/$tWsPrefix,$lQuery,'&amp;async=T')}" b:data="{$lData}" b:destination="$lRespTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:test="contains($lRespTxt, '?&gt;')" b:action="assign" b:target="$lRespTxt" b:select="substring-after($lRespTxt, '?&gt;')"/>
<s:variable b:name="lRespXml" b:scope="local" b:select=""/>
<s:task b:action="string2xml" b:source="$lRespTxt" b:variable="$lRespXml"/>
<s:task b:action="assign" b:target="tResultKey" b:scope="tag" b:select="$lRespXml//r25:key"/>
<s:variable b:name="lPutEvent" b:select="'multi_first'"/>
<s:task b:action="trigger" b:event="CheckPutResults"/>
</s:event>
<s:event b:on="SecondPut">
<s:variable b:name="lProfileID" b:scope="local" b:select="string(@c:profile_id)"/>
<s:task b:action="set" b:target="$tRespXml/r25:events/r25:event/@status" b:value="mod"/>
<s:task b:action="set" b:target="$tRespXml/r25:events/r25:event/r25:profile[r25:profile_id = $lProfileID]/@status" b:value="mod"/>
<s:if b:test="string($lProfileID) = 'new_event' or string(@c:mode = 'clone')">
<s:task b:action="set" b:target="$tRespXml/r25:events/r25:event/r25:profile[1]/@status" b:value="mod"/>	
<s:task b:action="assign" b:target="$lProfileID" b:select="$tRespXml/r25:events/r25:event/r25:profile[1]/r25:profile_id"/>
</s:if>
<s:task b:action="xml2string" b:variable="$tRsrvList"/>
<s:task b:action="string2xml" b:variable="$tRsrvList"/>
<s:for-each b:target="$tRespXml/r25:events/r25:event/r25:profile[r25:profile_id = $lProfileID]/r25:reservation">
<s:sequential><s:lock>
<s:variable b:name="lEventStartDt" b:select="substring($_target/r25:event_start_dt,1,19)"/>
<s:if b:test="$tInbox/occurrences/occurrence[@event_start_dt = $lEventStartDt]">
<s:variable b:name="lState" b:select="string($tInbox/occurrences/occurrence[@event_start_dt = $lEventStartDt]/@state)"/>
<s:variable b:name="lComment" b:select="string($tInbox/occurrences/occurrence[@event_start_dt = $lEventStartDt]/text())"/>
<s:task b:action="settext" b:target="$_target/r25:reservation_state" b:value="{$lState}"/>
<s:task b:action="settext" b:target="$_target/r25:rsrv_comments" b:value="{$lComment}"/>
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
</s:lock></s:sequential>
</s:for-each>
<s:variable b:name="lCurrentState" b:select="string($tEvent/r25:state)"/>
<s:if b:test="($tInitState = '99' or $tInitState='98') and ($lCurrentState = '0' or $lCurrentState = '1' or $lCurrentState='2' or $lCurrentState='3')">
<s:if b:test="$tDateTimeEditor = 'F'">
<s:task b:action="set" b:target="$tRespXml/r25:events/r25:event/r25:profile//r25:reservation/@status" b:value="mod"/>
<s:task b:action="settext" b:target="$tRespXml/r25:events/r25:event/r25:profile//r25:reservation_state" b:value="1"/>
</s:if>
</s:if>
<s:if b:test="($tInitState = '0' or $tInitState = '1' or $tInitState='2' or $tInitState='3') and ($lCurrentState = '99' or $lCurrentState='98')">
<s:task b:action="trigger" b:event="CancelRegistration" b:target="."/>
</s:if>
<s:for-each b:target="$tRespXml/r25:events/r25:event/r25:profile[r25:profile_id = $lProfileID]/r25:reservation[not(r25:reservation_state = '99')]">
<s:sequential><s:lock>
<s:choose>
<s:when b:test="count($_target/r25:space_reservation) = 0">
<s:task b:action="copy" b:source="$tRsrvList/reservations/spaces/r25:space_reservation[@occurrence = substring($_target/r25:event_start_dt, 1, 10)]" b:destination="$_target" b:mode="aslastchild"/>
</s:when>
<s:otherwise>
<s:variable b:name="lEventStartDt" b:select=""/>
<s:variable b:name="lRsrvSpaceID" b:select=""/>
<s:variable b:name="lRsrvListRsrv" b:select=""/>
<s:for-each b:target="$_target/r25:space_reservation">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lEventStartDt" b:select="substring($_target/../r25:event_start_dt, 1, 10)"/>
<s:task b:action="assign" b:target="$lRsrvSpaceID" b:select="string($_target/r25:space_id)"/>
<s:choose>
<s:when b:test="exists($tRsrvList/reservations/spaces/r25:space_reservation[@occurrence = $lEventStartDt and r25:space_id = $lRsrvSpaceID])">
<s:task b:action="assign" b:target="$lRsrvListRsrv" b:select="$tRsrvList/reservations/spaces/r25:space_reservation[@occurrence = $lEventStartDt and r25:space_id = $lRsrvSpaceID]"/>
<s:if b:test="not(string($_target/r25:layout_id) = string($lRsrvListRsrv/r25:layout_id))">
<s:task b:action="settext" b:target="$_target/r25:layout_id" b:value="{string($lRsrvListRsrv/r25:layout_id)}"/>
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
<s:if b:test="not(string($_target/r25:space_instructions) = string($lRsrvListRsrv/r25:space_instructions))">
<s:task b:action="settext" b:target="$_target/r25:space_instructions" b:value="{string($lRsrvListRsrv/r25:space_instructions)}"/>
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
<s:if b:test="not(string($_target/r25:share) = string($lRsrvListRsrv/r25:share))">
<s:task b:action="settext" b:target="$_target/r25:share" b:value="{string($lRsrvListRsrv/r25:share)}"/>
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
</s:when>
<s:otherwise>
<s:task b:action="set" b:target="$_target/@status" b:value="del"/>
</s:otherwise>
</s:choose>
</s:lock></s:sequential>
</s:for-each>
<s:task b:action="copy" b:source="$tRsrvList/reservations/spaces/r25:space_reservation[@occurrence = substring($_target/r25:event_start_dt, 1, 10) and not(r25:space_id = $_target/r25:space_reservation/r25:space_id)]" b:destination="$_target" b:mode="aslastchild"/>
</s:otherwise>
</s:choose>
<s:choose>
<s:when b:test="count($_target/r25:resource_reservation) = 0">
<s:task b:action="copy" b:source="$tRsrvList/reservations/resources/r25:resource_reservation[@occurrence = substring($_target/r25:event_start_dt, 1, 10)]" b:destination="$_target" b:mode="aslastchild"/>
</s:when>
<s:otherwise>
<s:variable b:name="lEventStartDt" b:select=""/>
<s:variable b:name="lRsrvResourceID" b:select=""/>
<s:variable b:name="lRsrvListRsrv" b:select=""/>
<s:for-each b:target="$_target/r25:resource_reservation">
<s:sequential><s:lock>
<s:task b:action="assign" b:target="$lEventStartDt" b:select="substring($_target/../r25:event_start_dt, 1, 10)"/>
<s:task b:action="assign" b:target="$lRsrvResourceID" b:select="string($_target/r25:resource_id)"/>
<s:choose>
<s:when b:test="exists($tRsrvList/reservations/resources/r25:resource_reservation[@occurrence = $lEventStartDt and r25:resource_id = $lRsrvResourceID])">
<s:task b:action="assign" b:target="$lRsrvListRsrv" b:select="$tRsrvList/reservations/resources/r25:resource_reservation[@occurrence = $lEventStartDt and r25:resource_id = $lRsrvResourceID]"/>
<s:if b:test="not(string($_target/r25:quantity) = string($lRsrvListRsrv/r25:quantity))">
<s:task b:action="settext" b:target="$_target/r25:quantity" b:value="{string($lRsrvListRsrv/r25:quantity)}"/>
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
<s:if b:test="not(string($_target/r25:resource_instructions) = string($lRsrvListRsrv/r25:resource_instructions))">
<s:task b:action="settext" b:target="$_target/r25:resource_instructions" b:value="{string($lRsrvListRsrv/r25:resource_instructions)}"/>
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>
</s:if>
</s:when>
<s:otherwise>
<s:task b:action="set" b:target="$_target/@status" b:value="del"/>
</s:otherwise>
</s:choose>
</s:lock></s:sequential>
</s:for-each>
<s:task b:action="copy" b:source="$tRsrvList/reservations/resources/r25:resource_reservation[@occurrence = substring($_target/r25:event_start_dt, 1, 10) and not(r25:resource_id = $_target/r25:resource_reservation/r25:resource_id)]" b:destination="$_target" b:mode="aslastchild"/>
</s:otherwise>
</s:choose>
<s:task b:action="set" b:target="$_target/@status" b:value="mod"/>

</s:lock></s:sequential>
</s:for-each>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:variable b:name="lData" b:scope="local" b:select="$tRespXml"/>
<s:task b:action="xml2string" b:variable="$lData"/>
<s:task b:test="not(starts-with($lData,'&lt;?'))" b:action="assign" b:target="$lData" b:scope="local" b:select="concat('&lt;?xml version=&#34;1.0&#34;?&gt;',$lData)"/>
<s:task b:action="assign" b:target="$lData" b:select="replace($lData, 'xl:href', 'href')" />
<s:task b:action="assign" b:target="$lData" b:select="replace($lData, 'xlink:href', 'href')" />

<s:variable b:name="lQuery" b:select="concat('event.xml?event_id=', string($tDataXml/r25:events/r25:event/r25:event_id), '&amp;return_doc=T')"/>
<s:variable b:name="lInputXsl" b:select="string(id('Pref_config_BPE_event_itransform'))"/>
<s:if b:test="string-length($lInputXsl) gt 0">
<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'&amp;itransform=',$lInputXsl)"/>
</s:if>
<s:variable b:name="lOutputXsl" b:select="string(id('Pref_config_BPE_event_otransform'))"/>
<s:if b:test="string-length($lOutputXsl) &gt; 0">
<s:task b:action="assign" b:target="$lQuery" b:select="concat($lQuery,'&amp;otransform=',$lOutputXsl)"/>
</s:if>
<s:variable b:name="l2PutResponseTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="PUT" b:url="{concat(id('Config')/$tWsPrefix,$lQuery,'&amp;async=T')}" b:data="{$lData}" b:destination="$l2PutResponseTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:test="contains($l2PutResponseTxt, '?&gt;')" b:action="assign" b:target="$l2PutResponseTxt" b:select="substring-after($l2PutResponseTxt, '?&gt;')"/>

<s:variable b:name="l2PutResponseXml" b:scope="local" b:select=""/>
<s:task b:action="string2xml" b:source="$l2PutResponseTxt" b:variable="$l2PutResponseXml"/>
<s:task b:action="assign" b:target="$tRespXml" b:select="$l2PutResponseTxt"/>
<s:task b:action="assign" b:target="tResultKey" b:scope="tag" b:select="$l2PutResponseXml//r25:key"/>
<s:variable b:name="lPutEvent" b:select="'multi_second'"/>
<s:task b:action="trigger" b:event="CheckPutResults"/>
</s:event>
<s:event b:on="CheckPutResults">
<s:variable b:name="lResultsTxt" b:scope="local" b:select=""/>
<s:choose>
<s:when b:test="string-length($tResultKey) = 0">		
<s:task b:action="assign" b:target="$tHttpStatus" b:scope="tag" b:select="number(id('HttpMgr')/$tStatus)"/>
<s:task b:action="assign" b:target="$tRespStr" b:scope="tag" b:select="id('HttpMgr')/$tResponseText"/>
<s:task b:test="contains($tRespStr, '?&gt;')" b:action="assign" b:target="$tRespStr" b:select="substring-after($tRespStr, '?&gt;')"/>
<s:task b:action="string2xml" b:source="$tRespStr" b:variable="$tRespXml"/>
<s:variable b:name="pEvent" b:select="'SaveFailure'"/>
<s:if b:test="$tRespXml//r25:event">
<s:task b:action="assign" b:target="$pEvent" b:select="'SaveSuccess'"/>
</s:if>
<s:sequential>
<s:lock>
<s:task b:action="trigger" b:event="ClearSpaceAssignedWarning" b:target="."/>
<s:task b:test="string-length($tRespXml/r25:results/r25:taken_space/r25:taken_space_id) gt 0" b:action="trigger" b:event="SpaceAssignedWarning" b:target="."/>
</s:lock>
</s:sequential>
<s:choose>
<s:when b:test="$pEvent = 'SaveFailure'">
<s:task b:action="trigger" b:event="SaveFailure" b:target="."/>
<s:task b:action="trigger" b:event="NotifyObservers" b:target="."/>
</s:when>
<s:when b:test="$lPutEvent = 'multi_first'">
<s:task b:action="trigger" b:event="SecondPut" b:target="."/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="SaveSuccess" b:target="."/>
<s:task b:action="trigger" b:event="NotifyObservers" b:target="."/>
</s:otherwise>
</s:choose>			
</s:when>
<s:otherwise>
<s:task b:action="load" b:method="GET" b:url="{concat(id('Config')/$tWsPrefix,'results?request=',$tResultKey)}" b:destination="$lResultsTxt">
</s:task>
<s:task b:test="contains($lResultsTxt, '?&gt;')" b:action="assign" b:target="$lResultsTxt" b:select="substring-after($lResultsTxt, '?&gt;')"/>
<s:variable b:name="lResultsXml" b:select=""/>
<s:task b:action="string2xml" b:source="$lResultsTxt" b:variable="$lResultsXml"/>
<s:task b:action="remove" b:target="id('bxLoadingMsgDetail')/*"/>
<s:choose>
<s:when b:test="$lResultsXml//r25:progress">
<s:if b:test="not(count($lResultsXml//r25:progress/r25:step) = 0)">
<s:for-each b:target="$lResultsXml//r25:progress/r25:step">
<s:render b:destination="id('bxLoadingMsgDetail')" b:mode="aslastchild">
<div><s:textnode b:label="{string($_target/text())}"/></div>
</s:render>
</s:for-each>
</s:if>
<s:variable b:name="lRsrvWizPurpose" b:select="string(@c:purpose)"/>
<s:fxstyle b:time="500"/>
<s:task b:action="trigger" b:event="CheckPutResults" b:target="."/>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$tHttpStatus" b:scope="tag" b:select="number(id('HttpMgr')/$tStatus)"/>
<s:task b:action="assign" b:target="$tRespStr" b:scope="tag" b:select="id('HttpMgr')/$tResponseText"/>
<s:task b:test="contains($tRespStr, '?&gt;')" b:action="assign" b:target="$tRespStr" b:select="substring-after($tRespStr, '?&gt;')"/>
<s:task b:action="string2xml" b:source="$tRespStr" b:variable="$tRespXml"/>
<s:variable b:name="pEvent" b:select="'SaveFailure'"/>
<s:if b:test="$tRespXml//r25:event">
<s:task b:action="assign" b:target="$pEvent" b:select="'SaveSuccess'"/>
</s:if>
<s:sequential>
<s:lock>
<s:task b:action="trigger" b:event="ClearSpaceAssignedWarning" b:target="."/>
<s:task b:test="string-length($tRespXml/r25:results/r25:taken_space/r25:taken_space_id) gt 0" b:action="trigger" b:event="SpaceAssignedWarning" b:target="."/>
</s:lock>
</s:sequential>
<s:choose>
<s:when b:test="$pEvent = 'SaveFailure'">
<s:task b:action="trigger" b:event="SaveFailure" b:target="."/>
<s:task b:action="trigger" b:event="NotifyObservers" b:target="."/>
</s:when>
<s:when b:test="$lPutEvent = 'multi_first'">
<s:task b:action="trigger" b:event="SecondPut" b:target="."/>
</s:when>
<s:otherwise>
<s:task b:action="trigger" b:event="SaveSuccess" b:target="."/>
<s:task b:action="trigger" b:event="NotifyObservers" b:target="."/>
</s:otherwise>
</s:choose>
</s:otherwise>
</s:choose>			
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="SaveDraftInfo">
<s:task b:action="trigger" b:event="OutputCurrentInbox"/>
<s:variable b:name="lMsg" b:scope="local" b:select="'Saving Draft Information...'"/>
<s:with b:target="id('bxLoading')">
<s:task b:action="settext" b:target="$tMain" b:value="{$lMsg}"/>
<s:task b:action="trigger" b:event="ShowLoading" b:target="."/>
</s:with>
<s:variable b:name="lEvent" b:scope="local" b:select="$tRespXml/r25:events/r25:event"/>
<s:task b:action="set" b:target="$lEvent/@status" b:value="mod"/>
<s:variable b:name="lProfileID" b:scope="local" b:select="string(@c:profile_id)"/>
<s:task b:action="set" b:target="$lEvent/r25:profile[r25:profile_id = $lProfileID]/@status" b:value="mod"/>
<s:choose>
<s:when b:test="$lEvent/r25:event_text[r25:text_type_id = '8']">
<s:task b:action="set" b:target="$lEvent/r25:event_text[r25:text_type_id = '8']/@status" b:value="mod"/>
</s:when>
<s:otherwise>
<s:variable b:name="lEventText" b:scope="local">
<r25:event_text status="new">
<r25:text_type_id>8</r25:text_type_id>
<r25:text_type_name>Event Draft Info</r25:text_type_name>
<r25:text/>
</r25:event_text>
</s:variable>
<s:task b:action="string2xml" b:variable="$lEventText"/>
<s:task b:action="copy" b:source="$lEventText/r25:event_text" b:destination="$lEvent" b:mode="aslastchild"/>
</s:otherwise>
</s:choose>
<s:variable b:name="lDraftInfo" b:select="''"/>
<s:script><![CDATA[

var reserve = _vars['tInbox'][0].getElementsByTagName('reserve')[0].innerHTML;
if (reserve.length != 0) reserve = '<reserve>' + reserve + '</reserve>';
bpc.setVariable('lDraftInfo', [reserve]);

]]></s:script>
<s:if b:test="not(string-length($lDraftInfo) = 0)">
<s:task b:action="string2xml" b:variable="$lDraftInfo"/>
<s:task b:action="remove" b:target="$lDraftInfo//exemption"/>
<s:task b:action="xml2string" b:variable="$lDraftInfo"/>
<s:script><![CDATA[

var sDraftInfo = _vars['lDraftInfo'][0];
sDraftInfo = sDraftInfo.replace(/</g, '&lt;');
sDraftInfo = sDraftInfo.replace(/>/g, '&gt;');
bpc.setVariable('lDraftInfo', [sDraftInfo]);

]]></s:script>
</s:if>
<s:task b:action="settext" b:target="$lEvent/r25:event_text[r25:text_type_id = '8']/r25:text" b:value="{string($lDraftInfo)}"/>
<s:variable b:name="lDraftData" b:select=""/>
<s:task b:action="xml2string" b:variable="$lDraftData" b:source="$tRespXml"/>
<s:variable b:name="lRespTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="PUT" b:url="{concat(id('Config')/$tWsPrefix,$lQuery)}" b:data="{$lDraftData}" b:destination="$lRespTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
</s:event>
<s:event b:on="SaveSuccess">
<s:if b:test="$tRespXml/r25:events/r25:event/r25:state = '0'">
<s:task b:action="trigger" b:event="SaveDraftInfo"/>
</s:if>
<s:for-each b:target="$tInbox/reserve/obj[@obj_type='space']">
<s:sequential><s:lock>
<s:variable b:name="lSpaceID" b:select="string($_target/@obj_id)"/>
<s:task b:action="trigger" b:event="DeletePendingSpaceRsrv" b:target="$tAvailabilityControl"/>
</s:lock></s:sequential>
</s:for-each>
<s:for-each b:target="$tInbox/reserve/obj[@obj_type='resource']">
<s:sequential><s:lock>
<s:variable b:name="lResourceID" b:select="string($_target/@obj_id)"/>
<s:task b:action="trigger" b:event="DeletePendingResourceRsrv" b:target="$tAvailabilityControl"/>
</s:lock></s:sequential>
</s:for-each>
<s:task b:action="trigger" b:target="id('bxLoading')" b:event="HideLoading"/>
<s:variable b:name="lEventID" b:select="string(@c:event_id)"/>
<s:if b:test="@c:mode = 'edit'">
<s:with b:target="id('layout-tabbox-groups')//div[@c:purpose = concat('event_details_', $lEventID)]">
<s:setatt c:dirty="true"/>
</s:with>
</s:if>
<s:choose>
<s:when b:test="@c:close = 'T'">
<s:task b:action="trigger" b:event="Cancel"/>
</s:when>
<s:otherwise>
<s:task b:action="select" b:target="$tDeck/div[@c:id='summary']"/>
<s:choose>
<s:when b:test="id('FLS_REP_LIST') = 'N'">
<s:task b:action="hide" b:target="$tPrintIcon"/>
</s:when>
<s:otherwise>
<s:task b:action="show" b:target="$tPrintIcon"/>
</s:otherwise>
</s:choose>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="CancelRegistration">
<s:variable b:name="lHasFormCode" b:scope="local" b:select="'F'"/>
<s:variable b:name="lHasFormTemplate" b:scope="local" b:select="'F'"/>
<s:variable b:name="lFormCode" b:scope="local" b:select="$tEvent/r25:custom_attribute[ r25:attribute_id='-17']/r25:attribute_value"/>
<s:if b:test="string-length($lFormCode) ne 0">
<s:task b:action="assign" b:target="$lHasFormCode" b:scope="local" b:select="'T'"/>
</s:if>
<s:variable b:name="lEventText" b:scope="local" b:select="$tEvent/r25:event_text[r25:text_type_id='5']"/>
<s:if b:test="$lEventText and string-length($lEventText/r25:text) ne 0">
<s:task b:action="assign" b:target="$lHasFormTemplate" b:scope="local" b:select="'T'"/>
</s:if>
<s:task b:test="$lHasFormTemplate='T' and $lHasFormCode='T' and $tEvent/r25:state = '99'" b:action="trigger" b:event="_CancelRegistration" b:target="."/>
</s:event>
<s:event b:on="_CancelRegistration">
<s:variable b:name="lFormCode" b:scope="local" b:select="$tEvent/r25:custom_attribute[ r25:attribute_id='-17'][1]/r25:attribute_value"/>
<s:variable b:name="lEvTxt" b:scope="local" b:select="$tEvent/r25:event_text[r25:text_type_id='5'][1]"/>
<s:variable b:name="lTemplate" b:scope="local" b:select=""/>
<s:variable b:name="lTemplateStr" b:scope="tag" b:select="string($lEvTxt/r25:text)"/>
<s:script><![CDATA[

var s = String(_vars['lTemplateStr'][0]);
s = s.replace(/\s*<\?.*?\?>/,'')
.replace(/\s+&\s+/g,' &amp; ');
bpc.setVariable('lTemplateStr',[s],'local');

]]></s:script>
<s:task b:action="string2xml" b:source="$lTemplateStr" b:variable="$lTemplate"/>
<s:variable b:name="lAvailDate" b:scope="local" b:select=""/>
<s:script><![CDATA[

var dt = new Date();
dt.setDate(dt.getDate()-1);
var s = s25_format_date(dt, 'yyyyMMdd');
bpc.setVariable('lAvailDate',[s],'local');

]]></s:script>
<s:task b:action="settext" b:target="$lTemplate//awr25:event[1]/awr25:restrictions/awr25:time/awr25:end" b:value="{$lAvailDate}"/>
<s:variable b:name="lData" b:scope="local" b:select="''"/>
<s:task b:action="xml2string" b:source="$lTemplate" b:variable="$lData"/>
<s:task b:action="set" b:target="$lEvTxt/@status" b:value="mod"/>
<s:task b:action="set" b:target="$lEvTxt/r25:text/text()" b:value="{$lData}"/>
<s:variable b:name="lUrl" b:scope="local" b:select="concat(id('Config')/$tWsPrefix,'ecommerce.form', '?event_id=',@c:obj_id, '&amp;formcode=',$lFormCode, '&amp;async=T&amp;track=F')"/>
<s:variable b:name="lResp" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="PUT" b:url="{$lUrl}" b:data="{$lData}" b:destination="$lResp">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
</s:event>
<s:event b:on="SpaceAssignedWarning">
<s:with b:target="$tMessages">
<s:if b:test="not(.//span[@c:id='msgLocationInUse'])">
<s:render b:destination="div[@c:id='message']" b:mode="aslastchild">
<span c:id="msgLocationInUse">The location you selected is in use, it was not assigned to the event.</span>
</s:render>
</s:if>
<s:task b:action="show" b:target="."/>
</s:with>
</s:event>
<s:event b:on="ClearSpaceAssignedWarning">
<s:with b:target="$tMessages">
<s:task b:action="hide" b:target="."/>
<s:task b:action="remove" b:target=".//span[@c:id='msgLocationInUse']"/>
</s:with>
</s:event>
<s:event b:on="SaveFailure">
<s:task b:target="id('bxLoading')" b:action="trigger" b:event="HideLoading"/>
<s:variable b:name="lLast" b:scope="local" b:select="$tCard/@c:pos"/>
<s:with b:target="$tDeck/div[@c:id='diagnose']">
<s:task b:test="not($lLast='diagnose')" b:action="set" b:target="@c:last" b:value="{$lLast}"/>
<s:task b:action="select" b:target="."/>
<s:task b:action="trigger" b:event="Reset" b:target=".//s25:rsrv_wiz_diagnose"/>
<s:task b:test="string(.//s25:rsrv_wiz_diagnose/@c:diagnose) = 'unknown'" b:action="set" b:target="@c:last" b:value="1"/>
</s:with>
</s:event>
<s:event b:on="OnClickNext">
<s:variable b:name="lCard" b:scope="local" b:select="$tDeck/div[@b:state = 'selected']"/>
<s:variable b:name="lNextCard" b:scope="local" b:select="$lCard/following-sibling::div[@b:behavior='S25RsrvWizCard' and not(@c:modal='true')][1]"/>
<s:if b:test="count($lNextCard) = 1">
<s:task b:action="trigger" b:event="ValidateCard" b:target="."/>
<s:with b:target="$lNextCard">
<s:setatt c:last="{$lCard/@c:pos}"/>
</s:with>
<s:task b:action="select" b:target="$lNextCard"/>
</s:if>
</s:event>
<s:event b:on="OnClickPrevious">
<s:variable b:name="lCard" b:scope="local" b:select="$tDeck/div[@b:state = 'selected']"/>
<s:variable b:name="lPreviousCard" b:scope="local" b:select="$lCard/preceding-sibling::div[@b:behavior='S25RsrvWizCard' and not(@c:modal='true')][1]"/>
<s:if b:test="count($lPreviousCard) = 1">
<s:task b:action="trigger" b:event="ValidateCard" b:target="."/>
<s:with b:target="$lPreviousCard">
<s:setatt c:last="{$lCard/@c:pos}"/>
</s:with>
<s:task b:action="select" b:target="$lPreviousCard"/>
</s:if>
</s:event>
<s:event b:on="SelectLast">
<s:variable b:name="lLast" b:scope="local" b:select="$tDeck/div[@b:state='selected']/@c:last"/>
<s:task b:action="select" b:target="$tDeck/div[@c:pos = $lLast]"/>
</s:event>
<s:event b:on="OnClickCancel">
<s:with b:target="$tDeck/div[@c:id = 'cancel']">
<s:setatt c:last="{$tDeck/div[@b:state = 'selected']/@c:pos}"/>
<s:task b:action="select" b:target="."/>
</s:with>
</s:event>
<s:event b:on="OnClickClose">
<s:setatt c:close="T"/>
<s:task b:action="trigger" b:event="OnClickSave"/>
</s:event>
<s:event b:on="Cancel">
<s:variable b:scope="local" b:name="rsrvwizPurpose" b:select="string(@c:purpose)"/>
<s:variable b:name="lEventID" b:select=""/>
<s:task b:test="not(string-length(@c:event_id) = 0)" b:action="assign" b:target="$lEventID" b:select="string(@c:event_id)"/>
<s:task b:test="not(string-length($tRespXml//r25:event_id) = 0)" b:action="assign" b:target="$lEventID" b:select="string($tRespXml//r25:event_id)"/>

<s:task b:action="trigger" b:event="UnlockEvent" b:target="id('Controller')"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:if b:test="id('PendingSpaceReservations')/space[@event_id = $lEventID]">
<s:task b:action="trigger" b:event="DeletePendingSpaceRsrv" b:target="id('Controller')"/>
</s:if>
<s:if b:test="id('PendingResourceReservations')/resource[@event_id = $lEventID]">
<s:task b:action="trigger" b:event="DeletePendingResourceRsrv" b:target="id('Controller')"/>
</s:if>


<s:with b:target="id('LayoutMgr')/$tSubTabbar/b:deck/div[@c:purpose='rsrvwiz']">
<s:task b:action="remove" b:target=".//b:infobox/div[@c:obj_type='rsrvwiz' and @c:obj_id=$rsrvwizPurpose]"/>
<s:task b:action="remove" b:target=".//a[@c:obj_type='rsrvwiz' and @c:obj_id=$rsrvwizPurpose]/ancestor::span[1]"/>
<s:task b:action="set" b:target="id('s25-tabitem-rsrvwiz')/@c:purpose" b:value="{string(.//a[@b:behavior='RecentLink' and position()=1]/@c:obj_id)}"/>
</s:with>
<s:if b:test="string(id('LayoutMgr')/$tSelectedTab/@c:group) = 'rsrvwiz'">
<s:with b:target="id('Controller')">
<s:sequential><s:lock>
<s:task b:action="trigger" b:event="GoBackward"/>
<s:task b:action="trigger" b:event="BookmarkCheck"/>
</s:lock></s:sequential>
</s:with>
</s:if>
<s:task b:action="remove" b:target="ancestor::div[@b:behavior='LayoutTabboxBuffer']/@c:purpose"/>
<s:task b:action="trigger" b:event="UpdateRsrvWizTabs" b:target="id('layout-subtabbar-rsrvwiz')/s25:subtabbar"/>
<s:task b:action="remove" b:target="ancestor::div[@b:behavior='LayoutTabboxBuffer']"/>
</s:event>
<s:event b:on="OnClickPrint">
<s:variable b:name="lQuery" b:scope="local" b:select="concat('evtype.xml', '?type_id=',$tEvent/r25:event_type_id/text(),'&amp;scope=extended')"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="GET" b:url="{concat(@c:r25ws_prefix,$lQuery)}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="string2xml" b:variable="$lTxt"/>
<s:variable b:name="lReportID" b:scope="local" b:select=""/>
<s:choose>
<s:when b:test="string-length($lTxt/r25:event_types/r25:event_type/r25:reports[r25:report_use='1']/r25:report_id) &gt; 0">
<s:task b:action="assign" b:target="$lReportID" b:select="$lTxt/r25:event_types/r25:event_type/r25:reports[r25:report_use='1']/r25:report_id"/>
<s:if b:test="string-length($lReportID = 0)">
<s:task b:action="assign" b:target="$lReportID" b:select="'none'"/>
</s:if>
</s:when>
<s:otherwise>
<s:task b:action="assign" b:target="$lReportID" b:select="'none'"/>
</s:otherwise>
</s:choose>
<s:choose>
<s:when b:test="$lReportID = 'none'">
<s:with b:target="$tPrintIcon">
<s:setatt c:report_id="" c:report_run_id="" c:report_parms_stored="F"/>
<s:task b:action="alert" b:value="No report is available for this event."/>
</s:with>
</s:when>
<s:otherwise>
<s:variable b:name="lQuery" b:scope="local" b:select="concat('report.xml?report_id=',$lReportID)"/>
<s:variable b:name="lData" b:scope="local" b:select="'&lt;?xml version=&#34;1.0&#34;?&gt;'"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="POST" b:url="{concat(@c:r25ws_prefix,$lQuery)}" b:data="{$lData}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="assign" b:target="$tHttpStatus" b:scope="tag" b:select="number(id('HttpMgr')/$tStatus)"/>
<s:task b:action="assign" b:target="$tReportTemplate" b:scope="tag" b:select="string(id('HttpMgr')/$tResponseText)"/>
<s:task b:action="string2xml" b:variable="$tReportTemplate"/>
<s:variable b:name="lReportRunID" b:scope="local" b:select="$tReportTemplate/r25:reports/r25:report/r25:report_run/ r25:report_run_id"/>
<s:with b:target="$tPrintIcon">
<s:setatt c:report_id="{$lReportID}" c:report_run_id="{$lReportRunID}"/>
</s:with>
<s:task b:action="settext" b:target="$tReportTemplate/r25:reports/r25:report/r25:report_run/ r25:num_parm1" b:value="{string($tEvent/r25:event_id)}"/>
<s:variable b:name="lQuery" b:scope="local" b:select="concat('report.xml?report_id=',$lReportID)"/>
<s:setatt c:query="{$lQuery}"/>
<s:variable b:name="lData" b:scope="local" b:select="$tReportTemplate"/>
<s:task b:action="xml2string" b:variable="$lData"/>
<s:task b:test="not(starts-with($lData,'&lt;?'))" b:action="assign" b:target="$lData" b:scope="local" b:select="concat('&lt;?xml version=&#34;1.0&#34;?&gt;', $lData)"/>
<s:variable b:name="lTxt" b:scope="local" b:select=""/>
<s:task b:action="load" b:method="PUT" b:url="{concat(@c:r25ws_prefix,$lQuery)}" b:data="{$lData}" b:destination="$lTxt">
<s:httpheader b:name="Content-Type" b:value="text/xml"/>
</s:task>
<s:task b:action="assign" b:target="$tHttpStatus" b:scope="tag" b:select="number(id('HttpMgr')/$tStatus)"/>
<s:task b:action="assign" b:target="$tRespStr" b:scope="tag" b:select="id('HttpMgr')/$tResponseText"/>
<s:variable b:name="lPrintOk" b:scope="local" b:select="'F'"/>
<s:variable b:name="lRespMsg" b:scope="local" b:select=""/>
<s:task b:action="string2xml" b:source="$tRespStr" b:variable="$lRespMsg"/>
<s:if b:test="$lRespMsg/r25:results//r25:msg = 'Report successfully saved'">
<s:task b:action="assign" b:target="$lPrintOk" b:select="'T'"/>
</s:if>
<s:with b:target="$tPrintIcon">
<s:setatt c:report_parms_stored="{string($lPrintOk)}"/>
</s:with>
</s:otherwise>
</s:choose>
<s:if b:test="$tPrintIcon/@c:report_parms_stored = 'T'">
<s:variable b:name="lDataUrl" b:scope="local" b:select="concat(@c:r25ws_prefix,'report.run', '?report_id=',$tPrintIcon/@c:report_id, '&amp;report_run_id=',$tPrintIcon/@c:report_run_id,'&amp;async=t')"/>
<s:variable b:name="lResult" b:scope="local" b:select=""/>
<s:task b:action="load" b:url="{$lDataUrl}" b:method="GET" b:destination="$lResult" b:mode="replacechildren"/>
<s:task b:action="string2xml" b:variable="$lResult"/>
<s:variable b:name="lUrlDomain" b:select="''"/>
<s:variable b:name="lUrlHost" b:select="''"/>
<s:variable b:name="lUrlPath" b:select="''"/>
<s:script><![CDATA[
bpc.setVariable('lUrlDomain', [location.protocol + '//' + location.hostname]);
bpc.setVariable('lUrlHost', [location.hostname]);
bpc.setVariable('lUrlPath', [location.pathname]);
]]></s:script>
<s:variable b:name="lReportURL" b:scope="local" b:select="concat(id('Config')/$tWsPrefix,'null.xml',  '?domain=',$lUrlDomain,  '&amp;path=',$lUrlPath,  '&amp;key=',$lResult//r25:key,  '&amp;otransform=',id('Config')/$tXslPrefix,'print.xsl' )"/>
<s:fxstyle b:time="5000"/>
<s:script><![CDATA[

var urlDomain = String(_vars['lUrlDomain'][0]);
var urlPath = String(_vars['lUrlPath'][0]);
var urlHost = String(_vars['lUrlHost'][0]);
var reportUrl = String(_vars['lReportURL'][0]);
reportWin = window.open("http://redirect.collegenet.com/redirect?url=" + escape(urlDomain + reportUrl), "ReportWin", "");

]]></s:script>
</s:if>
</s:event>
<s:event b:on="CloseIconStatus">
<s:choose>
<s:when b:test="$tCard/@c:id = 'cancel' or $tCard/@c:id = 'close' or $tCard/@c:id = 'success'">
<s:task b:action="hide" b:target="$tActionSelect/img[@c:id='action-close']"/>
<s:task b:action="hide" b:target="$tActionSelect/img[@c:id='action-close-immediately']"/>
<s:task b:action="show" b:target="$tActionSelect/img[@c:id='action-close-disabled']"/>
</s:when>
<s:when b:test="$tCard/@c:id = 'summary'">
<s:task b:action="hide" b:target="$tActionSelect/img[@c:id='action-close']"/>
<s:task b:action="hide" b:target="$tActionSelect/img[@c:id='action-close-disabled']"/>
<s:task b:action="show" b:target="$tActionSelect/img[@c:id='action-close-immediately']"/>
</s:when>
<s:otherwise>
<s:task b:action="hide" b:target="$tActionSelect/img[@c:id='action-close-disabled']"/>
<s:task b:action="hide" b:target="$tActionSelect/img[@c:id='action-close-immediately']"/>
<s:task b:action="show" b:target="$tActionSelect/img[@c:id='action-close']"/>
</s:otherwise>
</s:choose>
</s:event>
<s:event b:on="OutputCurrentXmlData">
<s:variable b:name="lDataXml" b:select="''"/>
<s:task b:action="xml2string" b:variable="$lDataXml" b:source="$tDataXml"/>
<s:task b:action="string2xml" b:variable="$lDataXml"/>
<s:task b:action="remove" b:target="$lDataXml/r25:events/wizard"/>
<s:task b:action="remove" b:target="$lDataXml/r25:events/r25:event/*[not(name() = 'r25:profile')]"/>
<s:task b:action="xml2string" b:variable="$lDataXml"/>
<s:script><![CDATA[

var sDataXml = _vars['lDataXml'][0];
sDataXml = sDataXml.replace(/\n/g, '');
bpc.setVariable('lDataXml', [sDataXml]);

]]></s:script>
</s:event>
<s:event b:on="OutputCurrentInbox">
<s:variable b:name="lInbox" b:select="''"/>
<s:script><![CDATA[

var inbox = _vars['tInbox'][0].innerHTML;
bpc.setVariable('lInbox', ['<inbox>' + inbox + '</inbox>']);

]]></s:script>
</s:event>
<s:event b:on="ReEdit">
<s:variable b:name="lEventID" b:scope="local" b:select="string($tRespXml/r25:events/r25:event/r25:event_id)"/>
<s:render b:destination="." b:mode="aslastchild">
<div b:behavior="S25Object" c:obj_type="event" c:obj_action="edit" c:obj_id="{$lEventID}" c:purpose="ReEditObject">
<s:event b:on="command">
<s:super/>
<s:task b:action="remove" b:target="ancestor::div[@b:behavior='LayoutTabboxBuffer']/@c:purpose"/>
<s:task b:action="trigger" b:event="UpdateRsrvWizTabs" b:target="id('layout-subtabbar-rsrvwiz')/s25:subtabbar"/>
<s:task b:action="remove" b:target="ancestor::div[@b:behavior='LayoutTabboxBuffer']"/>
</s:event>
</div>
</s:render>
<s:fxstyle b:time="500"/>
<s:task b:action="trigger" b:event="command" b:target="div[@c:purpose='ReEditObject']"/>
</s:event>
</s:behavior>
</div>