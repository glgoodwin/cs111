import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Tournament extends JApplet 
  implements ActionListener {
  
  // FILE NAME: Tournament.java
  // WRITTEN BY:
  // WHEN:

  // PURPOSE: new class to store information about a complete tournament, 
  // create a GUI to display the progress of the tournament, and simulate 
  // the playing of the tournament games
    
  private Team[] teams;               // array of 16 initial teams
  private Tree<Team> gameTree;        // game tree for the full tournament
  private int nextLevel;              // next level of games in the game tree 
                                                     // to be played 
  private JLabel[] labelArray;                // Labels for the GUI display
  private JLabel tournamentStatusLabel;       // status of the tournament
  private JButton startButton, nextButton, stopButton;   // control buttons
    private JPanel p1,p2,p3,p4,p5,buttonPanel; 

  // add instance variables for panels used to create GUI

  // constructor
  
  public Tournament (Team[] teams) {
    this.teams = teams;
    gameTree = makeInitTree(1);
    nextLevel = 4;
    makeLabels();
    makeDisplay();

    // add calls to methods to create buttons and panels
  }

  public void init () {
      
    // adds panels to the Applet display
      makeDisplay();

  }
    
  private Tree<Team> makeInitTree (int nodeLabel) {
    // recursive method to create and return an initial game tree with 16 teams
    // at the bottom level and empty Team objects at all of the higher levels
      if(nodeLabel<16){
	  gameTree = new Tree<Team>(new Team("  ",0),makeInitTree(2*nodeLabel+1),makeInitTree(2*nodeLabel+2));
      }
      System.out.println(gameTree);
      return gameTree;  
	  	  
      }
    

	
  private void makeLabels () {
    // creates an array to store the 31 Labels that appear on the GUI display 
    // (only indices 1 to 31 of the array are used, corresponding to the node
    // labels of the game tree)
    labelArray = new JLabel[32];
    for (int i = 1; i < 32; i++) {
      labelArray[i] = new JLabel();
      labelArray[i].setOpaque(true);
      labelArray[i].setBackground(Color.white);
      if (i > 15)    // Labels for the initial 16 teams
	labelArray[i].setText(teams[i-16].toString());
      else           // Labels for the outcome of games to be played
	labelArray[i].setText(" ");
    }
    tournamentStatusLabel = new JLabel("New Tournament");
  }
	
  // add methods to create buttons and panels

  private void startNewTournament () {
    // initializes the GUI display to start a new tournament with only the 16 
    // initial teams, and recreates the initial game tree
    gameTree = makeInitTree(1);
    nextLevel = 4;
    for (int i = 1; i < 32; i++) 
      if (i > 15)
	labelArray[i].setText(teams[i-16].toString());
      else
	labelArray[i].setText(" ");
    tournamentStatusLabel.setText("New Tournament");
  }

    public void makeDisplay(){
	p1 = new JPanel();
	p2 = new JPanel();
	p3 = new JPanel();
	p4 = new JPanel();
	p5 = new JPanel();
	
	//layout for panel p1
	p1.setLayout(new GridLayout(1,16));
	p1.add(labelArray[31]);
	p1.add(labelArray[30]);
	p1.add(labelArray[29]);
	p1.add(labelArray[28]);
	p1.add(labelArray[27]);
	p1.add(labelArray[26]);
	p1.add(labelArray[25]);
	p1.add(labelArray[24]);
	p1.add(labelArray[23]);
	p1.add(labelArray[22]); 
	p1.add(labelArray[21]);
	p1.add(labelArray[20]);
	p1.add(labelArray[19]);
	p1.add(labelArray[18]);
	p1.add(labelArray[17]);
	p1.add(labelArray[16]);

	p2.setLayout(new GridLayout(1,8));
	p2.add(labelArray[15]);
	p2.add(labelArray[14]);
	p2.add(labelArray[13]);
	p2.add(labelArray[12]);
	p2.add(labelArray[11]);
	p2.add(labelArray[10]);
	p2.add(labelArray[9]);
	p2.add(labelArray[8]);	

	p3.setLayout(new GridLayout(1,4));
	p3.add(labelArray[7]);
	p3.add(labelArray[6]);
	p3.add(labelArray[5]);
	p3.add(labelArray[4]);

	p4.setLayout(new GridLayout(1,2));
	p4.add(labelArray[2]);
	p4.add(labelArray[1]);

	p5.setLayout(new GridLayout(1,1));
	p5.add(labelArray[0]);
		 



    }

  private void playNextLevel () {
    // simulates playing of the games at the next level of the tournament
    playLevel(gameTree, 1, 1);
  }

  private void playLevel (Tree<Team> t, int level, int label) {
    // plays all the games that yield the winning teams to be placed at the
    // nextLevel of the game tree


  }
	
  public void actionPerformed (ActionEvent event) {
    // handles the events generated by Button clicks
    Object source = event.getSource();   
    if (source.equals(startButton))
      startNewTournament();
    else if (source.equals(nextButton)) {
      if (nextLevel > 0) {
	    playNextLevel();
	    nextLevel--;
      }
      if (nextLevel == 0)
	    tournamentStatusLabel.setText("Tournament over!");
    } 
    else if (source.equals(stopButton))
      System.exit(0);
  }

  // local abbreviations for the Tree class methods

  public static <V> boolean isLeaf (Tree<V> t) {  
    return Tree.isLeaf(t);  
  }  
  public static <V> Tree<V> node (V val, Tree<V> lt, Tree<V> rt) {  
    return Tree.node(val, lt, rt);  
  }      
  public static <V> V getValue (Tree<V> t) {  
    return Tree.getValue(t);  
  }  
  public static <V> Tree<V> getLeft (Tree<V> t) {  
    return Tree.getLeft(t);  
  }      
  public static <V> Tree<V> getRight (Tree<V> t) {  
    return Tree.getRight(t);  
  }
  public static <V> void setValue (Tree<V> T, V newValue) {
    Tree.setValue(T, newValue);
  }
  public static <V> void setLeft (Tree<V> T, Tree<V> newLeft) {
    Tree.setLeft(T, newLeft);
  }
  public static <V> void setRight (Tree<V> T, Tree<V> newRight) {
    Tree.setRight(T, newRight);
  }
}
		
		
