    // finds a path in the graph from the start node to the goal node, 
    // using the depth-first search strategy
    String current = start;                  // current node during search
    LinkedList<String> visited = new LinkedList<String>();   // list of visited nodes
    visited.add(start);
    LinkedList<String> neighbors = new LinkedList<String>(); // list of neighboring nodes
    Stack<String> pathStack = new Stack<String>();           // stores the current path
    pathStack.push(start);                         // through the graph
    System.out.print(current + " ");
    while (!current.equals(goal)) {      // while the goal is not reached...
      // get the neighbors of the current node
      neighbors = getNeighborList(current, graph);
      // remove neighbors that have already been visited
      removeVisitedNeighbors(neighbors, visited);
      if (neighbors.isEmpty()) {       // no new nodes can be reached,
	pathStack.pop();                  // so back-up the search to
	current = pathStack.peek();     // a previous node
	System.out.print(current + " ");
      } else {   // proceed to a new node of the graph
	current = neighbors.get(0);
	pathStack.push(current);
	visited.add(current);
	System.out.print(current + " ");
      }
    }
    System.out.println("\n Final path from start node to goal node:");
    System.out.println(pathStack);
    }
