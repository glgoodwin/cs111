;;; BINDEX Abstract syntax

;; Programs

(def (pgm? exp)
 (&& (list? exp)
     (&& (= (length exp) 3)
	 (sym= (first exp) (sym bindex)))))

(def (pgm-formals exp) (second exp))
(def (pgm-body exp) (third exp))

;;; Expressions

;; Literals
(def (lit? exp) (int? exp))
(def (lit-value exp) exp)

;; Variables
(def (var? exp) (sym? exp))
(def (var-name exp) exp)

;; Binary Applications
(def (binapp? exp)
  (&& (list? exp)
      (&& (= (length exp) 3)
	  (binop? (first exp)))))

(def (binapp-op exp) (first exp))
(def (binapp-rand1 exp) (second exp))
(def (binapp-rand2 exp) (third exp))

;; Local Bindings
(def (bind? exp)
  (&& (list? exp)
      (&& (= (length exp) 4)
	  (&& (sym= (first exp) (sym bind))
	      (sym? (second exp))))))

(def (bind-name exp) (second exp))
(def (bind-defn exp) (third exp))
(def (bind-body exp) (fourth exp))
     
;; Binary Operators
(def (binop? exp)
  (|| (sym= exp (sym +))
      (|| (sym= exp (sym -))
	  (|| (sym= exp (sym *))
	      (|| (sym= exp (sym /))
		  (sym= exp (sym %)))))))
        
