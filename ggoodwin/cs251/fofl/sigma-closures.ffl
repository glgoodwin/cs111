(fofl (n) (list (test 2 3 4 n) (test 5 6 7 n))
  (def (sigma f lo hi)
    (if (> lo hi) 0
        (+ (applyClosure f lo) (sigma f (+ lo 1) hi))))
  (def (test p q r h) 
    (list (sigma (list (sym sq)) 1 h)
          (sigma (scale p) 1 h)
          (sigma (linear q r) 1 h)))
  (def (sq x) (* x x))
  (def (scale c) (list (sym scale) c))
  (def (scaleClosed y c) (* c y))
  (def (linear a b) (list (sym linear) a b))
  (def (linearClosed z a b) (+ (* a z) b))
  (def (applyClosure clo arg)
    (bind name (nth 1 clo) ; Assume nth is 1-based list indexing
      (cond ((sym= name (sym sq)) (sq arg))
            ((sym= name (sym scale)) 
             (scaleClosed arg (nth 2 clo)))
            ((sym= name (sym linear)) 
             (linearClosed arg (nth 2 clo) (nth 3 clo)))
	    (else (error "unknown closure")))))
  )
